#!/bin/bash

REAL_CC=gcc
REAL_LD=ld

verbose=1

# grep mini-gcc path 
MLIBDIR=$(echo -e $0 | sed -E "s/(.*)\/mini-gcc/\1/")


echo_verbose(){
		if [ $verbose == 1 ]; then
		>&2 echo $@
		fi
}


echo_verbose minilibdir: $MLIBDIR


# gcc options
# only linux x64 for now.

COMMONCFLAGS="-I. -fno-stack-protector -fdata-sections -fomit-frame-pointer -ffunction-sections \
		-Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-const-variable -Wall \
		-nodefaultlibs -static -nostdlib -DMLIB -fno-builtin\
		-I$MLIBDIR/compat -I$MLIBDIR/headers/common-links -I$MLIBDIR/headers/common -I$MLIBDIR/headers/linux_x64 -I$MLIBDIR -I./ \
		-I$MLIBDIR/include -Os"
		
		#-nodefaultlibs -static -nostdlib -DMLIB -fno-builtin -nostdinc\

# needs os detection. but not important for now
CFLAGS="$COMMONCFLAGS -DLINUX -DX64"

# ld options 
CFLAGS="$CFLAGS -Wl,-n,-s,--gc-sections,-nostdlib"

# (default) linker script 
LDSCRIPT=",-T$MLIBDIR/ldscripts/ld.script"

#LDFLAGS=-nostdlib -nodefaultlibs --gc-sections -static -n -s $(LSCRIPT) -nostartfiles -O 2

PARSE=1

while [ 1 ]; do
if [ $PARSE == 0 ]; then 

usage(){
		echo 
		echo "Usage: mini-gcc [options] [gcc-options] -o outputfile inputfile(s).c

mini-gcc compiles binaries and links them statically with minilib.
It's a wrapper to call gcc with the right compile options,
generate the config of minilib and include minilib.h. 

mini-gcc passes all options it's invoked with on to gcc,
besides the options described below, which must be passed 
before options and parameters for gcc.

-h, --help:	shows this help
--license:	shows the license (BSD 3-clause)

--config 'file': 
        when the --config 'file' option is given
        mini-gcc also parses the config in 'file',
        writes the configuration into 'file'.h and includes
        this into every compiled file. 
        The configfile syntax is described within the file
        'minilib.conf', which is also a minimal configuration file
        for the hello world examples.

--ldscript-file 'file':
        Uses the supplied 'file' as linker script for ld.

--ldscript 'name': 
        Either includes the according ld.script.'name' file 
        from the directory ldscripts, if existent, or extracts the according
        script and writes it into minilib.ldscript.
        This script is passed to ld with the option -T
				name can be one of:
					onlytext     ( drop all sections beside the text segment )
					text_and_bss ( keep also the bss segment )

--autoconf / -ac
				This is going to generate 

--genconf 'outfile' 'infile1' 'infile2' ...:
				parses the sourcefiles 'infile1',.. and writes a config into
				outfile, which enables compiling of all used minilib functions
				within 'infiles'
				After the config is written to outfile, 
				use the config file with --config 'outfile' 

--force
				Overwrite existing files without warning


(c) 2019 Michael misc Myer - BSD 3-clause
 ('mini-gcc --license' shows the terms)

"
		exit
}


exec_gcc(){
		if [ $verbose == 1 ]; then
			echo_verbose $REAL_CC $CFLAGS$LDSCRIPT $@
		else
			echo $REAL_CC $@
		fi
		$REAL_CC $CFLAGS$LDSCRIPT $@
		return $?
}



checkconfig (){
	  #( (echo "#define macro(a1,a2) M a1" && echo "macro(12,13)" && cat $1 ) | gcc -include tmp2.h -E - )
		echo_verbose $1
		ERR=$((source $1 > $1.h) 2>&1)
		#sed "s/command/function/"
		echo_verbose var: $VAR
		if [ -n "$ERR" ]; 
		then
				echo -e "Error: \n $ERR"
				exit 1;
		fi
		echo_verbose ARCH: $MINI_ARCH
		echo_verbose OS: $MINI_OS
		#echo GCC-Options: $REAL_CC $CFLAGS
		CFLAGS="--include $1.h $CFLAGS"
}


genconfig(){
						echo '# config generated by mini-gcc.
# Save default. The minibuf is needed for malloc, printf, and file streams. 
mini_buf 1024

# define headerguards, to prevent parsing the standard header
HEADERGUARDS

'

		echo "$headerguards_h" "$genconfigmacros_h" | ($REAL_CC $CFLAGS -Dincluded_minilib_h -E $@ -include <( cat - ) ) \
				| sed -n 's/^.*_M_MLIB_\(.*\)_M_.*/mini_\1/p' | sort -u
				return $?
}


ARGS=$@

if [ "$1" = "" ]
then
		usage
fi


opt=1
opt_force=0
opt_autoconf=0

while [ "$1" != "" ] && [ $opt = 1 ]
do
		opt=0
		case $1 in
				--config )   
						shift
						config=$1
						checkconfig $config 
						shift
						opt=1
						;;
				--force )
						shift
						opt_force=1
						opt=1
						;;
				--autoconf )
						shift
						opt_autoconf=1
						opt=1
						;;
				--genconf )
						shift
						outfile=$1
						if [ -e $outfile ]
						then
								if [ $opt_force == 1 ]
								then
										echo "Overwriting $outfile"
								else
										echo "$outfile already exists. Won't overwrite without --force."
										exit 1
								fi
						fi
						echo generating config in $outfile
						shift
						genconfig $@ > $outfile
						exit $?
						;;
				--ldscript )
						shift
						if [ -e "$MLIBDIR/ldscripts/ld.script.$1" ]; then
								LDSCRIPT=",-T$MLIBDIR/ldscripts/ld.script.onlytext"
						else
								LDSCRIPT=",-Tminilib.ldscript"
								var="ld_script_$1"
								echo_verbose "Writing ld.script"
								echo "${!var}" > minilib.ldscript
						fi
						shift
						opt=1
						;;
				--ldscript-file )
						shift
						LDSCRIPT=",-T$1"
						shift
						opt=1
						;;

			 	-h | --help )   
						usage
						exit
						;;
				--license )
						echo "$LICENSE"
						echo
						exit
						;;

		esac
done

if [ "$1" == "" ]; then
		# Assume, everything is alright and there havent been parameters forgotten
		exit 0;
fi

#echo args: $@
if [ $opt_autoconf == 1 ]
then
		exec_gcc $@
else
		exec_gcc $@
fi

ret=$?

if [ $ret != 0 ]; then
		echo Error.
		echo Failed command:
		echo $REAL_CC $CFLAGS$LDSCRIPT $@
fi

exit $ret

fi
# end of if PARSE==1
PARSE=0


# ==================================================
# configfiles and embedded scripts start below. 
# They are generated and included by "make mini-gcc"
# ==================================================

# prefer the genconfig script, if present.
if [ -e $MLIBDIR/scripts/genconfig.sh ]; then
		echo_verbose Parsing genconfig.sh
		source $MLIBDIR/scripts/genconfig.sh
else
		echo "Parsing builtin config"	

# --- genconfig-start: TMPL ---
#
# Script, updated from "make header" / genheaders.pl
# The functions are callen from minilib.conf 
# (or another config file)
# The output of this script generates minilib.conf.h
# 

mini_start(){
		echo "#define mini_start $1"
}
mini_exit(){
		echo "#define mini_exit $1"
}

ARCH(){
		echo "#define MINILIB_ARCH $1"
		export MINI_ARCH=$1
}
OS(){
		echo "#define MINILIB_OS $1"
		export MINI_OS=$1
}
mini_buf(){
		echo "#define mini_buf $1"
}

mini_INCLUDESRC(){
		echo "#define INCLUDESRC"
}

INCLUDESRC(){
		echo "#define INCLUDESRC"
}


mini_HEADERGUARDS(){
		echo "#define HEADERGUARDS"
}


HEADERGUARDS(){
		echo "#define HEADERGUARDS"
}



# Everything below will be silently overwritten,
# when make header ist invoked

# --- define_functions-start: generate --- #
mini_memfrob(){ 
  echo "#define mini_memfrob generate" 
}
mini_fgetpos(){ 
  echo "#define mini_fgetpos generate" 
}
mini_fileno(){ 
  echo "#define mini_fileno generate" 
}
mini_dup3(){ 
  echo "#define mini_dup3 generate" 
}
mini_strcmp(){ 
  echo "#define mini_strcmp generate" 
}
mini_fclose(){ 
  echo "#define mini_fclose generate" 
}
mini_close(){ 
  echo "#define mini_close generate" 
}
mini_isprint(){ 
  echo "#define mini_isprint generate" 
}
mini_snprintf(){ 
  echo "#define mini_snprintf generate" 
}
mini_creat(){ 
  echo "#define mini_creat generate" 
}
mini_stat(){ 
  echo "#define mini_stat generate" 
}
mini_strncpy(){ 
  echo "#define mini_strncpy generate" 
}
mini_def(){ 
  echo "#define mini_def generate" 
}
mini_itohex(){ 
  echo "#define mini_itohex generate" 
}
mini_sprintf(){ 
  echo "#define mini_sprintf generate" 
}
mini_mprotect(){ 
  echo "#define mini_mprotect generate" 
}
mini_getcwd(){ 
  echo "#define mini_getcwd generate" 
}
mini_strerror(){ 
  echo "#define mini_strerror generate" 
}
mini_rand(){ 
  echo "#define mini_rand generate" 
}
mini_ftruncate(){ 
  echo "#define mini_ftruncate generate" 
}
mini_dtodec(){ 
  echo "#define mini_dtodec generate" 
}
mini_unlink(){ 
  echo "#define mini_unlink generate" 
}
mini_write(){ 
  echo "#define mini_write generate" 
}
mini__itohex(){ 
  echo "#define mini__itohex generate" 
}
mini_getenv(){ 
  echo "#define mini_getenv generate" 
}
mini_dup2(){ 
  echo "#define mini_dup2 generate" 
}
mini_getpid(){ 
  echo "#define mini_getpid generate" 
}
mini_fsetpos(){ 
  echo "#define mini_fsetpos generate" 
}
mini_fstat(){ 
  echo "#define mini_fstat generate" 
}
mini_free(){ 
  echo "#define mini_free generate" 
}
mini_read(){ 
  echo "#define mini_read generate" 
}
mini_printf(){ 
  echo "#define mini_printf generate" 
}
mini_memcmp(){ 
  echo "#define mini_memcmp generate" 
}
mini_fprintf(){ 
  echo "#define mini_fprintf generate" 
}
mini_puts(){ 
  echo "#define mini_puts generate" 
}
mini_dup(){ 
  echo "#define mini_dup generate" 
}
mini_feof(){ 
  echo "#define mini_feof generate" 
}
mini_fputc(){ 
  echo "#define mini_fputc generate" 
}
mini_rename(){ 
  echo "#define mini_rename generate" 
}
mini_ftell(){ 
  echo "#define mini_ftell generate" 
}
mini_fopen(){ 
  echo "#define mini_fopen generate" 
}
mini_srand(){ 
  echo "#define mini_srand generate" 
}
mini_time(){ 
  echo "#define mini_time generate" 
}
mini_open(){ 
  echo "#define mini_open generate" 
}
mini_itodec(){ 
  echo "#define mini_itodec generate" 
}
mini__itobin(){ 
  echo "#define mini__itobin generate" 
}
mini_tcgetattr(){ 
  echo "#define mini_tcgetattr generate" 
}
mini_memcpy(){ 
  echo "#define mini_memcpy generate" 
}
mini_memset(){ 
  echo "#define mini_memset generate" 
}
mini_strlen(){ 
  echo "#define mini_strlen generate" 
}
mini_vsnprintf(){ 
  echo "#define mini_vsnprintf generate" 
}
mini_putchar(){ 
  echo "#define mini_putchar generate" 
}
mini_printl(){ 
  echo "#define mini_printl generate" 
}
mini_gettimeofday(){ 
  echo "#define mini_gettimeofday generate" 
}
mini_ioctl(){ 
  echo "#define mini_ioctl generate" 
}
mini_rewind(){ 
  echo "#define mini_rewind generate" 
}
mini_strcpy(){ 
  echo "#define mini_strcpy generate" 
}
mini_dprintf(){ 
  echo "#define mini_dprintf generate" 
}
mini_strcat(){ 
  echo "#define mini_strcat generate" 
}
mini_atoi(){ 
  echo "#define mini_atoi generate" 
}
mini_lseek(){ 
  echo "#define mini_lseek generate" 
}
mini_fseek(){ 
  echo "#define mini_fseek generate" 
}
mini_fsync(){ 
  echo "#define mini_fsync generate" 
}
mini_fwrite(){ 
  echo "#define mini_fwrite generate" 
}
mini_fread(){ 
  echo "#define mini_fread generate" 
}
mini_tcsetattr(){ 
  echo "#define mini_tcsetattr generate" 
}
mini_fputs(){ 
  echo "#define mini_fputs generate" 
}
mini_isspace(){ 
  echo "#define mini_isspace generate" 
}
mini_malloc(){ 
  echo "#define mini_malloc generate" 
}
mini_uitodec(){ 
  echo "#define mini_uitodec generate" 
}
mini_select(){ 
  echo "#define mini_select generate" 
}
mini_print(){ 
  echo "#define mini_print generate" 
}
mini_strncmp(){ 
  echo "#define mini_strncmp generate" 
}
mini_itoHEX(){ 
  echo "#define mini_itoHEX generate" 
}
# --- define_functions-end: generate --- #

# --- genconfig-end: TMPL ---

fi


# .. note: read -r -d '' << ENDVAR 
# ...
# --- content-ldscript-start: TMPL ---
ld_script='
SECTIONS {                                                                                                                                                    
		/DISCARD/ : { 
			*(.comment) 
			*(.eh_frame)
			*(.plt)
			*(.got.plt)
			*(.rel.plt)
		}
}
INSERT AFTER .text

'
ld_script_onlytext='
/*OUTPUT_FORMAT("elf32-i386")
OUTPUT_ARCH(i386)
*/

PHDRS {
	text PT_LOAD FILEHDR PHDRS ;
	/*bss PT_LOAD;*/
}

ENTRY(_start)

SECTIONS
{
		/* Read-only sections, merged into text segment: */
		/*__executable_start = SEGMENT_START("text-segment", 0x08048000); */
		start = _start;
		/*. = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;*/
		. = 0x08048000 + SIZEOF_HEADERS;

		.text           :
		{
				*(.text.unlikely .text.*_unlikely)
						*(.text._start .text._start.*)
						*(.text.main .text.main.*)
						*(.text.cexit)
						*(.text._exit .text._exit.*)
						*(.text.__exit .text.__exit.*)
						*(.text.startup .text.startup.*)
						*(.text.hot .text.hot.*)
						*(.text .stub .text.* .gnu.linkonce.t.*)
						/* .gnu.warning sections are handled specially by elf32.em.  */
						*(.gnu.warning)

/*		 }
		.bss            :
		{ 
*/
/*misc: Seems to work without a bss segment ( for readonly data only) , so commented it out.
saves 15 bytes. ( needs -N for linking )*/


						*(.dynbss)
						*(.bss .bss.* .gnu.linkonce.b.*)
						*(COMMON)
						*(.rodata .rodata.* .gnu.linkonce.r.*)
						/* Align here to ensure that the .bss section occupies space up to
							 _end.  Align after .bss to ensure correct alignment even if the
							 .bss section disappears because there are no input sections.
							 FIXME: Why do we need it? When there is no .bss section, we dont
							 pad the .data section.  
misc: deleted : . = ALIGN(. != 0 ? 32 / 8 : 1);*/
		} :text

		/DISCARD/ : { 
			*(.note.GNU-stack) 
			*(.gnu_debuglink) 
			*(.gnu.lto_*) 
			*(.iplt*) 
			*(.igot*) 
			*(.rel*) 
			*(.comment)
			*(.eh_frame)
			*(.plt*)
			*(.got.plt*)
			*(.rel.*)
			*(.note*)
			*(*)
			}
}


'
ld_script_bloating='

/*OUTPUT_FORMAT("elf32-i386")
OUTPUT_ARCH(i386)*/

PHDRS {
	text PT_LOAD FILEHDR PHDRS ;
	/*bss PT_LOAD;*/
}

ENTRY(_start)

SECTIONS
{
		/* Read-only sections, merged into text segment: */
		/*__executable_start = SEGMENT_START("text-segment", 0x08048000); */
		start = _start;
		/*. = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;*/
		. = 0x08048000 + SIZEOF_HEADERS;

		.text           :
		{
				*(.text.unlikely .text.*_unlikely)
						*(.text.exit .text.exit.*)
						*(.text.startup .text.startup.*)
						*(.text.hot .text.hot.*)
						*(.text .stub .text.* .gnu.linkonce.t.*)
						/* .gnu.warning sections are handled specially by elf32.em.  */
						*(.gnu.warning)

		 }
		.bss            :
		{ 
						*(.dynbss)
						*(.bss .bss.* .gnu.linkonce.b.*)
						*(.bss)
						*(.shstrtab)
						*(COMMON)
						*(.rodata .rodata.* .gnu.linkonce.r.*)
						/* Align here to ensure that the .bss section occupies space up to
							 _end.  Align after .bss to ensure correct alignment even if the
							 .bss section disappears because there are no input sections.
							 FIXME: Why do we need it? When there is no .bss section, we dont
							 pad the .data section.  */
						. = ALIGN(. != 0 ? 32 / 8 : 1);
						_bssend = . ;
						_brk = .;
		} :text

		/DISCARD/ : { 
			*(.note.GNU-stack) 
			*(.gnu_debuglink) 
			*(.gnu.lto_*) 
			*(.iplt*) 
			*(.igot*) 
			*(.rel*) 
			*(.comment)
			*(.eh_frame)
			*(.plt*)
			*(.got.plt*)
			*(.rel.*)
			*(.note*)
			}
}


'
ld_script_text_and_bss='
/*OUTPUT_FORMAT("elf32-i386")
OUTPUT_ARCH(i386)*/

PHDRS {
	text PT_LOAD FILEHDR PHDRS ;
	/*bss PT_LOAD;*/
}

ENTRY(_start)

SECTIONS
{
		/* Read-only sections, merged into text segment: */
		/*__executable_start = SEGMENT_START("text-segment", 0x08048000); */
		start = _start;
		/*. = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;*/
		. = 0x08048000 + SIZEOF_HEADERS;

		.text           :
		{
				*(.text.unlikely .text.*_unlikely)
						*(.text.exit .text.exit.*)
						*(.text.startup .text.startup.*)
						*(.text.hot .text.hot.*)
						*(.text .stub .text.* .gnu.linkonce.t.*)
						/* .gnu.warning sections are handled specially by elf32.em.  */
						*(.gnu.warning)

		 }
		.bss            :
		{ 

						*(.dynbss)
						*(.bss .bss.* .gnu.linkonce.b.*)
						*(COMMON)
						*(.rodata .rodata.* .gnu.linkonce.r.*)
						/* Align here to ensure that the .bss section occupies space up to
							 _end.  Align after .bss to ensure correct alignment even if the
							 .bss section disappears because there are no input sections.
							 FIXME: Why do we need it? When there is no .bss section, we dont
							 pad the .data section.  
misc: deleted : . = ALIGN(. != 0 ? 32 / 8 : 1);*/
		} :text

		/DISCARD/ : { 
			*(.note.GNU-stack) 
			*(.gnu_debuglink) 
			*(.gnu.lto_*) 
			*(.iplt*) 
			*(.igot*) 
			*(.rel*) 
			*(.comment)
			*(.eh_frame)
			*(.plt*)
			*(.got.plt*)
			*(.rel.*)
			*(.note*)
			}
}


'
# Parsing
# --- content-ldscript-end: TMPL ---

genconfigmacros_h='
// --- content-genconf-macros-start: TMPL ---
// This file is part of minilib, (c) 2012-2019 Michael Misc Myer.
// misc.myer@zoho.com / www.github.com/michael105
// Licensed under BSD License.
// Please see the files LICENSE and NOTICE for the exact conditions. 



// Everything below will be silently overwritten,
// when make header ist invoked

// --- define_macros-start: generate --- //
#define memfrob(...) _M_MLIB_memfrob_M_()
#define fgetpos(...) _M_MLIB_fgetpos_M_()
#define fileno(...) _M_MLIB_fileno_M_()
#define dup3(...) _M_MLIB_dup3_M_()
#define strcmp(...) _M_MLIB_strcmp_M_()
#define fclose(...) _M_MLIB_fclose_M_()
#define close(...) _M_MLIB_close_M_()
#define isprint(...) _M_MLIB_isprint_M_()
#define snprintf(...) _M_MLIB_snprintf_M_()
#define creat(...) _M_MLIB_creat_M_()
#define stat(...) _M_MLIB_stat_M_()
#define strncpy(...) _M_MLIB_strncpy_M_()
#define def(...) _M_MLIB_def_M_()
#define itohex(...) _M_MLIB_itohex_M_()
#define sprintf(...) _M_MLIB_sprintf_M_()
#define mprotect(...) _M_MLIB_mprotect_M_()
#define getcwd(...) _M_MLIB_getcwd_M_()
#define strerror(...) _M_MLIB_strerror_M_()
#define rand(...) _M_MLIB_rand_M_()
#define ftruncate(...) _M_MLIB_ftruncate_M_()
#define dtodec(...) _M_MLIB_dtodec_M_()
#define unlink(...) _M_MLIB_unlink_M_()
#define write(...) _M_MLIB_write_M_()
#define _itohex(...) _M_MLIB__itohex_M_()
#define getenv(...) _M_MLIB_getenv_M_()
#define dup2(...) _M_MLIB_dup2_M_()
#define getpid(...) _M_MLIB_getpid_M_()
#define fsetpos(...) _M_MLIB_fsetpos_M_()
#define fstat(...) _M_MLIB_fstat_M_()
#define free(...) _M_MLIB_free_M_()
#define read(...) _M_MLIB_read_M_()
#define printf(...) _M_MLIB_printf_M_()
#define memcmp(...) _M_MLIB_memcmp_M_()
#define fprintf(...) _M_MLIB_fprintf_M_()
#define puts(...) _M_MLIB_puts_M_()
#define dup(...) _M_MLIB_dup_M_()
#define feof(...) _M_MLIB_feof_M_()
#define fputc(...) _M_MLIB_fputc_M_()
#define rename(...) _M_MLIB_rename_M_()
#define ftell(...) _M_MLIB_ftell_M_()
#define fopen(...) _M_MLIB_fopen_M_()
#define srand(...) _M_MLIB_srand_M_()
#define time(...) _M_MLIB_time_M_()
#define open(...) _M_MLIB_open_M_()
#define itodec(...) _M_MLIB_itodec_M_()
#define _itobin(...) _M_MLIB__itobin_M_()
#define tcgetattr(...) _M_MLIB_tcgetattr_M_()
#define memcpy(...) _M_MLIB_memcpy_M_()
#define memset(...) _M_MLIB_memset_M_()
#define strlen(...) _M_MLIB_strlen_M_()
#define vsnprintf(...) _M_MLIB_vsnprintf_M_()
#define putchar(...) _M_MLIB_putchar_M_()
#define printl(...) _M_MLIB_printl_M_()
#define gettimeofday(...) _M_MLIB_gettimeofday_M_()
#define ioctl(...) _M_MLIB_ioctl_M_()
#define rewind(...) _M_MLIB_rewind_M_()
#define strcpy(...) _M_MLIB_strcpy_M_()
#define dprintf(...) _M_MLIB_dprintf_M_()
#define strcat(...) _M_MLIB_strcat_M_()
#define atoi(...) _M_MLIB_atoi_M_()
#define lseek(...) _M_MLIB_lseek_M_()
#define fseek(...) _M_MLIB_fseek_M_()
#define fsync(...) _M_MLIB_fsync_M_()
#define fwrite(...) _M_MLIB_fwrite_M_()
#define fread(...) _M_MLIB_fread_M_()
#define tcsetattr(...) _M_MLIB_tcsetattr_M_()
#define fputs(...) _M_MLIB_fputs_M_()
#define isspace(...) _M_MLIB_isspace_M_()
#define malloc(...) _M_MLIB_malloc_M_()
#define uitodec(...) _M_MLIB_uitodec_M_()
#define select(...) _M_MLIB_select_M_()
#define print(...) _M_MLIB_print_M_()
#define strncmp(...) _M_MLIB_strncmp_M_()
#define itoHEX(...) _M_MLIB_itoHEX_M_()
// --- define_macros-end: generate --- //
// --- content-genconf-macros-end: TMPL ---
'

headerguards_h='
// --- content-headerguards-start: TMPL ---
#ifndef headerguards_h
#define headerguards_h

// prevent standard headers from being compiled

#define included_ctype_h
#define included_declarations_h
#define included_fcntl_h
#define included_ioctl_h
#define included_miniextras_h
#define included_stdio_h
#define included_stdlib_h
#define included_string_h
#define included_time_h
#define included_unistd_h


#define _AIO_H
#define _ALIASES_H
#define _ARGP_H
#define _ARGZ_H
#define _ARPA_FTP_H
#define _ARPA_INET_H
#define _ARPA_NAMESER_H
#define _ARPA_TELNET_H
#define _ARPA_TFTP_H
#define _AR_H
#define _BITS_BYTESWAP_H
#define _BITS_CPU_SET_H
#define _BITS_ERRNO_H
#define _BITS_FLOATN_COMMON_H
#define _BITS_FLOATN_H
#define _BITS_IPCTYPES_H
#define _BITS_LIBM_SIMD_DECL_STUBS_H
#define _BITS_LOCALE_H
#define _BITS_PTHREADTYPES_ARCH_H
#define _BITS_PTHREADTYPES_COMMON_H
#define _BITS_SCHED_H
#define _BITS_SETJMP_H
#define _BITS_SIGACTION_H
#define _BITS_SIGCONTEXT_H
#define _BITS_SIGEVENT_CONSTS_H
#define _BITS_SIGINFO_ARCH_H
#define _BITS_SIGINFO_CONSTS_ARCH_H
#define _BITS_SIGINFO_CONSTS_H
#define _BITS_SIGNUM_H
#define _BITS_SIGSTACK_H
#define _BITS_SIGTHREAD_H
#define _BITS_SOCKADDR_H
#define _BITS_SS_FLAGS_H
#define _BITS_STAT_H
#define _BITS_STDINT_INTN_H
#define _BITS_STDINT_UINTN_H
#define _BITS_STDIO2_H
#define _BITS_STDIO_H
#define _BITS_STDIO_LIM_H
#define _BITS_STRING_FORTIFIED_H
#define _BITS_STROPTS_H
#define _BITS_SYSLOG_PATH_H
#define _BITS_SYSMACROS_H
#define _BITS_TIME_H
#define _BITS_TYPES_H
#define _BITS_TYPES_LOCALE_T_H
#define _BITS_TYPES_STRUCT_SCH
#define _BITS_TYPES___LOCALE_T_H
#define _BITS_UINTN_IDENTITY_H
#define _BITS_UIO_EXT_H
#define _BITS_UIO_LIM_H
#define _BITS_WCHAR_H
#define _BITS_WCTYPE_WCHAR_H
#define _BITS_XTITYPES_H
#define _BYTESWAP_H
#define _COMPLEX_H
#define _CPIO_H
#define _CRYPT_H
#define _DIRENT_H
#define _DLFCN_H
#define _ELF_H
#define _ENDIAN_H
#define _ENVZ_H
#define _ERROR_H
#define _EXECINFO_H
#define _FCNTL_H
#define _FEATURES_H
#define _FENV_H
#define _FPU_CONTROL_H
#define _FSTAB_H
#define _FTW_H
#define _GCONV_H
#define _GETOPT_CORE_H
#define _GETOPT_EXT_H
#define _GETOPT_H
#define _GETOPT_POSIX_H
#define _GNU_LIBC_VERSION_H
#define _GNU_VERSIONS_H
#define _GSHADOW_H
#define _ICONV_H
#define _IEEE754_H
#define _IFADDRS_H
#define _INTTYPES_H
#define _IP_VH
#define _LANGINFO_H
#define _LIBC_LIMITS_H
#define _LIBGEN_H
#define _LIBINTL_H
#define _LINK_H
#define _LINUX_KERNEL_H
#define _LINUX_LIST_H
#define _LINUX_TYPES_H
#define _MALLOC_H
#define _MATH_H
#define _MCHECK_H
#define _MONETARY_H
#define _MQUEUE_H
#define _NETASH_ASH_H
#define _NETATALK_AT_H
#define _NETAX25_AX25_H
#define _NETDB_H
#define _NETECONET_EC_H
#define _NETINET_ETHER_H
#define _NETINET_ICMP6_H
#define _NETINET_IF_FDDI_H
#define _NETINET_IF_TR_H
#define _NETINET_IGMP_H
#define _NETINET_IN_H
#define _NETINET_IN_SYSTM_H
#define _NETINET_IP6_H
#define _NETINET_TCP_H
#define _NETROM_NETROM_H
#define _NETROSE_ROSE_H
#define _NET_IF_ARP_H
#define _NET_IF_H
#define _NET_IF_SHAPER_H
#define _NET_IF_SLIP_H
#define _NET_PPP_DEFS_H
#define _NET_ROUTE_H
#define _NL_TYPES_H
#define _NSS_H
#define _OBSTACK_H
#define _PATH
#define _PATHS_H
#define _PRINTF_H
#define _PROC_SERVICE_H
#define _PROFIL_H
#define _PROTOCOLS_ROUTED_H
#define _PROTOCOLS_RWHOD_H
#define _PROTOCOLS_TALKD_H
#define _PTHREAD_H
#define _PTY_H
#define _REGEXP_H
#define _REGEX_H
#define _RESOLV_H
#define _RE_COMP_H
#define _RPC_NETDB_H
#define _SCHED_H
#define _SCSI_IOCTL_H
#define _SCSI_SCSI_H
#define _SCSI_SG_H
#define _SEARCH_H
#define _SEMAPHORE_H
#define _SETJMP_H
#define _SHADOW_H
#define _SIGNAL_H
#define _STDINT_H
#define _STDIO_EXT_H
#define _STDIO_H
#define _STDLIB_H
#define _STRING_H
#define _STROPTS_H
#define _SYSCALL_H
#define _SYS_ACCT_H
#define _SYS_AUXV_H
#define _SYS_DEBUGREG_H
#define _SYS_ELF_H
#define _SYS_FSUID_H
#define _SYS_GMON_OUT_H
#define _SYS_IOCTL_H
#define _SYS_IPC_H
#define _SYS_KD_H
#define _SYS_MMAN_H
#define _SYS_MOUNT_H
#define _SYS_MSG_H
#define _SYS_MTIO_H
#define _SYS_PARAM_H
#define _SYS_PCI_H
#define _SYS_PERM_H
#define _SYS_PERSONALITY_H
#define _SYS_POLL_H
#define _SYS_PRCTL_H
#define _SYS_PROCFS_H
#define _SYS_PTRACE_H
#define _SYS_QUOTA_H
#define _SYS_RANDOM_H
#define _SYS_RAW_H
#define _SYS_REBOOT_H
#define _SYS_REG_H
#define _SYS_RESOURCE_H
#define _SYS_SELECT_H
#define _SYS_SEM_H
#define _SYS_SENDFILE_H
#define _SYS_SHM_H
#define _SYS_SOCKET_H
#define _SYS_STATFS_H
#define _SYS_STATVFS_H
#define _SYS_STAT_H
#define _SYS_SWAP_H
#define _SYS_SYSINFO_H
#define _SYS_SYSLOG_H
#define _SYS_SYSMACROS_H
#define _SYS_TERMIOS_H
#define _SYS_TIMEB_H
#define _SYS_TIME_H
#define _SYS_TTYCHARS_H
#define _SYS_TTYDEFAULTS_H
#define _SYS_UCONTEXT_H
#define _SYS_UIO_H
#define _SYS_USER_H
#define _SYS_UTSNAME_H
#define _SYS_VLIMIT_H
#define _SYS_VM86_H
#define _SYS_VTIMES_H
#define _SYS_XATTR_H
#define _TERMIOS_H
#define _TGMATH_H
#define _THREADS_H
#define _THREAD_DB_H
#define _THREAD_SHARED_TYPES_H
#define _UCHAR_H
#define _UCONTEXT_H
#define _ULIMIT_H
#define _UNISTD_H
#define _UTMPX_H
#define _UTMP_H
#define _UTSNAME_MACHINE_LENGTH
#define _UTSNAME_NODENAME_LENGTH
#define _UTSNAME_RELEASE_LENGTH
#define _UTSNAME_SYSNAME_LENGTH
#define _UTSNAME_VERSION_LENGTH
#define _WCHAR_H
#define _WCTYPE_H
#define _XOPEN_LIM_H
#define __A_OUT_GNU_H
#define __BITS_SOCKET_H
#define __FMTMSG_H
#define __GLIBC_INTERNAL_STARTING_H
#define __GNU_LIB_NAMES_H
#define __IF_PACKET_H
#define __LINUX_COMPILER_H
#define __NETINET_IF_ETHER_H
#define __NETINET_IP_H
#define __NETINET_IP_ICMP_H
#define __NETINET_UDP_H
#define __NETIPX_IPX_H
#define __NETIUCV_IUCV_H
#define __NETPACKET_PACKET_H
#define __NET_ETHERNET_H
#define __NET_IF_PPP_H
#define __NO_MATH
#define __O_PATH
#define __PTHREAD_RWLOCK_INT_FLAGS_SH
#define __SI_ERRNO_TH
#define __SI_H




#endif
// --- content-headerguards-end: TMPL ---
'

LICENSE='
Copyright (c) 2012-2019, Michael (Misc) Myer 
(misc.myer@zoho.com, www.github.com/michael105)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   the file NOTICE, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   the file NOTICE, this list of conditions and the following disclaimer in 
   the documentation and/or other materials provided with the distribution.
 * Neither the name of the minilib nor the
   names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Michael Myer BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.'



# the "main loop". Continue at top after parsing the config switches
done

