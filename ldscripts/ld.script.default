
 PHDRS {
 /* flags: 0x5 r+x, 0x6 r+w, 0x7 r+w+x
   (TODO) somehow some functions seem to need a writable text section,
	 as well as some need an executable bss section.
	 Have to sort this out.
	 Would be better, separating that cleanly.
	 seems like as soon, there is written (and/or?) read from data,
	 placed into the bss section, the section has to be executable.???
	 that is. not easy to understand. 
	 */ 

	text PT_LOAD FILEHDR PHDRS FLAGS(0x5) ;
	data PT_LOAD FLAGS(0x7);
	bss PT_LOAD FLAGS(0x7);
	stack PT_GNU_STACK FLAGS(0x6) ;
}


SECTIONS {                                                                                                                                                    
		start = _start;
		/*. = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;*/
		. = 0x08048000 + SIZEOF_HEADERS;

		.text           :
		{
				*(.text.unlikely .text.*_unlikely)
						*(.text._start)
						*(.text.exit .text.exit.*)
						*(.text._startup)
						*(.text.main)
						*(.text.hot .text.hot.*)
						*(.text .stub .text.* .gnu.linkonce.t.*)
						/* .gnu.warning sections are handled specially by elf32.em.  */
						*(.gnu.warning)
						*(.rodata .rodata.* .gnu.linkonce.r.*)
		 } :text

		 .data :
		 {
						*(.data .data.*)
			} : data
	 . = .;
  	 __bss_start = .;


		.bss           : 
		{ 
						*(COMMON)
						*(.dynbss)
						*(.bss .bss.* .gnu.linkonce.b.*)
						/* Align here to ensure that the .bss section occupies space up to
							 _end.  Align after .bss to ensure correct alignment even if the
							 .bss section disappears because there are no input sections.
								misc: deleted : */
				. = ALIGN(. != 0 ? 64 / 8 : 1);
		} :bss 
	  _end = .; 
		PROVIDE (_end = .); 



		/DISCARD/ : { 
			 *(.note.GNU-stack) 
			  *(.note*) 
			*(.gnu_debuglink) 
			*(.gnu.lto_*) 
			*(.iplt*) 
			*(.igot*) 
			*(.rel*) 
			*(.comment)
			*(.eh_frame)
			*(.plt*)
			*(.got.plt*)
			*(.rel.*)
			}


}


