#mlconfig
ifdef undef
# ============================================================================
# either type 'make -f minilib.conf'
# to use this combined config and makefile generated by minimake,
# compile and download when needed (ca.100kB) with minilib.
# (https://github.com/michael105/minilib)
# 
#
# Alternatively, when the script minimake with the embedded minilib 
# is already present, 'minimake --config "thisfile"' 
# compiles without fetching minilib again.
# ============================================================================
#
# 
# Minilib and the accompanying tools are licensed under a 
# BSD-style opensource license with attribution.
# I did my best and I'm using minilib myself,
# but cannot give any guarantees for any functionality
# of an opensource library or the accompanying tools.
#
# (Disclaimer)
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Michael Myer BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The full license is available at the webpage of minilib.
# https://github.com/michael105/minilib
# Michael (misc) Myer, 2021
#


# Save default. The minibuf is needed for malloc, printf, and file streams.
#mini_buf 4000
# define headerguards, to prevent parsing the standard header
#HEADERGUARDS

# Startup function
mini_start

# put the globals on stack. 
# (past the last used return address, but before the environment.
# there's more documentation in the readme/reference)
# reserves a fixed register as pointer to the globals
# globals_on_stack

# define var (#define var arg)
# DEFINE var arg

# optimization Flag. Os,O1,O2 might be save. O3 is known to cause sometimes trouble
OPTFLAG -Os

# (with debug info)
#OPTFLAG '-g -Og'

# stripflag ( defaults to -s)
#STRIPFLAG

# Build minilib source
INCLUDESRC

# the ldscript to use
# Can be one of: default, onlytext, textandbss
LDSCRIPT onlytext_tiny

# Shrink the compiled binary with shrinkelf
SHRINKELF

# generate debug info (-Og -g). Overwrites OPTFLAG, STRIPFLAG and SHRINKELF
#DEBUG

# generate debug info, including the source of minilib itself. (-Og -g). 
# Overwrites OPTFLAG, STRIPFLAG and SHRINKELF
#FULLDEBUG


# list of source files, supplied to gcc
# $1 expands to the current filename 
SOURCES hello.c

# the binary to be compiled ( -o $BINARY )
BINARY hello-tiny

# function switches. Only functions named below will be compiled

mini_writes


return
endif
# configuration part ends, 
# embedded makefile starts below


VERSION := "20211012"
urlbase := "https://raw.githubusercontent.com/michael105/minilib/download"

fetch = $(shell ((curl $(urlbase)/$(VERSION)/$(1).gz > $(1).gz) || (wget $(urlbase)/$(VERSION)/$(1).gz)) && gunzip $(1).gz)


default: Makefile.minilib minilib.h check compile


compile:
	$(info Compile)
	make -f Makefile.minilib CONF="$(lastword $(MAKEFILE_LIST))"


Makefile.minilib:
	$(info "Download Makefile.minilib (Version $(VERSION))from github")
	$(call fetch,Makefile.minilib)


minilib.h:
	$(info "Download minilib.h (Version $(VERSION))from github")
	$(call fetch,minilib.h)


.ONESHELL:
check:
	@echo "Checking sha256 sums"
	echo -e "$(SHA256SUMS)" | sha256sum -c || exit
	echo ok 


# checksums 
define SHA256SUMS =
a188c44dde75695da40015d61ec5250723f21ab7484062c7f4879c0b872fc9f4  Makefile.minilib
endef


