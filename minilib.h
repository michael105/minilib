/* This file is part of minilib, (c) 2012-2020 Michael Misc Myer.
misc.myer@zoho.com / www.github.com/michael105
Licensed under the terms of the BSD 3-clause License.
Please see the files LICENSE and NOTICE for the exact conditions. 

The lines below are generated by 'make header'. 

*/


/* templates/minilib.h.top */

#ifndef LDSCRIPT


#ifndef included_minilib_h
#define included_minilib_h

/* templates/header.in */


#ifndef mini_INCLUDESRC
#ifdef INCLUDESRC
#define mini_INCLUDESRC
#endif
#endif


#ifdef HEADERGUARDS
#ifndef mini_HEADERGUARDS
#define mini_HEADERGUARDS
#endif
#endif

#ifndef mini_environ
#ifdef mini_getenv
#define mini_environ
#endif
#ifdef mini_system
#define mini_environ
#endif
#endif

#ifdef HEADERGUARDS
#include "minilib/include/headerguards.h"
#endif

//#define mini_start
//#define mini_exit

#include "minilib/headers/common/allheaders.h"
#include "minilib/headers/linux_x64/allheaders.h"

#include "minilib/include/globaldefs.h"
#include "minilib/include/minilib_global.h"
#include "minilib/include/ctype.h"
#include "minilib/include/dirent.h"
#include "minilib/include/syscall.h"
#include "minilib/include/syscall_stubs.h"

#ifdef mini_GETOPTS
#include "minilib/macros/getoptm.h"
#endif

/* end templates/header.in */
/* templates/minilib.h.in */


#include "minilib/include//utils.h"

#include "minilib/macros/vararg.h"

//#include "minilib/include/syscall.h"
#include "minilib/include/stdarg.h"

//#include "minilib/headers/common/sys/types.h"
//#include "minilib/include/syscall_stubs.h"
#include "minilib/include/exit.h"
#include "minilib/include/minilib_global.h"
#include "minilib/include/filemodes.h"
//#include "minilib/include/errno_str.h"

//#include "minilib/headers/common/dirent.h"


struct udiv_t { unsigned int quot, rem; };

#ifndef itodec
#ifdef printf
#warning printf defined, but no int conversion (%d). Consider defining mini_itodec
#endif
#ifdef fprintf
#warning fprintf defined, but no int conversion (%d). Consider defining mini_itodec
#endif
#endif

#ifdef mini_perror
//#define perror(str) fprintf(stderr,str)
//#ifndef mini_fprintf
//#define mini_fprintf
//#endif
#endif


//#ifdef mini_puts
//#define puts(a1) printl(a1)
//#define mini_print
//#endif
//#ifdef mini_print
////#include "print.h"
//extern int print(const char *msg);
//extern int printl(const char *msg);
//#endif

//#ifdef mini_errno / No reason to not define errno Macros by default
#include "m_errno.h"
//#endif
//


/* end templates/minilib.h.in */


#ifdef mini_fseek
//dep
#ifndef mini_lseek
#define mini_lseek
#endif
#endif

#ifdef mini_fgetpos
//dep
#ifndef mini_ftell
#define mini_ftell
#endif
#endif

#ifdef mini_memcmp
//dep
#ifndef mini_0
#define mini_0
#endif
#endif

#ifdef mini_eprintl
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_strdup
//dep
#ifndef mini_malloc
#define mini_malloc
#endif
#ifndef mini_strcpy
#define mini_strcpy
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_itohex
//dep
#ifndef mini__itohex
#define mini__itohex
#endif
#endif

#ifdef mini__mprints
//dep
#ifndef mini_dprints
#define mini_dprints
#endif
#endif

#ifdef mini_ftell
//dep
#ifndef mini_lseek
#define mini_lseek
#endif
#endif

#ifdef mini_printsl
//dep
#ifndef mini__mprints
#define mini__mprints
#endif
#endif

#ifdef mini_strrchr
//dep
#ifndef mini_strchrnul
#define mini_strchrnul
#endif
#endif

#ifdef mini_writes
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_abort
//dep
#ifndef mini_raise
#define mini_raise
#endif
#ifndef mini_signal
#define mini_signal
#endif
#endif

#ifdef mini_freopen
//dep
#ifndef mini_open
#define mini_open
#endif
#ifndef mini__fopen
#define mini__fopen
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_close
#define mini_close
#endif
#endif

#ifdef mini_strchr
//dep
#ifndef mini_strchrnul
#define mini_strchrnul
#endif
#endif

#ifdef mini_strcat
//dep
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_snprintf
//dep
#ifndef mini_write
#define mini_write
#endif
#ifndef mini_vsnprintf
#define mini_vsnprintf
#endif
#endif

#ifdef mini_vfprintf
//dep
#ifndef mini_fprintf
#define mini_fprintf
#endif
#endif

#ifdef mini_getc
//dep
#ifndef mini_fgetc
#define mini_fgetc
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_read
#define mini_read
#endif
#endif

#ifdef mini_sigaction
//dep
#ifndef mini_memcpy
#define mini_memcpy
#endif
#endif

#ifdef mini_fprintfs
//dep
#ifndef mini_fputs
#define mini_fputs
#endif
#ifndef mini_write
#define mini_write
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_ptsname_r
//dep
#ifndef mini_snprintf
#define mini_snprintf
#endif
#ifndef mini_itodec
#define mini_itodec
#endif
#ifndef mini_ioctl
#define mini_ioctl
#endif
#ifndef mini_open
#define mini_open
#endif
#ifndef mini_sprintf
#define mini_sprintf
#endif
#endif

#ifdef mini_dtodec
//dep
#ifndef mini_itodec
#define mini_itodec
#endif
#ifndef mini_uitodec
#define mini_uitodec
#endif
#endif

#ifdef mini_dirname
//dep
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_basename
//dep
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_putchar
//dep
#ifndef mini_fputc
#define mini_fputc
#endif
#endif

#ifdef mini_eputs
//dep
#ifndef mini_eprintl
#define mini_eprintl
#endif
#ifndef mini_eprint
#define mini_eprint
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_fopen
//dep
#ifndef mini_open
#define mini_open
#endif
#ifndef mini__fopen
#define mini__fopen
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_close
#define mini_close
#endif
#endif

#ifdef mini_dprints
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_malloc_brk
//dep
#ifndef mini_sbrk
#define mini_sbrk
#endif
#endif

#ifdef mini_posix_openpt
//dep
#ifndef mini_open
#define mini_open
#endif
#endif

#ifdef mini_printf
//dep
#ifndef mini_fprintf
#define mini_fprintf
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_snprintf
#define mini_snprintf
#endif
#endif

#ifdef mini_tcgetattr
//dep
#ifndef mini_ioctl
#define mini_ioctl
#endif
#endif

#ifdef mini_atexit
//dep
#ifndef mini_globals
#define mini_globals
#endif
#endif

#ifdef mini_waitpid
//dep
#ifndef mini_wait4
#define mini_wait4
#endif
#endif

#ifdef mini_puts
//dep
#ifndef mini_printl
#define mini_printl
#endif
#ifndef mini_print
#define mini_print
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_strncpy
//dep
#ifndef mini_memcpy
#define mini_memcpy
#endif
#endif

#ifdef mini_strcasecmp
//dep
#ifndef mini__strcasecmp
#define mini__strcasecmp
#endif
#endif

#ifdef mini_strncasecmp
//dep
#ifndef mini__strcasecmp
#define mini__strcasecmp
#endif
#endif

#ifdef mini_itoHEX
//dep
#ifndef mini__itohex
#define mini__itohex
#endif
#endif

#ifdef mini_scandir
//dep
#ifndef mini_errno
#define mini_errno
#endif
#ifndef mini_malloc_brk
#define mini_malloc_brk
#endif
#ifndef mini_realloc
#define mini_realloc
#endif
#ifndef mini_free
#define mini_free
#endif
#ifndef mini_memcpy
#define mini_memcpy
#endif
#ifndef mini_dirbuf
#define mini_dirbuf
#endif
#ifndef mini_seterrno
#define mini_seterrno
#endif
#ifndef mini_getbrk
#define mini_getbrk
#endif
#ifndef mini_sbrk
#define mini_sbrk
#endif
#ifndef mini_prints
#define mini_prints
#endif
#ifndef mini_open
#define mini_open
#endif
#ifndef mini_sprintf
#define mini_sprintf
#endif
#ifndef mini_qsort
#define mini_qsort
#endif
#endif

#ifdef mini_fwrite
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_raise
//dep
#ifndef mini_getpid
#define mini_getpid
#endif
#endif

#ifdef mini_execvpe
//dep
#ifndef mini_environ
#define mini_environ
#endif
#ifndef mini_execve
#define mini_execve
#endif
#ifndef mini_getenv
#define mini_getenv
#endif
#ifndef mini_access
#define mini_access
#endif
#endif

#ifdef mini_dprintf
//dep
#ifndef mini_write
#define mini_write
#endif
#ifndef mini_vsnprintf
#define mini_vsnprintf
#endif
#endif

#ifdef mini_isatty
//dep
#ifndef mini_tcgetattr
#define mini_tcgetattr
#endif
#ifndef mini_ioctl
#define mini_ioctl
#endif
#endif

#ifdef mini_closedir
//dep
#ifndef mini_free
#define mini_free
#endif
#endif

#ifdef mini_fprint
//dep
#ifndef mini_fprintf
#define mini_fprintf
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#endif

#ifdef mini_getenv
//dep
#ifndef mini_environ
#define mini_environ
#endif
#endif

#ifdef mini_vexec
//dep
#ifndef mini_seterrno
#define mini_seterrno
#endif
#ifndef mini_waitpid
#define mini_waitpid
#endif
#endif

#ifdef mini_ewrites
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_strcmp
//dep
#ifndef mini__strcmp
#define mini__strcmp
#endif
#endif

#ifdef mini_eprints
//dep
#ifndef mini_dprints
#define mini_dprints
#endif
#endif

#ifdef mini_opendir
//dep
#ifndef mini_open
#define mini_open
#endif
#ifndef mini_close
#define mini_close
#endif
#ifndef mini_malloc
#define mini_malloc
#endif
#ifndef mini_dirbuf
#define mini_dirbuf
#endif
#ifndef mini_opendirp
#define mini_opendirp
#endif
#ifndef mini_ewrites
#define mini_ewrites
#endif
#endif

#ifdef mini_rewind
//dep
#ifndef mini_fseek
#define mini_fseek
#endif
#endif

#ifdef mini_putc
//dep
#ifndef mini_fputc
#define mini_fputc
#endif
#endif

#ifdef mini_execvp
//dep
#ifndef mini_environ
#define mini_environ
#endif
#ifndef mini_execvpe
#define mini_execvpe
#endif
#ifndef mini_access
#define mini_access
#endif
#ifndef mini_getenv
#define mini_getenv
#endif
#ifndef mini_access
#define mini_access
#endif
#endif

#ifdef mini_signal
//dep
#ifndef mini_sigaction
#define mini_sigaction
#endif
#ifndef mini_ewrites
#define mini_ewrites
#endif
#endif

#ifdef mini_fputc
//dep
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_malloc
//dep
#ifndef mini_brk
#define mini_brk
#endif
#endif

#ifdef mini_getchar
//dep
#ifndef mini_fgetc
#define mini_fgetc
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_read
#define mini_read
#endif
#endif

#ifdef mini_opendirp
//dep
#ifndef mini_open
#define mini_open
#endif
#ifndef mini_close
#define mini_close
#endif
#ifndef mini_malloc
#define mini_malloc
#endif
#ifndef mini_dirbuf
#define mini_dirbuf
#endif
#endif

#ifdef mini_vsprintf
//dep
#ifndef mini_0
#define mini_0
#endif
#endif

#ifdef mini_printl
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_printfs
//dep
#ifndef mini_fprintfs
#define mini_fprintfs
#endif
#ifndef mini_fputs
#define mini_fputs
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_perror
//dep
#ifndef mini_fputs
#define mini_fputs
#endif
#ifndef mini_strerror
#define mini_strerror
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#ifndef mini_errno
#define mini_errno
#endif
#endif

#ifdef mini_eprint
//dep
#ifndef mini_write
#define mini_write
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_unlockpt
//dep
#ifndef mini_ioctl
#define mini_ioctl
#endif
#endif

#ifdef mini_tcsetattr
//dep
#ifndef mini_ioctl
#define mini_ioctl
#endif
#endif

#ifdef mini_print
//dep
#ifndef mini_write
#define mini_write
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_alphasort
//dep
#ifndef mini_strcmp
#define mini_strcmp
#endif
#endif

#ifdef mini_exit_errno
//dep
#ifndef mini_execve
#define mini_execve
#endif
#ifndef mini_errno_str
#define mini_errno_str
#endif
#ifndef mini_exit
#define mini_exit
#endif
#ifndef mini_ewrites
#define mini_ewrites
#endif
#endif

#ifdef mini_fprints
//dep
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_write
#define mini_write
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#endif

#ifdef mini_ptsname
//dep
#ifndef mini_ptsname_r
#define mini_ptsname_r
#endif
#ifndef mini_snprintf
#define mini_snprintf
#endif
#ifndef mini_itodec
#define mini_itodec
#endif
#ifndef mini_ioctl
#define mini_ioctl
#endif
#ifndef mini_sprintf
#define mini_sprintf
#endif
#endif

#ifdef mini_prints
//dep
#ifndef mini__mprints
#define mini__mprints
#endif
#endif

#ifdef mini_fgetc
//dep
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_read
#define mini_read
#endif
#endif

#ifdef mini_fwrites
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_free
//dep
#ifndef mini_brk
#define mini_brk
#endif
#ifndef mini_getbrk
#define mini_getbrk
#endif
#endif

#ifdef mini_execv
//dep
#ifndef mini_environ
#define mini_environ
#endif
#ifndef mini_execve
#define mini_execve
#endif
#endif

#ifdef mini_fgets
//dep
#ifndef mini_fgetc
#define mini_fgetc
#endif
#endif

#ifdef mini_itodec
//dep
#ifndef mini_uitodec
#define mini_uitodec
#endif
#endif

#ifdef mini_creat
//dep
#ifndef mini_open
#define mini_open
#endif
#endif

#ifdef mini_wait
//dep
#ifndef mini_wait4
#define mini_wait4
#endif
#endif

#ifdef mini__strcasecmp
//dep
#ifndef mini_tolower
#define mini_tolower
#endif
#endif

#ifdef mini_sprintf
//dep
#ifndef mini_snprintf
#define mini_snprintf
#endif
#ifndef mini_vsnprintf
#define mini_vsnprintf
#endif
#endif

#ifdef mini_fclose
//dep
#ifndef mini_close
#define mini_close
#endif
#endif

#ifdef mini_fread
//dep
#ifndef mini_read
#define mini_read
#endif
#endif

#ifdef mini_putenv
//dep
#ifndef mini_environ
#define mini_environ
#endif
#ifndef mini_getenv
#define mini_getenv
#endif
#ifndef mini_strncmp
#define mini_strncmp
#endif
#ifndef mini_ret_errno
#define mini_ret_errno
#endif
#endif

#ifdef mini_strncmp
//dep
#ifndef mini__strcmp
#define mini__strcmp
#endif
#endif

#ifdef mini_gets
//dep
#ifndef mini_fgets
#define mini_fgets
#endif
#ifndef mini_fgetc
#define mini_fgetc
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_read
#define mini_read
#endif
#endif

#ifdef mini_vsnprintf
//dep
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_fsetpos
//dep
#ifndef mini_lseek
#define mini_lseek
#endif
#endif

#ifdef mini__fopen
//dep
#ifndef mini_open
#define mini_open
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_close
#define mini_close
#endif
#endif

#ifdef mini_realloc
//dep
#ifndef mini_free
#define mini_free
#endif
#ifndef mini_malloc
#define mini_malloc
#endif
#endif

#ifdef mini_fprintf
//dep
#ifndef mini_write
#define mini_write
#endif
#ifndef mini_prints
#define mini_prints
#endif
#ifndef mini_dprintf
#define mini_dprintf
#endif
#ifndef mini_sprintf
#define mini_sprintf
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#endif

#ifdef mini_itobin
//dep
#ifndef mini__itobin
#define mini__itobin
#endif
#endif

#ifdef mini_fputs
//dep
#ifndef mini_strlen
#define mini_strlen
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_write
#define mini_write
#endif
#endif

#ifdef mini_system
//dep
#ifndef mini_execve
#define mini_execve
#endif
#ifndef mini_vfork
#define mini_vfork
#endif
#ifndef mini_environ
#define mini_environ
#endif
#ifndef mini_ewrites
#define mini_ewrites
#endif
#ifndef mini_waitpid
#define mini_waitpid
#endif
#endif

#ifdef mini_readdir
//dep
#ifndef mini_dirbuf
#define mini_dirbuf
#endif
#ifndef mini_getdents
#define mini_getdents
#endif
#endif

#ifdef mini_execl
//dep
#ifndef mini_environ
#define mini_environ
#endif
#ifndef mini_execve
#define mini_execve
#endif
#endif

#ifdef mini_fdopen
//dep
#ifndef mini_open
#define mini_open
#endif
#ifndef mini__fopen
#define mini__fopen
#endif
#ifndef mini_fileno
#define mini_fileno
#endif
#ifndef mini_close
#define mini_close
#endif
#endif

#ifdef mini_eprintfs
//dep
#ifndef mini_fprintfs
#define mini_fprintfs
#endif
#ifndef mini_fputs
#define mini_fputs
#endif
#ifndef mini_strlen
#define mini_strlen
#endif
#endif
// Start incfirst

// minilib/src/strcmp.c
#ifdef mini__strcasecmp
int _strcasecmp(const char*c1,const char*c2,int len);
#endif

// minilib/src/sprintf.c
#ifdef mini_sprintf
#define sprintf(str,...) snprintf( str, 4096,  __VA_ARGS__)
#endif

// minilib/src/strlen.c
#ifdef mini_strlen
int strlen(const char*str);
#endif

// minilib/src/strcmp.c
#ifdef mini__strcmp
int _strcmp(const char*c1,const char*c2,int len);
#endif

// minilib/src/strcmp.c
#ifdef mini_strncmp
int strncmp(const char*c1,const char*c2,int len);
#endif

// minilib/src/qsort.c
#ifdef mini_qsort
void qsort(void  *base,	size_t nel,	size_t width,	int (*comp)(const void *, const void *));
#endif

// 
#ifdef mini_tolower
#endif

// 
#ifdef mini_environ
#endif

// 
#ifdef mini_errno
#endif

// 
#ifdef mini_0
#endif

// minilib/src/itohex.c
#ifdef mini__itohex
int _itohex(int i,char* buf,int padding, int capitals);
#endif

// minilib/src/wait.c
#ifdef mini_waitpid
pid_t waitpid(pid_t pid, int *wstatus, int options);
#endif

// minilib/include/ret_errno.h
#ifdef mini_ret_errno
#include "minilib/include/ret_errno.h"
#endif

// minilib/src/strerror.c
#ifdef mini_strerror
static char* strerror( int errnum );
#endif

// minilib/src/errno_str.c
#ifdef mini_errno_str
static char *errno_str(int err);
#endif

// minilib/src/itodec.c
#ifdef mini_itodec
int itodec(int i, char *buf, int prec, char limiter );
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_access
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/tcgetattr.h
#ifdef mini_tcgetattr
#include "minilib/include/tcgetattr.h"
#endif

// minilib/src/fgets.c
#ifdef mini_fgets
char* fgets(char *buf, int size, FILE* F);
#endif

// minilib/src/brk.c
#ifdef mini_brk
static int brk( const void* addr );
#endif

// minilib/src/malloc.c
#ifdef mini_malloc_brk
void* malloc_brk(int size);
#endif

// minilib/src/malloc.c
#ifdef mini_free
void free(void *p);
#endif

// minilib/src/memcpy.c
#ifdef mini_strcpy
char *strcpy(char *dest, const char *src);
#endif

// minilib/include/lseek.h
#ifdef mini_lseek
#include "minilib/include/lseek.h"
#endif

// minilib/src/open.c
#ifdef mini_open
int volatile open( const char *s, int flags, ... );
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_read
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/prints.h
#ifdef mini_ewrites
#define ewrites(str) write(STDERR_FILENO,str,sizeof(str))
#endif

// minilib/include/fputs.h
#ifdef mini_fputs
#include "mini_fstream.h"
#include "minilib/include/fputs.h"
#endif

// minilib/src/strchr.c
#ifdef mini_strchrnul
char *strchrnul(const char *s, int c);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_close
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/strcmp.c
#ifdef mini_strcmp
int strcmp(const char*c1,const char*c2);
#endif

// minilib/src/fopen.c
#ifdef mini__fopen
FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f);
#endif

// minilib/src/malloc.c
#ifdef mini_realloc
void* realloc(void *p, int size);
#endif

// minilib/src/sprintf.c
#ifdef mini_fprintf
#define fprintf(stream,...)	write(fileno(stream),mlgl->mbuf,sprintf(mlgl->mbuf,__VA_ARGS__))
#endif

// minilib/src/getenv.c
#ifdef mini_getenv
char* getenv(const char* name);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_vfork
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/dprintf.c
#ifdef mini_dprintf
int dprintf( int fd, const char *fmt, ... );
#endif

// minilib/src/sprintf.c
#ifdef mini_vsnprintf
int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );
#endif

// minilib/src/execvp.c
#ifdef mini_execvpe
static int execvpe(const char *file, char *const argv[], char *const envp[]);
#endif

// minilib/src/brk.c
#ifdef mini_getbrk
static long getbrk();
#endif

// minilib/src/sigaction.c
#ifdef mini_raise
static inline int raise(int signr);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getpid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_execve
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_ftell
#include "minilib/include/mini_fstream.h"
#endif

// 
#ifdef mini_exit
#endif

// minilib/src/memcpy.c
#ifdef mini_memcpy
void *memcpy( void *d, const void *s, int n );
#endif

// 
#ifdef mini_globals
#endif

// minilib/src/itobin.c
#ifdef mini__itobin
int _itobin(int i, char*buf, int prec, int groups );
#endif

// minilib/src/brk.c
#ifdef mini_sbrk
static void* sbrk(long incr);
#endif

// minilib/src/dirent/opendir.c
#ifdef mini_opendirp
static DIR *opendirp(const char *name, DIR *dir);
#endif

// minilib/include/seterrno.h
#ifdef mini_seterrno
#include "minilib/include/seterrno.h"
#endif

// minilib/include/prints.h
#ifdef mini_printl
#define printl() write(STDOUT_FILENO,"\n",1)
#endif

// minilib/include/dirent.h
#ifdef mini_dirbuf
#include "minilib/include/dirent.h"
#endif

// minilib/src/prints.c
#ifdef mini__mprints
#define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fileno
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/prints.h
#ifdef mini_eprintl
#define eprintl() write(STDERR_FILENO,"\n",1)
#endif

// minilib/src/signal.c
#ifdef mini_signal
sighandler_t signal(int sig, sighandler_t func );
#endif

// minilib/src/malloc.c
#ifdef mini_malloc
void* malloc(int size);
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fseek
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/fputc.h
#ifdef mini_fputc
#include "mini_fstream.h"
#include "minilib/include/fputc.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_write
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_wait4
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/fgetc.h
#ifdef mini_fgetc
#include "mini_fstream.h"
#include "minilib/include/fgetc.h"
#endif

// minilib/src/prints.c
#ifdef mini_dprints
int dprints(int fd, const char *msg,...);
#endif

// minilib/src/sigaction.c
#ifdef mini_sigaction
static int volatile sigaction(int sig, const struct sigaction *act, struct sigaction *oact);
#endif

// minilib/src/pty.c
#ifdef mini_ptsname_r
int ptsname_r(int fd, char *buf, size_t len);
#endif

// minilib/src/fprintfs.c
#ifdef mini_fprintfs
int fprintfs( FILE* F, char *fmt, ...);
#endif

// minilib/include/prints.h
#ifdef mini_prints
#define prints(...) _mprints(__VA_ARGS__,0)
#endif

// minilib/src/ioctl.c
#ifdef mini_ioctl
int volatile  __attribute__((optimize("O0"))) ioctl( int fd, unsigned long int request, ... );
#endif

// minilib/src/itodec.c
#ifdef mini_uitodec
int __attribute__((optimize("Os")))uitodec(unsigned int i, char *buf, int prec, char limiter );
#endif

// minilib/src/snprintf.c
#ifdef mini_snprintf
int snprintf( char *buf, size_t size, const char *fmt, ... );
#endif

// minilib/include/prints.h
#ifdef mini_print
#define print(str) write(STDOUT_FILENO,str,strlen(str))
#endif

// minilib/include/prints.h
#ifdef mini_eprint
#define eprint(str) write(STDERR_FILENO,str,strlen(str))
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getdents
#include "minilib/include/syscall_stubs.h"
#endif
// End incfirst

// minilib/src/putenv.c
#ifdef mini_putenv
int putenv( char *string );
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_sendfile
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__writev
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fread
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__listen
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_munmap
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/dirent/telldir.c
#ifdef mini_telldir
long telldir(DIR *dir);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fsync
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_unlink
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pipe2
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__open
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__munlockall
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/execvp.c
#ifdef mini_execv
static inline int execv(const char *pathname, char *const argv[]);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_fork
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/malloc.c
#ifdef mini_free_brk
int free_brk();
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timer_gettime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setfsuid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/prints.h
#ifdef mini_eprintfs
#define eprintfs(fmt,...) fprintfs(stderr, fmt, __VA_ARGS__)
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__capget
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__reboot
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__connect
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/ltodec.c
#ifdef mini_ultodec
int ultodec(unsigned long ui, char *buf, int prec, char limiter );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getsockname
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_sigaction
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__process_vm_readv
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_symlink
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ustat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_sigtimedwait
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__clock_getres
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__open_by_handle_at
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fsetpos
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_pivot_root
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__prlimit64
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__syncfs
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__msgctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/vsprintf.c
#ifdef mini_vsprintf
int vsprintf( char *buf, const char *fmt, ... );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__inotify_add_watch
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_setitimer
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setreuid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fallocate
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/execvp.c
#ifdef mini_execvp
static inline int execvp(const char *file, char *const argv[]);
#endif

// minilib/include/prints.h
#ifdef mini_fwrites
#define fwrites(fd,str) write(fd,str,sizeof(str))
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__add_key
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pwritev
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__swapon
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__lgetxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pivot_root
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mlock
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/dirent/alphasort.c
#ifdef mini_alphasort
int alphasort( const struct dirent** de1, const struct dirent** de2 );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_getaffinity
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__epoll_ctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_memfd_create
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/sigaction.c
#ifdef mini_sigdelset
int sigdelset(sigset_t *set, int sig);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__link
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__faccessat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fork
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__renameat2
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getpeername
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__removexattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mbind
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_umount2
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_vhangup
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__recvmmsg
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/lseek.h
#ifdef mini_fsync
#include "minilib/include/lseek.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__access
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__prctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setsockopt
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/pty.c
#ifdef mini_posix_openpt
int posix_openpt(int flags);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_rt_sigaction
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__msync
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sigaltstack
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_setvbuf
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fstatfs
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ftruncate
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/math.h
#ifdef mini_ldiv
#include "minilib/include/math.h"
#endif

// minilib/src/rand.c
#ifdef mini_rand
unsigned int rand();
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ioctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/pty.c
#ifdef mini_grantpt
int grantpt(int fd);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__lchown
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__clock_gettime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_setparam
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/atoi.c
#ifdef mini_atol
long atol(const char *c);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_time
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fremovexattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__waitid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__symlinkat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getdents64
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__delete_module
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__iopl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__recvfrom
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setsid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__unshare
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_sigsuspend
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__remap_file_pages
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setresgid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getgid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__signalfd
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getpid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mremap.h
#ifdef mini_mremap
#include "minilib/include/mremap.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getpgrp
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setrlimit
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/strstr.c
#ifdef mini_strstr
char* strstr(const char *big, const char *little);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__signalfd4
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/strdup.c
#ifdef mini_strdup
char *strdup(const char *source);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getuid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_setsid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__set_mempolicy
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_getattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_rt_sigreturn
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/sleep.c
#ifdef mini_sleep
unsigned int volatile sleep(unsigned int seconds);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setdomainname
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timerfd_gettime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__adjtimex
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_chown
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__finit_module
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/dtodec.c
#ifdef mini_dtodec
int dtodec(double d, char* buf, int precision);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_sigpending
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sethostname
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/dirent/seekdir.c
#ifdef mini_seekdir
void seekdir(DIR *dir, long off);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__flock
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__close
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/strchr.c
#ifdef mini_strchr
char *strchr(const char *s, int c);
#endif

// minilib/src/strcat.c
#ifdef mini_strcat
char *strcat(char *dest, const char *src );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__clone
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sendmsg
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setgroups
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/memset.c
#ifdef mini_memset
void *memset( void *s, int c, int n);
#endif

// minilib/src/abort.c
#ifdef mini_abort
void abort();
#endif

// minilib/include/dirent.h
#ifdef mini_dirbufsize 
#include "minilib/include/dirent.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fclose
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_setattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini___sysctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/atoi.c
#ifdef mini_atoi
int atoi(const char *c);
#endif

// minilib/src/sigaction.c
#ifdef mini_sigprocmask
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_utime
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_stat
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getgroups
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_mount
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setns
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timerfd_create
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_rr_get_interval
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getsid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/fopen.c
#ifdef mini_fdopen
FILE *fdopen(int fd, const char* mode);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_splice
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getresgid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/system.c
#ifdef mini_system
int system( const char* command );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__kill
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/dirent/readdir.c
#ifdef mini_readdir
struct dirent *readdir(DIR *dir);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getppid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setgid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__inotify_rm_watch
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__get_mempolicy
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__epoll_create
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/itooct.c
#ifdef mini_itooct
int itooct(int i, char *buf);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getrlimit
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pread64
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getcpu
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__set_tid_address
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/dirent/scandir.c
#ifdef mini_scandir_bufsize
//#define mini_scandir_bufsize 4096
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__epoll_create1
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sync_file_range
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/prints.h
#ifdef mini_printfs
#define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)
#endif

// minilib/include/fgetc.h
#ifdef mini_getchar
#define getchar() fgetc(0)
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fanotify_init
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/fputc.h
#ifdef mini_putc
#define putc(c,stream) fputc(c,stream)
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fchdir
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__tkill
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/prints.h
#ifdef mini_fprints
#define fprints(F,str) write(fileno(F),str,strlen(str))
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_sigreturn
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/exit_errno.c
#ifdef mini_exit_errno
void exit_errno( int errnum );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getsockopt
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_getparam
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/pty.c
#ifdef mini_unlockpt
int unlockpt(int fd);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__clock_settime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__readahead
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sync
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_kill
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/itohex.c
#ifdef mini_itoHEX
int itoHEX(int i,char* buf,int padding);
#endif

// minilib/src/sigaction.c
#ifdef mini_sigismember
int sigismember(sigset_t *set, int sig);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__move_pages
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fsetxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/sigaction.c
#ifdef mini_sigfillset
static int sigfillset(sigset_t *set);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sysinfo
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__readlink
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sendto
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__utime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_uname
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__shmget
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/atexit.c
#ifdef mini_atexit
static int atexit( functionp* func );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_yield
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__madvise
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__gettid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__io_getevents
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ioprio_get
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__lseek
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__llistxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mlockall
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_get_priority_max
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__syslog
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timer_getoverrun
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fanotify_mark
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_mknod
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_setaffinity
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__inotify_init
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_setpgid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_link
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__exit
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/vexec.c
#ifdef mini_vexec
int vexec( const char* path, char* const* argv, char* const* envp );
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fflush
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_reboot
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__linkat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fstat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__vfork
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__exit_group
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__preadv
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_ferror
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__restart_syscall
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__capset
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__accept4
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__bind
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__kcmp
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fgetpos
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__inotify_init1
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/errstr2.h
#ifdef mini_verbose_errstr2
#include "minilib/include/errstr2.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__openat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/select.h
#ifdef mini_select
#include "minilib/include/select.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__munlock
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__socketpair
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/fopen.c
#ifdef mini_fopen
FILE *fopen(const char* filename, const char* mode);
#endif

// minilib/include/fputc.h
#ifdef mini_putchar
#define putchar(c) fputc(c,stdout)
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_setgid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/sigaction.c
#ifdef mini_sigaddset
int sigaddset(sigset_t *set, int sig);
#endif

// minilib/src/dirname.c
#ifdef mini_dirname
char *dirname(char *s);
#endif

// minilib/src/basename.c
#ifdef mini_basename
char *basename(char *path);
#endif

// minilib/include/mini_fstream.h
#ifdef mini_clearerr
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/fgetc.h
#ifdef mini_getc
#define getc(F) fgetc(F)
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__semctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__semop
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__read
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timer_settime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_rmdir
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__umount2
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/fopen.c
#ifdef mini_freopen
FILE *freopen(const char* filename, const char* mode, FILE *F);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mq_notify
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_setgroups
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/wait.c
#ifdef mini_wait
pid_t wait(int *wstatus);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getcwd
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__shmdt
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mmap
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timer_delete
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__socket
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__chroot
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/hashes.c
#ifdef mini_djb2_hash
unsigned long djb2_hash(const unsigned char *str);
#endif

// minilib/include/mini_fstream.h
#ifdef mini_feof
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rename
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__semtimedop
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sendmmsg
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__select
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__dup
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fdatasync
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__set_robust_list
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_dup
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ioperm
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fadvise64
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__io_setup
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__shmctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__dup3
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/itobin.c
#ifdef mini_itobin
#define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )
#endif

// minilib/src/brk.c
#ifdef mini_sys_brk
static long sys_brk(unsigned long addr);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setresuid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_umask
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getppid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/fgets.c
#ifdef mini_gets
#define gets(F) fgets(F,0xfffffff,stdin)
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__clock_adjtime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__listxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__geteuid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/memmove.c
#ifdef mini_memmove
void* memmove(void *dest, const void *src, int n);
#endif

// minilib/src/dirent/rewinddir.c
#ifdef mini_rewinddir
void rewinddir(DIR *dir);
#endif

// minilib/src/perror.c
#ifdef mini_perror
void perror(const char *msg);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_fchmod
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__write
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__readv
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/mmap.c
#ifdef mini_mmap
static void* __attribute__((optimize("O0"))) mmap(void* addr,  size_t len,  int prot,  int flags,  int fd,  off_t off);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__wait4
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__semget
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getitimer
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__utimes
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_readahead
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/ansicolors.h
#ifdef mini_ansicolors
#include "minilib/include/ansicolors.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_nanosleep
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_clearerror
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__utimensat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/dirent/dirfd.c
#ifdef mini_dirfd
int dirfd(DIR *d);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__recvmsg
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__io_cancel
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mremap
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__renameat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mknod
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/pty.c
#ifdef mini_ptsname
char *ptsname(int fd);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setpriority
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getpgrp
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/errstr.h
#ifdef mini_verbose_errstr
#include "minilib/include/errstr.h"
#endif

// minilib/include/math.h
#ifdef mini_labs
#include "minilib/include/math.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_rt_sigprocmask
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getgid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__stat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__modify_ldt
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_fchown
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__lsetxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/strcmp.c
#ifdef mini_strncasecmp
int strncasecmp(const char*c1,const char*c2,int len);
#endif

// minilib/src/dirent/scandir.c
#ifdef mini_scandir
int scandir(const char *path, struct dirent **listing[], int (*fp_select)(const struct dirent *),	int (*cmp)(const struct dirent **, const struct dirent **));
#endif

// minilib/include/lseek.h
#ifdef mini_ftruncate
#include "minilib/include/lseek.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__epoll_pwait
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__splice
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/memcpy.c
#ifdef mini_strncpy
char *strncpy(char *dest, const char *src, int n);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__times
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/hashes.c
#ifdef mini_sdbm_hash
unsigned long sdbm_hash(const unsigned char *str);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__keyctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/prints.h
#ifdef mini_puts
#define puts(msg) ( print(msg) + printl() )
#endif

// minilib/include/mini_fstream.h
#ifdef mini_printf
#define printf(...) fprintf(stdout,__VA_ARGS__)
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__time
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rmdir
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_dup2
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setuid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/math.h
#ifdef mini_abs
#include "minilib/include/math.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__chdir
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/ltodec.c
#ifdef mini_ltodec
int ltodec(long i, char *buf, int prec, char limiter );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__flistxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mkdirat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__request_key
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__swapoff
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/prints.h
#ifdef mini_eprints
#define eprints(...) dprints(STDERR_FILENO,__VA_ARGS__,0)
#endif

// minilib/include/fexecveat.h
#ifdef mini_fexecveat
#include "minilib/include/fexecveat.h"
#endif

// minilib/src/sigaction.c
#ifdef mini_sigemptyset
static int sigemptyset(sigset_t *set);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mincore
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/minilib_global.h
#ifdef mini_macro
static void __attribute__((noipa,cold)) optimization_fence(void*p){}
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ioprio_set
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mq_unlink
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__eventfd
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getpgid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fprint
#define fprint(...) fprintf(__VA_ARGS__)
#endif

// minilib/src/isatty.c
#ifdef mini_isatty
int isatty(int fd);
#endif

// minilib/src/dirent/closedir.c
#ifdef mini_closedir
int closedir(DIR *dir);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__nanosleep
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/qsort.c
#ifdef mini_swap
static inline void swap(void* a, void* b,int size);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__lstat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__epoll_wait
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/match.c
#ifdef mini_match
int match(const char *text, const char *re);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_getscheduler
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__futimesat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_get_priority_min
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/prints.h
#ifdef mini_printsl
#define printsl(...) _mprints(__VA_ARGS__,"\n",0)
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_sync
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_sigprocmask
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__settimeofday
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/fexecve.h
#ifdef mini_fexecve
#include "minilib/include/fexecve.h"
#endif

// minilib/src/itohex.c
#ifdef mini_itohex
int itohex(int i,char* buf,int padding);
#endif

// minilib/src/strcmp.c
#ifdef mini_memcmp
int memcmp(const void* c1,const void* c2,int len);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__accept
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__alarm
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/sleep.c
#ifdef mini_usleep
unsigned int volatile usleep(unsigned int useconds);
#endif

// minilib/include/prints.h
#ifdef mini_eputs
#define eputs(msg) ( eprint(msg) + eprintl() )
#endif

// minilib/include/fgetc.h
#ifdef mini_ungetc
#include "minilib/include/fgetc.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__shmat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pselect6
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_dup3
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__msgsnd
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__poll
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sysfs
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__vmsplice
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fcntl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setregid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/open.c
#ifdef mini_creat
int volatile creat( const char *s, int mode );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__umask
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mprotect
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sched_setscheduler
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__tgkill
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__execve
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mq_timedsend
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/execl.c
#ifdef mini_execl
static int execl(const char *pathname, const char* arg0,... );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__munmap
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_mkdir
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_chdir
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__eventfd2
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__gettimeofday
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/vexec.c
#ifdef mini_vexec_q
int vexec_q( const char* path, char* const* argv, char* const* envp );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mq_open
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__memfd_create
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__creat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mkfifo.h
#ifdef mini_mkfifo
#include "minilib/include/mkfifo.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_chroot
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__process_vm_writev
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__newfstatat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__symlink
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__migrate_pages
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__acct
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_setuid
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__statfs
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setpgid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mknodat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__io_destroy
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__personality
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_sigqueueinfo
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/strtol.c
#ifdef mini_strtol
long int strtol(const char *c, const char **endp, int base);
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_gettimeofday
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__clock_nanosleep
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/macros/getoptm.h
#ifdef mini_def
#include "minilib/macros/getoptm.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fgetxattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_execveat
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getuid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_pipe
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setfsgid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__kexec_file_load
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_mprotect
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pause
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__truncate
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__init_module
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/tcsetattr.h
#ifdef mini_tcsetattr
#include "termios.h"
#include "bits/ioctl.h"
#include "minilib/include/tcsetattr.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_rename
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__vhangup
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getcwd
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_fstat
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getdents
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__io_submit
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mq_getsetattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/strcmp.c
#ifdef mini_strcasecmp
int strcasecmp(const char*c1,const char*c2);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__chown
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getpriority
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__readlinkat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__name_to_handle_at
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__shutdown
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__uname
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getrusage
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__tee
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ptrace
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/dirent/opendir.c
#ifdef mini_opendir
static DIR *opendir(const char *name );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__unlinkat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__dup2
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_rewind
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getrandom
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__msgrcv
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fchown
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__perf_event_open
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/ext_match.c
#ifdef mini_ext_match
int ext_match(const char *text, const char *re);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mkdir
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__lookup_dcookie
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mount
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__setitimer
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timerfd_settime
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__lremovexattr
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_fwrite
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/math.h
#ifdef mini_div
#include "minilib/include/math.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__ppoll
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__futex
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fchmodat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__chmod
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__get_robust_list
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__arch_prctl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fchmod
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_getitimer
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/src/strchr.c
#ifdef mini_strrchr
char *strrchr(const char *s, int c);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__sendfile
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/ansicolors.h
#ifdef mini_shortcolornames
#include "minilib/include/ansicolors.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__fchownat
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__kexec_load
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__quotactl
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/memfrob.c
#ifdef mini_memfrob
void* memfrob(void* s, unsigned int len);
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getresuid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__unlink
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__mq_timedreceive
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__timer_create
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__seccomp
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_setbuf
#include "minilib/include/mini_fstream.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pipe
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__pwrite64
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/src/rand.c
#ifdef mini_srand
void srand( unsigned int i );
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__rt_tgsigqueueinfo
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/mini_fstream.h
#ifdef mini_vfprintf
#define vfprintf(...) fprintf(__VA_ARGS__)
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_fcntl
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__getegid
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscalls_x64.h
#ifdef mini__msgget
#include "minilib/include/syscalls_x64.h"
#endif

// minilib/include/syscall_stubs.h
#ifdef mini_chmod
#include "minilib/include/syscall_stubs.h"
#endif

// minilib/include/prints.h
#ifdef mini_writes
#define writes(str) write(STDOUT_FILENO,str,sizeof(str))
#endif
#ifdef INCLUDESRC
#ifndef included_minilib_c
#include "minilib.c"
#endif
#endif

#endif

// ifndef LDSCRIPT
#else

#ifdef LDSCRIPT_default


 PHDRS {
 /* flags: 0x5 r+x, 0x6 r+w, 0x7 r+w+x
   (TODO) somehow some functions seem to need a writable text section,
	 as well as some need an executable bss section.
	 Have to sort this out.
	 Would be better, separating that cleanly.
	 seems like as soon, there is written (and/or?) read from data,
	 placed into the bss section, the section has to be executable.???
	 that is. not easy to understand. 
	 */ 

	text PT_LOAD FILEHDR PHDRS FLAGS(0x5) ;
	data PT_LOAD FLAGS(0x7);
	bss PT_LOAD FLAGS(0x7);
	stack PT_GNU_STACK FLAGS(0x6) ;
}


SECTIONS {                                                                                                                                                    
		start = _start;
		/*. = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;*/
		. = 0x08048000 + SIZEOF_HEADERS;

		.text           :
		{
				*(.text.unlikely .text.*_unlikely)
						*(.text._start)
						*(.text.exit .text.exit.*)
						*(.text._startup)
						*(.text.main)
						*(.text.hot .text.hot.*)
						*(.text .stub .text.* .gnu.linkonce.t.*)
						/* .gnu.warning sections are handled specially by elf32.em.  */
						*(.gnu.warning)
						*(.rodata .rodata.* .gnu.linkonce.r.*)
		 } :text

		 .data :
		 {
						*(.data .data.*)
			} : data


		.bss           : 
		{ 
						*(COMMON)
						*(.dynbss)
						*(.bss .bss.* .gnu.linkonce.b.*)
						/* Align here to ensure that the .bss section occupies space up to
							 _end.  Align after .bss to ensure correct alignment even if the
							 .bss section disappears because there are no input sections.
							 FIXME: Why do we need it? When there is no .bss section, we dont
							 pad the .data section.  
								misc: deleted : */
				. = ALIGN(. != 0 ? 32 / 8 : 1);
		} :bss 
		 . = ALIGN(64 / 8);
	  _end = .; 
		PROVIDE (_end = .); 



		/DISCARD/ : { 
			 *(.note.GNU-stack) 
			  *(.note*) 
			*(.gnu_debuglink) 
			*(.gnu.lto_*) 
			*(.iplt*) 
			*(.igot*) 
			*(.rel*) 
			*(.comment)
			*(.eh_frame)
			*(.plt*)
			*(.got.plt*)
			*(.rel.*)
			}


}


#endif

#ifdef LDSCRIPT_onlytext

/*OUTPUT_FORMAT("elf32-i386")
OUTPUT_ARCH(i386)
*/

PHDRS {
	text PT_LOAD FILEHDR PHDRS;
	/* text PT_LOAD FILEHDR PHDRS FLAGS(0x7); 
	 would set the text section read- and writable. somehow. 
	 this spares one section, if globals are used.
	 but seems to me a bit too nasty and dangerous.
	 sametime, some bins are compiled with writable text.
	 have to look for the source. strange, somehow. */
	stack PT_GNU_STACK FLAGS(0x6) ;
	/*bss PT_LOAD;*/
}

ENTRY(_start)

SECTIONS
{
		/* Read-only sections, merged into text segment: */
		/*__executable_start = SEGMENT_START("text-segment", 0x08048000); */
		start = _start;
		/*. = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;*/
		. = 0x08048000 + SIZEOF_HEADERS;

		.text           :
		{
				*(.text.unlikely .text.*_unlikely)
						*(.text._start .text._start.*)
						*(.text._exit .text._exit.*)
						*(.text.__exit .text.__exit.*)
						*(.text._startup .text._startup.*)
						*(.text.main .text.main.*)
						*(.text.cexit)
						*(.text.hot .text.hot.*)
						*(.text .stub .text.* .gnu.linkonce.t.*)
						/* .gnu.warning sections are handled specially by elf32.em.  */
						*(.gnu.warning)

/*		 }
		.bss            :
		{ 
*/
/*misc: Seems to work without a bss segment ( for readonly data only) , so commented it out.
saves 15 bytes. ( needs -N for linking )*/


						*(.dynbss)
						*(.bss .bss.* .gnu.linkonce.b.*)
						*(COMMON)
						*(.rodata .rodata.* .gnu.linkonce.r.*)
						*(.data .data.*)
						/* Align here to ensure that the .bss section occupies space up to
							 _end.  Align after .bss to ensure correct alignment even if the
							 .bss section disappears because there are no input sections.
							 FIXME: Why do we need it? When there is no .bss section, we dont
							 pad the .data section.  
misc: deleted : . = ALIGN(. != 0 ? 32 / 8 : 1);*/
		} :text

		/DISCARD/ : { 
			*(.note.GNU-stack) 
	  		*(.note*) 
			*(.gnu_debuglink) 
			*(.gnu.lto_*) 
			*(.iplt*) 
			*(.igot*) 
			*(.rel*) 
			*(.comment)
			*(.eh_frame)
			*(.plt*)
			*(.got.plt*)
			*(.rel.*)
			*(*)
			}
}


#endif

#ifdef LDSCRIPT_text_and_bss

/*OUTPUT_FORMAT("elf32-i386")
OUTPUT_ARCH(i386)*/


 PHDRS {
 /* flags: 0x5 r+x, 0x6 r+w, 0x7 r+w+x
   (TODO) somehow some functions seem to need a writable text section,
	 as well as some need an executable bss section.
	 Have to sort this out.
	 Would be better, separating that cleanly.
	 seems like as soon, there is written (and/or?) read from data,
	 placed into the bss section, the section has to be executable.???
	 that is. not easy to understand. 
	 */ 

	text PT_LOAD FILEHDR PHDRS FLAGS(0x5) ;
	bss PT_LOAD FLAGS(0x7);
	stack PT_GNU_STACK FLAGS(0x6) ;
}

ENTRY(_start)

SECTIONS
{
		/* Read-only sections, merged into text segment: */
		/*__executable_start = SEGMENT_START("text-segment", 0x08048000); */
		start = _start;
		/*. = SEGMENT_START("text-segment", 0x08048000) + SIZEOF_HEADERS;*/
		. = 0x08048000 + SIZEOF_HEADERS;

		.text           :
		{
				*(.text.unlikely .text.*_unlikely)
						*(.text._start)
						*(.text.exit .text.exit.*)
						*(.text._startup)
						*(.text.main)
						*(.text.hot .text.hot.*)
						*(.text .stub .text.* .gnu.linkonce.t.*)
						/* .gnu.warning sections are handled specially by elf32.em.  */
						*(.gnu.warning)
		 } :text

		.bss           : 
		{ 

						*(.dynbss)
						*(.bss .bss.* .gnu.linkonce.b.*)
						*(COMMON)
						*(.data .data.*)
						*(.rodata .rodata.* .gnu.linkonce.r.*)
						/* Align here to ensure that the .bss section occupies space up to
							 _end.  Align after .bss to ensure correct alignment even if the
							 .bss section disappears because there are no input sections.
							 FIXME: Why do we need it? When there is no .bss section, we dont
							 pad the .data section.  
misc: deleted : . = ALIGN(. != 0 ? 32 / 8 : 1);*/
		} :bss 
		/* . = ALIGN(64 / 8);
	  _end = .; 
		PROVIDE (_end = .); */


		/DISCARD/ : { 
			 *(.note.GNU-stack) 
			  *(.note*) 
			*(.gnu_debuglink) 
			*(.gnu.lto_*) 
			*(.iplt*) 
			*(.igot*) 
			*(.rel*) 
			*(.comment)
			*(.eh_frame)
			*(.plt*)
			*(.got.plt*)
			*(.rel.*)
			}
}


#endif

#endif

