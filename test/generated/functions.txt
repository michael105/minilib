vsnprintf:int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );

fprintfs:int fprintfs( FILE* F, char *fmt, ...);

clearerr:  void clearerr(FILE *f);

sigemptyset: int sigemptyset(sigset_t *set);

execve:execve( const char *filename,  char* const* argv, char* const* envp)

strstr:char* strstr(const char *big, const char *little);

rt_sigaction:rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)

dup3:dup3(int a1, int a2, int a3)		

access:access( const char *filename, int mode)

stat:stat(const char* filename,struct stat* a2)		

free:void  free(void* p);

ftell:  long ftell(FILE *f);

pipe:pipe( int *filedes)

memcpy:void *memcpy( void *d, const void *s, int n );

unlockpt:int unlockpt(int fd);

mount:mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)

wait4:wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)

strncmp:int strncmp(const char*c1,const char*c2,int len);

isatty:int isatty(int fd);

ftruncate:ftruncate(unsigned int a1, unsigned int a2 )

strlen:int strlen(const char*str);

snprintf:int snprintf( char *buf, size_t size, const char *fmt, ... );

uname:uname(struct old_utsname *name )

fgetpos:  void fgetpos(FILE *f, long *pos );

read:read( int fd, void *buf, int len )

setbuf: void setbuf(FILE *stream, char *buf);

setsid:DEF_syscall(setsid,0 )

opendir:DIR *opendir(const char *name);

dup:dup(int a1)		

nanosleep:nanosleep( struct timespec *rqtp, struct timespec *rmtp)

fcntl:fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)

strncpy:char *strncpy(char *dest, const char *src, int n);

_strcasecmp:int _strcasecmp(const char*c1,const char*c2,int len);

chdir:chdir(const char* path)		

setvbuf: int setvbuf(FILE *stream, char *buf, int mode, size_t size);

ultodec:int ultodec(unsigned long i, char *buf, int prec, char limiter );

vfork:DEF_syscall(vfork,0)

signal:sighandler_t signal(int sig, sighandler_t func );

ungetc: int ungetc(int c, FILE *F);

execveat:execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)

unlink:unlink( const char* a1)		

sendfile:sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)

atoi:int atoi(const char *c);

fdopen:FILE *fdopen(int fd, const char* mode);

getitimer:getitimer( int which,  struct itimerval *value)

_itobin:int _itobin(int i, char*buf, int prec, int groups );

utime:utime( const char *filename, struct utimbuf *times)

strdup:char *strdup(const char *source);

sigaction:int  sigaction(int sig, const struct sigaction *act, struct sigaction *oact);

fflush:  int ) fflush( FILE *F );

rand:unsigned int rand();

fileno:  int ) fileno( FILE *f );

getuid:DEF_syscall(getuid,0)

isspace:int isspace(int c);

kill:kill( pid_t pid,  int sig)

todo_putenv:int todo_putenv( char *s );

malloc:void*  malloc(int size);

fexecveat:  int fexecveat(int fd, char *const argv[], char *const envp[]);

execvpe:  int execvpe(const char *file, char *const argv[], char *const envp[]);

verbose_errstr:const char* verbose_errstr(int num);

fsetpos:  int fsetpos(FILE *f, int pos );

rmdir:rmdir( const char *pathname)

open:int  open( const char *s, int flags, ... );

wait:pid_t wait(int *wstatus);

pivot_root:pivot_root( const char *new_root,  const char *put_old)

gettimeofday:gettimeofday( struct timeval *a1, struct timezone *a2)

srand:void srand( unsigned int i );

readdir:struct dirent *readdir(DIR *dir);

getppid:DEF_syscall(getppid,0)

fgetc:  int fgetc(FILE *F);

freopen:FILE *freopen(const char* filename, const char* mode, FILE *F);

strcat:char *strcat(char *dest, const char *src );

getpid:DEF_syscall(getpid,0 )

readahead:readahead( int fd,  loff_t offset,  size_t count)

time:time(unsigned int *a1 )

tcgetattr:  int ) tcgetattr(int fd, struct termios *io);

fchmod:fchmod( unsigned int fd, mode_t mode)

fopen:FILE *fopen(const char* filename, const char* mode);

rename:rename( const char* oldpath, const char* newpath )		

mknod:mknod( const char *filename,  umode_t mode,  unsigned dev)

close:close( int fd )

getpgrp:DEF_syscall(getpgrp,0)

write:write(int fd,const void *buf, int len )

uitodec:int uitodec(unsigned int i, char *buf, int prec, char limiter );

fputs:  int  fputs(const char *c, FILE *F);

strchr:char *strchr(const char *s, int c);

strcpy:char *strcpy(char *dest, const char *src);

grantpt:int grantpt(int fd);

getgid:DEF_syscall(getgid,0)

perror:void perror(const char *msg);

execv:  int execv(const char *pathname, char *const argv[]);

symlink:symlink( const char *oldname,  const char *newname)

_strcmp:int _strcmp(const char*c1,const char*c2,int len);

djb2_hash:unsigned long djb2_hash(const unsigned char *str);

memfrob:void* memfrob(void* s, unsigned int len);

rt_sigreturn:rt_sigreturn( unsigned long __unused)

realloc:void* realloc(void *p, int size);

vhangup:DEF_syscall(vhangup,0 )

select:  int  ) select(int fd,  fd_set* readfd,  fd_set *writefd,  fd_set *exceptfd,  struct timeval *wait);

sleep:unsigned int sleep(unsigned int seconds);

chown:chown( const char *filename, uid_t user, gid_t group)

feof:  int feof(FILE *f);

ptsname_r:int ptsname_r(int fd, char *buf, size_t len);

fchown:fchown( unsigned int fd, uid_t user, gid_t group)

fstat:fstat(int a1,struct stat* a2)		

basename:char *basename(char *path);

memset:void *memset( void *s, int c, int n);

sync:DEF_syscall(sync,0)

getenv:char* getenv(const char* name);

brk:brk( unsigned long brk)

itodec:int itodec(int i, char *buf, int prec, char limiter );

mkfifo: int mkfifo( const char* path, mode_t mode );

system:int system( const char* command );

fork:DEF_syscall(fork,0)

strncasecmp:int strncasecmp(const char*c1,const char*c2,int len);

ltodec:int ltodec(long i, char *buf, int prec, char limiter );

strcmp:int strcmp(const char*c1,const char*c2);

rewind:  void rewind( FILE *f );

getdents:getdents( unsigned int fd, struct dirent *direntry, unsigned int count )

lseek:lseek(unsigned int a1, int a2, int a3 )

dirname:char *dirname(char *s);

mprotect:mprotect( POINTER *a1, POINTER a2, int a3 )

ioctl:int ioctl( int fd, unsigned long int request, ... );

setitimer:setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)

getcwd:getcwd( char *buf,  unsigned long size)

dprintf:int dprintf( int fd, const char *fmt, ... );

strchrnul:char *strchrnul(const char *s, int c);

strerror:char* strerror( int errnum );

clearerror:  void clearerror(FILE *f);

strrchr:char *strrchr(const char *s, int c);

fsync:fsync(int a1 )

link:link( const char *oldname, const char *newname)

waitpid:pid_t waitpid(pid_t pid, int *wstatus, int options);

chroot:chroot( const char *filename)

fputc:  int  fputc(int c, FILE* F);

memcmp:int memcmp(const void* c1,const void* c2,int len);

fwrite:  size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f);

setpgid:setpgid( pid_t pid, pid_t pgid)

execvp:  int execvp(const char *file, char *const argv[]);

setuid:setuid( uid_t uid)

fseek:  int fseek(FILE *f, long offset, int whence );

dtodec:int dtodec(double d, char* buf, int precision);

ferror:  int ferror(FILE *f);

itohex:int itohex(int i,char* buf,int padding);

creat:int  creat( const char *s, int mode );

fgets:char* fgets(char *buf, int size, FILE* F);

_fopen:FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f);

usleep:unsigned int usleep(unsigned int useconds);

itoHEX:int itoHEX(int i,char* buf,int padding);

fclose:  int ) fclose( FILE* f );

sigaddset:int sigaddset(sigset_t *set, int sig);

posix_openpt:int posix_openpt(int flags);

reboot:reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)

isprint:  int ) isprint(const char c);

closedir:int closedir(DIR *dir);

ptsname:char *ptsname(int fd);

strcasecmp:int strcasecmp(const char*c1,const char*c2);

_itohex:int _itohex(int i,char* buf,int padding, int capitals);

tcsetattr:  int ) tcsetattr(int fd, int opt, const struct termios *io);

umask:umask( int mask)

dup2:dup2(int a1, int a2)		

setgid:setgid( gid_t gid)

chmod:chmod( const char *filename, mode_t mode)

fread:  size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f);

sdbm_hash:unsigned long sdbm_hash(const unsigned char *str);

mkdir:mkdir( const char *pathname, int mode)

