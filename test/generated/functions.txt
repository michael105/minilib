ferror:  int ferror(FILE *f);

time:time(unsigned int *a1 )

vsnprintf:int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );

gettimeofday:gettimeofday( struct timeval *a1, struct timezone *a2)

rename:rename( const char* oldpath, const char* newpath )		

creat: int  ) creat( const char *s, int mode );

feof:  int feof(FILE *f);

strncmp:int strncmp(const char*c1,const char*c2,int len);

rand:unsigned int rand();

_strcmp:int _strcmp(const char*c1,const char*c2,int len);

setbuf:void setbuf(FILE *stream, char *buf);

fflush:  int ) fflush( FILE *F );

itohex:int itohex(int i,char* buf,int padding);

strcat:char *strcat(char *dest, const char *src );

basename:char *basename(char *path);

sigemptyset:int sigemptyset(sigset_t *set);

getgid:DEF_syscall(getgid,0)

setvbuf:int setvbuf(FILE *stream, char *buf, int mode, size_t size);

setpgid:setpgid( pid_t pid,  pid_t pgid)

dtodec:int dtodec(double d, char* buf, int precision);

free:void  free(void* p);

fchown:fchown( unsigned int fd,  uid_t user,  gid_t group)

srand:void srand( unsigned int i );

strcpy:char *strcpy(char *dest, const char *src);

close:close( int fd )

ltodec:int ltodec(long i, char *buf, int prec, char limiter );

chmod:chmod( const char *filename,  mode_t mode)

fprintfs:int fprintfs( FILE* F, char *fmt, ...);

fread:  size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f);

fseek:  int fseek(FILE *f, long offset, int whence );

fputc:  int  fputc(int c, FILE* F);

isatty:int isatty(int fd);

isprint:  int ) isprint(const char c);

fgetc:  int fgetc(FILE *F);

fwrite:  size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f);

access:access( const char *filename,  int mode)

fsync:fsync(int a1 )

fsetpos:  int fsetpos(FILE *f, int pos );

fileno:  int ) fileno( FILE *f );

mkdir:mkdir( const char *pathname,  int mode)

getpgrp:DEF_syscall(getpgrp,0)

dup3:dup3(int a1, int a2, int a3)		

open:int  open( const char *s, int flags, ... );

closedir:int closedir(DIR *dir);

strncpy:char *strncpy(char *dest, const char *src, int n);

_itohex:int _itohex(int i,char* buf,int padding, int capitals);

lseek:lseek(unsigned int a1, int a2, int a3 )

fgetpos:  void fgetpos(FILE *f, long *pos );

isspace:int isspace(int c);

opendir:DIR *opendir(const char *name);

memset:void *memset( void *s, int c, int n);

getenv:char *getenv(const char* name);

strerror:char* strerror( int errnum );

umask:umask( int mask)

memcmp:int memcmp(const void* c1,const void* c2,int len);

tcsetattr:  int ) tcsetattr(int fd, int opt, const struct termios *io);

ultodec:int ultodec(unsigned long i, char *buf, int prec, char limiter );

getdents:getdents( unsigned int fd, struct dirent *direntry, unsigned int count )

readdir:struct dirent *readdir(DIR *dir);

chown:chown( const char *filename,  uid_t user,  gid_t group)

ftell:  long ftell(FILE *f);

ftruncate:ftruncate(unsigned int a1, unsigned int a2 )

dup2:dup2(int a1, int a2)		

read:read( int fd, POINTER *buf, int len )

getpid:DEF_syscall(getpid,0 )

atoi:int atoi(char *c);

uname:uname(struct old_utsname *name )

malloc:void*  malloc(int size);

link:link( const char *oldname,  const char *newname)

write:write(int fd,const void *buf, int len )

memcpy:void *memcpy( void *d, const void *s, int n );

select:  int  ) select(int fd,  fd_set* readfd,  fd_set *writefd,  fd_set *exceptfd,  struct timeval *wait);

fork:DEF_syscall(fork,0)

setsid:DEF_syscall(setsid,0 )

fchmod:fchmod( unsigned int fd,  mode_t mode)

ioctl:int ioctl( int fd, unsigned long int request, ... );

unlink:unlink( const char* a1)		

clearerror:  void clearerror(FILE *f);

dup:dup(int a1)		

dprintf:int dprintf( int fd, const char *fmt, ... );

stat:stat(const char* filename,struct stat* a2)		

rmdir:rmdir( const char *pathname)

getppid:DEF_syscall(getppid,0)

getcwd:getcwd(char *buf,long size)		

rewind:  void rewind( FILE *f );

memfrob:void* memfrob(void* s, unsigned int len);

fcntl:fcntl( unsigned int fd,  unsigned int cmd,  unsigned long arg)

chdir:chdir(const char* path)		

tcgetattr:  int ) tcgetattr(int fd, struct termios *io);

setuid:setuid( uid_t uid)

mprotect:mprotect( POINTER *a1, POINTER a2, int a3 )

itoHEX:int itoHEX(int i,char* buf,int padding);

perror:void perror(char *msg);

itodec:int itodec(int i, char *buf, int prec, char limiter );

fopen:FILE *fopen(const char* filename, const char* mode);

pipe:pipe( int *filedes)

_itobin:int _itobin(int i, char*buf, int prec, int groups );

vhangup:DEF_syscall(vhangup,0 )

strlen:int strlen(const char*str);

fclose:  int ) fclose( FILE* f );

uitodec:int uitodec(unsigned int i, char *buf, int prec, char limiter );

strcmp:int strcmp(const char*c1,const char*c2);

utime:utime( char *filename,  struct utimbuf *times)

setgid:setgid( gid_t gid)

fstat:fstat(int a1,struct stat* a2)		

fputs:  int  fputs(const char *c, FILE *F);

snprintf:int snprintf( char *buf, size_t size, const char *fmt, ... );

