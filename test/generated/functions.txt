read:read( int fd, void *buf, int len )

grantpt:int grantpt(int fd);

uitodec:int uitodec(unsigned int i, char *buf, int prec, char limiter );

close:close( int fd )

_itohex:int _itohex(int i,char* buf,int padding, int capitals);

mount:mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)

stat:stat(const char* filename,struct stat* a2)		

ferror:  int ferror(FILE *f);

readdir:struct dirent *readdir(DIR *dir);

fgetpos:  void fgetpos(FILE *f, long *pos );

execvp:  int execvp(const char *file, char *const argv[]);

ioctl:int   )) ioctl( int fd, unsigned long int request, ... );

memfrob:void* memfrob(void* s, unsigned int len);

sleep:unsigned int  sleep(unsigned int seconds);

getpid:DEF_syscall(getpid,0 )

labs: long int labs(long int i);

waitpid:pid_t waitpid(pid_t pid, int *wstatus, int options);

mprotect:mprotect( POINTER *a1, POINTER a2, int a3 )

perror:void perror(const char *msg);

rt_sigprocmask:rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)

basename:char *basename(char *path);

strchrnul:char *strchrnul(const char *s, int c);

creat:int  creat( const char *s, int mode );

_itobin:int _itobin(int i, char*buf, int prec, int groups );

setpgid:setpgid( pid_t pid, pid_t pgid)

strcasecmp:int strcasecmp(const char*c1,const char*c2);

unlockpt:int unlockpt(int fd);

fstat:fstat(int a1,struct stat* a2)		

dprintf:int dprintf( int fd, const char *fmt, ... );

dup2:dup2(int a1, int a2)		

utime:utime( const char *filename, struct utimbuf *times)

rmdir:rmdir( const char *pathname)

verbose_errstr:const char* verbose_errstr(int num);

fcntl:fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)

sdbm_hash:unsigned long sdbm_hash(const unsigned char *str);

strchr:char *strchr(const char *s, int c);

setvbuf: int setvbuf(FILE *stream, char *buf, int mode, size_t size);

memcpy:void *memcpy( void *d, const void *s, int n );

vsnprintf:int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );

getenv:char* getenv(const char* name);

ptsname_r:int ptsname_r(int fd, char *buf, size_t len);

getppid:DEF_syscall(getppid,0)

todo_putenv:int todo_putenv( char *s );

feof:  int feof(FILE *f);

getdents:getdents( unsigned int fd, struct dirent *direntry, unsigned int count )

lseek:lseek(unsigned int a1, int a2, int a3 )

dirname:char *dirname(char *s);

djb2_hash:unsigned long djb2_hash(const unsigned char *str);

fclose:  int ) fclose( FILE* f );

strerror:char* strerror( int errnum );

fread:  size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f);

fprintfs:int fprintfs( FILE* F, char *fmt, ...);

sendfile:sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)

itodec:int itodec(int i, char *buf, int prec, char limiter );

isprint:  int ) isprint(const char c);

system:int system( const char* command );

vhangup:DEF_syscall(vhangup,0 )

fputc:  int  fputc(int c, FILE* F);

strncmp:int strncmp(const char*c1,const char*c2,int len);

realloc:void* realloc(void *p, int size);

fsync:fsync(int a1 )

pivot_root:pivot_root( const char *new_root,  const char *put_old)

_strcmp:int _strcmp(const char*c1,const char*c2,int len);

rand:unsigned int rand();

tcsetattr:  int ) tcsetattr(int fd, int opt, const struct termios *io);

errno_str:const char *errno_str(int err);

isatty:int isatty(int fd);

sigaddset:int sigaddset(sigset_t *set, int sig);

rewind:  void rewind( FILE *f );

fchmod:fchmod( unsigned int fd, mode_t mode)

tcgetattr:  int ) tcgetattr(int fd, struct termios *io);

dup3:dup3(int a1, int a2, int a3)		

unlink:unlink( const char* a1)		

strcmp:int strcmp(const char*c1,const char*c2);

clearerr:  void clearerr(FILE *f);

fopen:FILE *fopen(const char* filename, const char* mode);

isspace:int isspace(int c);

getpgrp:DEF_syscall(getpgrp,0)

gettimeofday:gettimeofday( struct timeval *a1, struct timezone *a2)

fork:DEF_syscall(fork,0)

setgid:setgid( gid_t gid)

sigdelset:int sigdelset(sigset_t *set, int sig);

free:void  free(void* p);

usleep:unsigned int  usleep(unsigned int useconds);

rt_sigreturn:rt_sigreturn( unsigned long __unused)

access:access( const char *filename, int mode)

getuid:DEF_syscall(getuid,0)

write:write(int fd,const void *buf, int len )

dup:dup(int a1)		

setitimer:setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)

ungetc: int ungetc(int c, FILE *F);

sigismember:int sigismember(sigset_t *set, int sig);

fputs:  int  fputs(const char *c, FILE *F);

atoi:int atoi(const char *c);

itoHEX:int itoHEX(int i,char* buf,int padding);

abs: int abs(int i);

div: div_t div(int numerator, int denominator);

fsetpos:  int fsetpos(FILE *f, int pos );

rename:rename( const char* oldpath, const char* newpath )		

symlink:symlink( const char *oldname,  const char *newname)

posix_openpt:int posix_openpt(int flags);

chroot:chroot( const char *filename)

setbuf: void setbuf(FILE *stream, char *buf);

fgets:char* fgets(char *buf, int size, FILE* F);

uname:uname(struct old_utsname *name )

umount2:umount2( const char *mountpoint, int flags) 

strstr:char* strstr(const char *big, const char *little);

strlen:int strlen(const char*str);

readahead:readahead( int fd,  loff_t offset,  size_t count)

select: int  )) select(int fd,  fd_set* readfd,  fd_set *writefd,  fd_set *exceptfd,  struct timeval *wait);

pipe:pipe( int *filedes)

ltodec:int ltodec(long i, char *buf, int prec, char limiter );

wait4:wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)

kill:kill( pid_t pid,  int sig)

execve:execve( const char *filename,  char* const* argv, char* const* envp)

sigaction: int  sigaction(int sig, const struct sigaction *act, struct sigaction *oact);

mkfifo: int mkfifo( const char* path, mode_t mode );

memset:void *memset( void *s, int c, int n);

execv:  int execv(const char *pathname, char *const argv[]);

signal:sighandler_t signal(int sig, sighandler_t func );

sigprocmask:int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);

fseek:  int fseek(FILE *f, long offset, int whence );

ftell:  long ftell(FILE *f);

itohex:int itohex(int i,char* buf,int padding);

srand:void srand( unsigned int i );

malloc:void*  malloc(int size);

open:int  open( const char *s, int flags, ... );

ftruncate:ftruncate(unsigned int a1, unsigned int a2 )

memcmp:int memcmp(const void* c1,const void* c2,int len);

clearerror:  void clearerror(FILE *f);

_fopen:FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f);

chmod:chmod( const char *filename, mode_t mode)

chown:chown( const char *filename, uid_t user, gid_t group)

strncpy:char *strncpy(char *dest, const char *src, int n);

link:link( const char *oldname, const char *newname)

raise:  int raise(int signr);

opendir:DIR *opendir(const char *name);

fileno:  int ) fileno( FILE *f );

strrchr:char *strrchr(const char *s, int c);

nanosleep:nanosleep( struct timespec *rqtp, struct timespec *rmtp)

strcpy:char *strcpy(char *dest, const char *src);

chdir:chdir(const char* path)		

fgetc:  int fgetc(FILE *F);

strdup:char *strdup(const char *source);

vfork:DEF_syscall(vfork,0)

fflush:  int ) fflush( FILE *F );

memmove:void* memmove(void *dest, const void *src, int n);

wait:pid_t wait(int *wstatus);

sigfillset: int sigfillset(sigset_t *set);

fwrite:  size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f);

setsid:DEF_syscall(setsid,0 )

brk:brk( unsigned long brk)

freopen:FILE *freopen(const char* filename, const char* mode, FILE *F);

fchown:fchown( unsigned int fd, uid_t user, gid_t group)

execvpe: int execvpe(const char *file, char *const argv[], char *const envp[]);

time:time(unsigned int *a1 )

sync:DEF_syscall(sync,0)

reboot:reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)

strcat:char *strcat(char *dest, const char *src );

ultodec:int ultodec(unsigned long i, char *buf, int prec, char limiter );

setuid:setuid( uid_t uid)

getitimer:getitimer( int which,  struct itimerval *value)

ptsname:char *ptsname(int fd);

dtodec:int dtodec(double d, char* buf, int precision);

getcwd:getcwd( char *buf,  unsigned long size)

sigemptyset: int sigemptyset(sigset_t *set);

mkdir:mkdir( const char *pathname, int mode)

fexecveat:  int fexecveat(int fd, char *const argv[], char *const envp[]);

ldiv: ldiv_t ldiv(long int numerator, long int denominator);

getgid:DEF_syscall(getgid,0)

snprintf:int snprintf( char *buf, size_t size, const char *fmt, ... );

fdopen:FILE *fdopen(int fd, const char* mode);

mknod:mknod( const char *filename,  umode_t mode,  unsigned dev)

execveat:execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)

closedir:int closedir(DIR *dir);

_strcasecmp:int _strcasecmp(const char*c1,const char*c2,int len);

umask:umask( int mask)

strncasecmp:int strncasecmp(const char*c1,const char*c2,int len);

rt_sigaction:rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)

