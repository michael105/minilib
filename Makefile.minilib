# include this makefile via include Makefile.minilib
# For using it, have a look into Makefile.template
# The different switches are explained and commented there.
# atm, it is better using the script mini-gcc anyways.
# Have to fix this.
#
#if 0
ifdef UNDEF

Copyright (c) 2012-2020 Michael (Misc) Myer, 
misc.myer@zoho.com / www.github.com/michael105
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   the file NOTICE, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   the file NOTICE, this list of conditions and the following disclaimer in 
   the documentation and/or other materials provided with the distribution.
 * Neither the name of the minilib nor the
   names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Michael Myer BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

Some files in the folders headers and contrib have other licensing terms.
Look at the sources.


endif

export PATH := $(PATH):$(MLIBDIR)/contrib

ifndef BUILDDIR
		BUILDDIR=build
endif

ifndef MLIBDIR
		MLIBDIR=minilib/
endif

ifndef OPTFLAG
		OPTFLAG=-O1
endif



UNAME := $(shell uname)

COMMONCFLAGS= $(OPTFLAG) -fno-stack-protector -fdata-sections -fomit-frame-pointer -ffunction-sections -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused -Wno-unused-function -Wall -I$(MLIBDIR) -I$(MLIBDIR)/compat -I$(MLIBDIR)/headers/common -I$(MLIBDIR)/include


ifeq ($(UNAME), Darwin)

ifndef OPTFLAG
		OPTFLAG=-O1
endif

STRIPEXEC = echo

ifeq "$(strip $(STRIP))" "1"
		STRIPEXEC=strip
endif


#colors..
GREEN="\033[00;32m"
RED="\033[00;31m"
YELLOW="\033[01;33m"
BLUE="\033[01;33m"
LBLUE="\033[00;36m"
WHITE="\033[01;37m"
GREY="\033[02;37m"

ifndef NOMLIB
		LDFLAGS=-static
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -nodefaultlibs -static -nostdlib -DOSX -DMLIB -DX64 -fno-builtin -I$(MLIBDIR)/compat -I$(MLIBDIR)/headers/common-links
else
		LDFLAGS=
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -DOSX
endif

else
		#assuming Linux
LINUX=1

ifeq ($(shell uname -m),x86_64)
#$(info X64)
	DEFX=-DLINUX -DX64 -DMLIB -I$(MLIBDIR)/headers/linux_x64 -I$(MLIBDIR)/headers/common -I$(MLIBDIR)/headers/common-links
#CFLAGS=$(COMMONCFLAGS) -Os -nodefaultlibs -static -nostdlib -fno-builtin -DMLIB -DLINUX -DX64
else
  DEFX=-DLINUX -DMLIB
endif

ifeq "$(strip $(INCLUDECOMPATSRC))" "1"
		DEFX := $(DEFX) -DINCLUDECOMPATSRC
endif



LDSCRIPT=,-T$(MLIBDIR)/ldscripts/ld.script
LSCRIPT=-T$(MLIBDIR)/ldscripts/ld.script
#LDSCRIPT=
#LSCRIPT=



ifeq "$(strip $(ONLYTEXT))" "1"
		OTEXT=1
endif

ifdef MAKEPROG
ifeq ($(findstring $(MAKEPROG) ,$(ONLYTEXT)),$(MAKEPROG) )
OTEXT=1
endif
endif

ifdef PROG
ifeq ($(findstring $(PROG) ,$(ONLYTEXT)),$(PROG) )
OTEXT=1
endif
endif


ifdef DEBUG
		OPTFLAG=-g
		DEFX := $(DEFX) -DDEBUG
		undefine OTEXT
		COMMONCFLAGS := $(COMMONCFLAGS) -g
  	STRIPEXEC=echo Debugging config
endif



ifdef OTEXT
$(info ONLYTEXT)
LSCRIPT=-T$(MLIBDIR)/ldscripts/ld.script.onlytext
LDSCRIPT=,-T$(MLIBDIR)/ldscripts/ld.script.onlytext
endif
#$(info Target: LINUX)
	#LDFLAGS=-nostdlib -nodefaultlibs -static -n -s --gc-sections
ifdef DEBUG
	LDFLAGS=-nostdlib -nodefaultlibs --gc-sections -static -n $(LSCRIPT) -nostartfiles -O 2
else
	LDFLAGS=-nostdlib -nodefaultlibs --gc-sections -static -n -s $(LSCRIPT) -nostartfiles -O 2
endif
	#LDFLAGS=-T $(MLIBDIR)/scripts/ld.script -nodefaultlibs --warn-section-align --gc-sections -static -n -s
	#LDFLAGS=-T $(MLIBDIR)/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s

ifeq "$(strip $(GCC))" "tcc"
	CFLAGS=$(COMMONCFLAGS) -static -nostdlib -fno-builtin $(DEFX)
else
ifdef DEBUG
 	CFLAGS=$(COMMONCFLAGS) -nodefaultlibs -static -nostdlib -nostdinc -fno-builtin $(DEFX) -Wl,-nostdlib$(LDSCRIPT),--allow-multiple-definition
else	
	CFLAGS=$(COMMONCFLAGS) -nodefaultlibs -static -nostdlib -nostdinc -fno-builtin $(DEFX) -Wl,-n,-s,--gc-sections,-nostdlib$(LDSCRIPT),--allow-multiple-definition
	#--orphan-handling=discard
endif
endif



endif


ifneq "$(strip $(LINUX))" "1"
	SHRINKELF=0
endif


#lin
#CFLAGS =-Os -Wall -nostdlib -nostdinc -fdata-sections -ffunction-sections -fno-builtin -static
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections -static -fno-builtin -fomit-frame-pointer


#CFLAGS=-Wall -g -nodefaultlibs
# -fomit-frame-pointer führt zu bugs.(?)
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections
#CFLAGS=-Wall -nodefaultlibs

#lin
#LDFLAGS=-T minilib/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s
#LDFLAGS=-T ld.script3 -nodefaultlibs --warn-section-align --gc-sections -static -N -s
#LDFLAGS=-T ld.script -nodefaultlibs --no-define-common --warn-section-align --gc-sections -static -n -s

# --no-define-common schmeisst mbuf raus !??
#  alle Optionen vergrößern den Speicherplatz aufs doppelte??
#LDFLAGS=-g -nodefaultlibs


ifndef LD
LD=ld
endif

ifndef GCC
GCC=gcc
endif


ifdef DEBUG
		undefine SHRINKELF
		LD:= $(LD) -g
endif

ifeq "$(strip $(SHRINKELF))" "1"
		STRIPEXEC=$(MLIBDIR)/tools/shrinkelf
else
		STRIPEXEC=strip
endif


ifdef VERBOSE

$(info $(YELLOW)----- config: -----$(WHITE)) 

$(info Architecture ${UNAME} )

$(info gcc: $(GCC) $(CFLAGS))
$(info ld: $(LD) $(LDFLAGS))
$(info minilib path: $(MLIBDIR))
$(info PATH: $(PATH))
$(info STRIPEXEC: $(STRIPEXEC))
$(info -----)
endif


ifdef MAKEPROG


$(MAKEPROG): $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o
	$(LD) $(LDFLAGS) --allow-multiple-definition -o $(MAKEPROG) $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o
	$(STRIPEXEC) $(MAKEPROG)
	#$(if $(strip $(SHRINKELF)),$(MLIBDIR)/tools/sstrip $(MAKEPROG))
	$(if $(strip $(BINDIR)),cp $(MAKEPROG) $(BINDIR)/$(MAKEPROG))


$(BUILDDIR)/$(MAKEPROG).o: $(MAKEPROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEPROG).o $(MAKEPROG).c

endif


ifdef MAKEOBJ
$(BUILDDIR)/$(MAKEOBJ).o: $(MAKEOBJ).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEOBJ).o $(MAKEOBJ).c
else




ifeq "$(strip $(SINGLERUN))" "1"

$(info Singlerun)


$(PROG): $(PROG).c
	$(if $(strip $(NOINCLUDE)), $(GCC) $(CFLAGS) -o $(PROG) $(PROG).c, ((cat $(PROG).c && gunzip -c $(MLIBDIR)/minilibcompiled.c.gz) | $(GCC) $(CFLAGS) -o $(PROG) -x c - ))
# cat $(PROG).c $(MLIBDIR)/minilibcompiled.c | $(GCC) $(CFLAGS) -o $(PROG) -x c -
	$(STRIPEXEC) $(PROG)
	#$(if $(strip $(SHRINKELF)),$(MLIBDIR)/tools/sstrip $(PROG))
	$(if $(strip $(BINDIR)),cp $(PROG) $(BINDIR)/$(PROG))

else




$(PROG): $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o
	$(foreach FILE,$(OFILES),make MAKEOBJ=$(FILE);)
	$(LD) $(LDFLAGS) --allow-multiple-definition -o $(PROG) $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o $(addprefix $(BUILDDIR)/,$(addsuffix .o,$(OFILES)))
	$(STRIPEXEC) $(PROG)
	#$(if $(strip $(SHRINKELF)),elftrunc $(PROG) $(PROG))
	$(if $(strip $(BINDIR)),cp $(PROG) $(BINDIR)/$(PROG))

endif

$(BUILDDIR)/$(PROG).o: $(PROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(PROG).o $(PROG).c




$(BUILDDIR)/minilib.o: minilib.c 
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/minilib.o minilib.c 


#$(BUILDDIR)/start.o: $(MLIBDIR)/asm/start-osx.S
#	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/start.o $(MLIBDIR)/asm/start-osx.S




rebuild:
	make clean
	make

clean:
	rm build/*.o || echo No build dir
	rm $(PROG) || echo


endif

ifdef UNDEF
#endif






#if 0
endif
#endif




