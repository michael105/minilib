:hardbreaks:


README (this file) 
link:doc/mini-gcc.rst[mini-gcc]
link:./doc/make.rst[makefile]
link:doc/about.textile[about]
link:doc/mlfunctions-shortref.asc[functions]
link:doc/minilib.md[functions shortref]



 README
--------

 minilib
~~~~~~~~~

 A tiny c system library, headeronly, "singlefile", 
intended for static linking. 
151 Bytes for "Hello World", 
compiled with the standard gcc toolchain. 

[NOTE - Branches]

____
minilib development is separated into several branches;
this is devel.
In master the assembled headerfile minilib.h,
mini-gcc, documentation and config files reside.
If you'd like to build minilib.h yourself, 
check the implementation or contribute some work,
it's best checking out the branch devel.

warning. Not all things stored in devel are supposed to build correctly, 
or work the way intended.
e.g., ports/sash, where I did work the last days, does compile,
but crashes ungratefully. I'm looking for the problem.

The build scripts, single source files, and so on stay there.
Binding and compiling with minilib is the same process with all branches,
described in Section [Usage].
(https://github.com/michael105/minilib/tree/devel)
____   


====
 Copyright (c) 2012-2020 Michael (Misc) Myer, 
misc.myer@zoho.com / www.github.com/michael105
 BSD License.
Static linking is permitted.
See bottom for the BSD License. 
Some sourcefiles in the folders headers and contrib
have other licensing terms, 
which are in my opinion compatible to the BSD-Licenses.
Please look at the sources. 
====


Summary
~~~~~~~~

****
Minilib aims to be an incomplete libc replacement,
single header only, as simple and small as possible, KISS,
but supplying ANSI-C, the most important tools of libc,
and some addons (Which don't add bloat and are optional).

The build can be customized by define switches,
the preprocessor parses only the explicitely enabled sources. 

The main targets are simplicity and small memory footprint.
Security is in mind as well. Having a small codebase
might be of most importance in this context; the sources can be read through
and checked. (As opposed to, e.g., glibc, 
where reading the sources is highly theoretical.))
****

There are checks for buffer overflows built in.

Although the header file is parsed and compiled for every
source file, this takes only fractions of a second
at my development system. (amd Turion 2Ghz)

----
>  ~/prog/minilib $  time ./mini-gcc --ldscript onlytext -o hello hello.c
 ./mini-gcc -o hello hello.c  0.06s user 0.05s system 92% cpu 0.116 total
>  ~/prog/minilib $  ./tools/shrinkelf hello
 stripping: hello
>  ~/prog/minilib $  ls -l hello
 -rwxr-xr-x 1 micha micha 185 Aug 15 16:16 hello
----

 About
~~~~~~~

Minilib evolved out of some assembler experiments,
where I saw how tiny executables can be, if not linked with glibc.
With some more fiddling I got a C "Hello World!" binary with 151 bytes,
compiled and linked with the standard gcc makechain.
This is more than 3,000 times less than a hello world program 
linked statically with glibc,
which shows up with 504kB on my system. (5.4kB linked dynamic)

(On OSX there are some limits, 
files with less than 4k aren't executed, 
so that's hello world's size there..)

minilib saves a lot of startup overhead,
no linker needed to bind the shared libraries,
no lookup tables, less memory fraction;
also (small) binaries might often fit into a single harddisk block;
opposed to a binary and several shared libraries.

This gives a overall more responsive system.

Just for fun, but this minilib also beats klibc, dietlib and musl 
in the matter of hello world's size..

----
(Linux 32bit:)
musl: 7.6k
dietlibc: 672
klibc: 367
minilib: 151
----

(On Linux 64bit I didn't check the other libraries,
 but the bigger registers cost a few bytes:
 hello world counts here 185 Bytes.)



Being in syscalls, linker scripts and gcc optimization hell,
I realized, that after I got over the fundamental problems adding 
more standard c routines would be cheap.
So I started to port some more little c tools to minilib,
adding more functionality to minilib as well.

Since I hate todays usual overhead in modern libraries,
resulting in the unbelievable size of hundreds of Megabytes 
for simple applications as well as minutes for just starting them up,
I also tried to optimize functions like printf where sensible.

The focus is on size, however.
You are able to customize the compilation of the library
and define just only the functions you need;
if you are in need of, e.g., a more speed optimized strcmp,
just don't define the according switch and rule your own.


This whole project exaggerated out of fun.

I decided to publish this anyway,
since I hope this could be of some use and there's too much on 
my harddisk lying and dying.



 Build dependencies
~~~~~~~~~~~~~~~~~~~~

* Needs:
gcc or tcc, bash, sed

* Optionally:
gzip, sort (might be already on every unix related system)

* Rebuilding minilib:
	make, perl

* generate documentation:
  asciidoc, rst2html5, markdown


Usage
~~~~~~

Atm, it might be easiest to have a look into the directory examples,
and the Makefile as well as the sources of the different versions of 
"hello world" there.


There are several possibilities, they are explained in USAGE.asc (Todo, I'm sorry..)

Easiest route: use the supplied script mini-gcc, with the argument --autoconf.

`mini-gcc --autoconf -o hello hello.c`

(or, for Makefiles utilizing the CC environmental setting:))

`export CC=mini-gcc --autoconf`

This is save only for projects, consisting of single source files.

mini-gcc will create a minilib config within 'minilib.conf', parse this config 
and pipe the resulting define flags to gcc.

The source file is parsed and every function used enabled in the minilib config.
However, e.g., conversions used within fprintf aren't recognized,
and therefore not going to be compiled. (itodec, atodec, for example)

So, in most cases it might be better to create a config file, 
edit the config and then use this config file:

`mini-gcc --genconf hello.mconf hello.c` 
`vi hello.mconf` (the config file is self documented)
`mini-gcc --config hello.mconf -o hello hello.c`

In both cases, there's no changing of the source files needed.
"minilib.h", and the config switches are piped to gcc;
the compile and linker flags are passed from mini-gcc.
The standard libc headers are prevented from being included
by defining the according headerguards.


When compiling without --autoconf or --config, you have to 
include minilib.h in all sourcefiles, needing definitions from minilib.

You are able to define functions you need yourself, before you include minilib.h.
Example: #define mini_write
(Or) use the config framework, implemented within the script mini-gcc.

The config framework has the big advantage of raising syntax errors for e.g. mistypes,
so instead of having to look for the mistype, it's shown up even before the compile.

In one of your sourcefiles you also have to define "#define mini_INCLUDESRC",
before the "include "minilib.h" directive.

Either use the supplied Makefile.template by copying it;
or export CC via 'export "CC=[path to minilib]/mini-gcc [--config configfile.conf]"'
(There are a lot of compile options needed in order to prevent gcc from including 
the standard libraries, but you can also read the options out of mini-gcc,
if you'd like to. I just guess, having the config options all in a central place
is better, e.g. in the matters of platform portability.)


TODO: rewrite this section.

done..
..
Cross your fingers .. Get some strange errors .. shout out, loudly .. 
.. and open an issue here at github, please




 State
~~~~~~~

ATM, most possibly neither the OSX nor the linux 32bit port will compile.
I'm just about to finish some things at Linux amd64.
Then I'll be able to check for osx and Linux x32.

----

* 2020/07
	Ansi C89 is done to about 98%.
	Not counting floating math and localization functions,
	which are out of the scope of minilib.
	The compat headers might be more or less broken,
	they aren't needed for the usage of minilib and just there for convenience.
	Possibly I'm going to remove them.

* 2020/05/23
  Rewriting the makefiles. (having both options,
	either use mini-gcc or minilib.h / makefile.template, makefile.minilib)

	Pushing forward to ansi-c89 compatibility.
	linux x64 only, atm.


* 2020/01/15
  Finally the build system gets more consistent.
  The whole minilib is now included within the script mini-gcc.
  So, fetching just this script is enough to build and link with minilib.
  Documentation might also be better to read,
  implemented functions are listed in link:mlfunctions-shortref.asc
  
  There are still some functions left, but it's close (around 80%) to ansi-C89 conformance.
  (Without mathematic functions)
  There are, however, already specialized mathematics libraries out there,
  so these routines don't have a high priority.
  To the posix-c specification, there might be around 50% missing.
  Atm, I'm porting, sometimes writing, basic unix tools to minilib.
  Many of them depend on posix-c (or have the same functionality),
  so I'm adding those functions extending ansi-c to minilib as well.

  Uh. And a happy new year, everyone! ;)


* 2019/08/27
  Documenting.
  Preparing a new release, amd64 for now.
  The copied code from musl for opendir, readdir and family -
  Obviously bloating. 
  (there's a fixed buffer for the entry names of each dirent, size 2kB. 
  Not tolerable.)
  So, todo: rewrite.
  Also todo: write something like config groups.
  e.g.: fprintf might in most cases also enable atoi and itodec. (%d)
  Maybe make the config process more verbose.
  I guess, for now it's better to clean up the master tree and do the release.
  

* 2019/08
  restructured the build system.
  wrote mini-gcc, a wrapper around gcc.
  Close to be a dropin replacement for glibc,
  without the need of changing any sources when
  compiling with mini-gcc and minilib 
  instead of glibc.


* 2019/04/02
  Overall, minilib gets into a more stable state.
  The build framework as well as the config framework
  look good to me. And it's generic enough to don't get into trouble,
  when there something has to be changed.

  Ansi C (C89) / is about 75% done. Some functions (fopen/fclose) 
   only trivially tested.
  
  Atm, I'm working on getting more tools of the 'suckless linux base' 
  and the 'minutils' compiled with minilib.
  Besides, I'm fiddling around with some security and performance related 
  fundamental matters. Stack and elf section related; 
  but these questions are optimizations and no fixes.
  (Or, to be more exact, these questions are about 
   fixes of existing security holes.)
  


* 2019/03/28
  Restructuring done,
  config system written.

  The documentation about the build process isn't on state.
  The examples might be self explaining,
  but I have to rewrite the docs.



* 2019/03/19: 
  Ok. about half of ansi c is done.
  some important functions missing (free, e.g)
  but close. Restructuring nearly done.
  Overall - quite close to a first real release.
  Yet I could also maintain backward compatibility.
  (Important to me, since I'm using this lib for 
  nearly 7 years myself..)


* 01/2019 Got minilib running on OSX (10.11, x64),
  enabling static linking for small tools.

  Anyways, being able to link small tools statically 
  on osx is a great thing. 
  This doesn't work with the native libs,
  and there are reasons, you might want to link statically.
  
  Hacking the OS, or executing security critical code,
  for example. If the kernel has been hacked, well...
  But statically linking prevents from lib injection.
  BUT PLEASE BE AWARE, minilib itself is neither checked nor written
  for security. Although there are some tests, e.g. for buffer overflows,
  I cannot guarantee any defined functionality.
  But I worked thoroughly, and I'm using this lib myself for several years.

----

Minilib aims to be an incomplete libc replacement,
as simple and small as possible, KISS!!!,
but supplying ANSI-C, the most important tools of libc,
some addons (Which don't add bloat..).
Some syscall wrappers.

One reason to use syscall wrappers is type safety.
(The kernel doesn't know about type safety,
 he simply grabs the arguments he's fed, so, ..) 

Minilib shall be portable. 
For now there is Linux x86_64, x86_32,
and OSX Darwin.

Android is targeted. 
BSD is targeted. 

Minilib should stay tiny.
Ideally minilib is going to supply glibc compatible
headers. (sort of)


 Warning
~~~~~~~~~

This library is not complete.
I'm integrating the suckless linux tools now,
sort of a soothing puzzle.

If you have no special interest in using minilib,
better head for something like musl, dietlibc, klib, ...

🔨 Happy hacking 🔨



 Development
~~~~~~~~~~~~~

Especially adding more syscalls is easy.

Look into include/lseek.h for examples.
As well as include/syscall_stubs.h.
(That's the file, where all wrappers are defined)

Addendum: Having written a build framework, 
 	which already rewrites the system call defines;
	I still have to document this.

Please, open an issue at github for bugs or bugfixes.
(github.com/michael105/minilib)

Also, the standards are quite a mess.
I'm trying to figure out something sensible,
to work with Ansi-C / Posix-C in a compatible way.


 Further Readings
~~~~~~~~~~~~~~~~~~

-> https://elinux.org/System_Size  -  Embedded Linux and size

-> http://muppetlabs.com/~breadbox/software/tiny/teensy.html  -  About creating tiny binaries

-> https://olimex.wordpress.com/2012/04/04/unix-on-pic32-meet-retrobsd-for-duinomite/ 
   -  running bsd with 128K RAM (!)

-> https://www.mkompf.com/cplus/cliblist.html  -  Ansi standard c

-> https://www.etalabs.net/compare_libcs.html  -  comparison of c/POSIC standard library implementations


 See Also
~~~~~~~~~~

(google also..)

tiny c lib implementations

  klibc
  bionic
  musl
  uLibc
  dietlibc
  minibase
	embedded artistry libc


 Notes
~~~~~~~

"It's sometimes smarter to stay special,
 although in this case this means the opposite"

 Stumbled upon this comment of myself today,
 regarding my (strangely simplicistic) malloc implementation.
 Which fit's quite well to the minilib in whole.
 Being smart with utf-anything, don't know which 
 bordercase and so on - 
 is sometimes overall not smart.

 So, having a 500kB "hello world" like with glibc, 
 is not soo smart. Especially when it needs to be 
 compiled again at the target, so most bordercases
 aren't of any interest.

 151 Bytes, as accomplished with minilib - 
 There's still some overhead. 
 But it's another dimension. 




----------------------------------------------------
    Michael (Misc) Myer, 2012-2020
    misc.myer@zoho.com www.github.com/michael105
    (my "programming enthusiastic persona"..)
----------------------------------------------------


------------------------------------------------------------
------------------------------------------------------------



 Copyright (c) 2012-2020, Michael (Misc) Myer 
(misc.myer@zoho.com, www.github.com/michael105)
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
   the file NOTICE, this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
   the file NOTICE, this list of conditions and the following disclaimer in 
   the documentation and/or other materials provided with the distribution.
 * Neither the name of the minilib nor the
   names of its contributors may be used to endorse or promote products
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL Michael Myer BE LIABLE FOR ANY
DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.






