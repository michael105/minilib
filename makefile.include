# include this makefile via include minilib/makefile

ifndef BUILDDIR
		BUILDDIR=build
endif

UNAME := $(shell uname)

$(info Architecture: ${UNAME} )

ifeq ($(UNAME), Darwin)

$(info Target: OSX)

COMMONCFLAGS= -Os -fdata-sections -fomit-frame-pointer -ffunction-sections -Wno-unused-variable -Wno-unused-but-set-variable -Wall

ifndef NOMLIB
		LDFLAGS=-static
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -nodefaultlibs -static -nostdlib -DOSX -DMLIB -DX64 -fno-builtin
else
		LDFLAGS=
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -DOSX
endif

else
		#assuming Linux

$(info Target: LINUX)
	LDFLAGS=-T ld.script -nodefaultlibs --no-define-common --warn-section-align --gc-sections -static -n -s
	#LDFLAGS=-T minilib/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s
	CFLAGS=$(COMMONCFLAGS) -Os -nodefaultlibs -static -fno-builtin

endif



#lin
#CFLAGS =-Os -Wall -nostdlib -nostdinc -fdata-sections -ffunction-sections -fno-builtin -static
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections -static -fno-builtin -fomit-frame-pointer


#CFLAGS=-Wall -g -nodefaultlibs
# -fomit-frame-pointer führt zu bugs.(?)
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections
#CFLAGS=-Wall -nodefaultlibs

#lin
#LDFLAGS=-T minilib/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s
#LDFLAGS=-T ld.script3 -nodefaultlibs --warn-section-align --gc-sections -static -N -s
#LDFLAGS=-T ld.script -nodefaultlibs --no-define-common --warn-section-align --gc-sections -static -n -s

# --no-define-common schmeisst mbuf raus !??
#  alle Optionen vergrößern den Speicherplatz aufs doppelte??
#LDFLAGS=-g -nodefaultlibs


ifndef LD
LD=ld
endif

ifndef GCC
GCC=gcc-8
endif


$(info config:)
$(info gcc call: $(GCC) $(CFLAGS))
$(info ld call: $(LD) $(LDFLAGS))



ifdef MAKEPROG

$(MAKEPROG): $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o
	$(LD) $(LDFLAGS) -o $(MAKEPROG) $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o


$(BUILDDIR)/$(MAKEPROG).o: $(MAKEPROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEPROG).o $(MAKEPROG).c

endif

$(info Makeobj: $(MAKEOBJ))

ifdef MAKEOBJ
$(BUILDDIR)/$(MAKEOBJ).o: $(MAKEOBJ).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEOBJ).o $(MAKEOBJ).c
else


ifdef SINGLERUN
$(PROG): $(PROG).c minilib.h
	$(GCC) $(CFLAGS) -o $(PROG) $(PROG).c minilib.c minilib/asm/start-osx.S
else

$(PROG): $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o
	$(foreach FILE,$(OFILES),make MAKEOBJ=$(FILE);)
	$(info Makesj: $(OFILES))
	$(info ddd $(addprefix $(BUILDDIR)/,$(addsuffix .o,$(OFILES))))
	$(LD) $(LDFLAGS) -o $(PROG) $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o $(addprefix $(BUILDDIR)/,$(addsuffix .o,$(OFILES)))
	strip $(PROG)

endif

$(BUILDDIR)/$(PROG).o: $(PROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(PROG).o $(PROG).c




$(BUILDDIR)/minilib.o: minilib.c minilib.h $(BUILDDIR)/start.o
	cd minilib/asm && $(MAKE) 
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/minilib.o minilib.c 


	#todo: $(BUILDDIR) start for linux
$(BUILDDIR)/start.o: minilib/asm/start-osx.S
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/start.o minilib/asm/start-osx.S




re$(BUILDDIR):
	make clean
	make

clean:
	#rm $(BUILDDIR)/*.o
	cd minilib/asm && $(MAKE) clean


endif




