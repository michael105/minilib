# include this makefile via include minilib/makefile

ifndef BUILDDIR
		BUILDDIR=build
endif

ifndef MLIBDIR
		MLIBDIR=minilib/
endif

UNAME := $(shell uname)

ifeq ($(UNAME), Darwin)

ifndef OPTFLAG
		OPTFLAG=-O1
endif

COMMONCFLAGS= $(OPTFLAG) -fno-stack-protector -fdata-sections -fomit-frame-pointer -ffunction-sections -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-const-variable -Wno-unknown-warning-option -Wall -I $(MLIBDIR)


#ifndef GREEN
#colors..
GREEN="\033[32m"
RED="\033[31m"
YELLOW="\033[01;33m"
BLUE="\033[01;33m"
WHITE="\033[01;37m"

YELLOW := $(shell echo $(YELLOW))
WHITE := $(shell echo $(WHITE))
#endif


ifndef NOMLIB
		LDFLAGS=-static
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -nodefaultlibs -static -nostdlib -DOSX -DMLIB -DX64 -fno-builtin
else
		LDFLAGS=
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -DOSX
endif

else
		#assuming Linux

$(info Target: LINUX)
	LDFLAGS=-T ld.script -nodefaultlibs --no-define-common --warn-section-align --gc-sections -static -n -s
	#LDFLAGS=-T minilib/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s
	CFLAGS=$(COMMONCFLAGS) -Os -nodefaultlibs -static -fno-builtin -DMLIB

endif


#lin
#CFLAGS =-Os -Wall -nostdlib -nostdinc -fdata-sections -ffunction-sections -fno-builtin -static
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections -static -fno-builtin -fomit-frame-pointer


#CFLAGS=-Wall -g -nodefaultlibs
# -fomit-frame-pointer führt zu bugs.(?)
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections
#CFLAGS=-Wall -nodefaultlibs

#lin
#LDFLAGS=-T minilib/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s
#LDFLAGS=-T ld.script3 -nodefaultlibs --warn-section-align --gc-sections -static -N -s
#LDFLAGS=-T ld.script -nodefaultlibs --no-define-common --warn-section-align --gc-sections -static -n -s

# --no-define-common schmeisst mbuf raus !??
#  alle Optionen vergrößern den Speicherplatz aufs doppelte??
#LDFLAGS=-g -nodefaultlibs


ifndef LD
LD=ld
endif

ifndef GCC
GCC=gcc-8
endif

ifdef VERBOSE
$(info -----)
$(info $(YELLOW)config: $(WHITE))

$(info Architecture ${UNAME} )

$(info gcc: $(GCC) $(CFLAGS))
$(info ld: $(LD) $(LDFLAGS))
$(info minilib: $(MLIBDIR))
$(info ---)
endif


ifdef MAKEPROG

$(MAKEPROG): $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o
	$(LD) $(LDFLAGS) -o $(MAKEPROG) $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o
	strip $(MAKEPROG)


$(BUILDDIR)/$(MAKEPROG).o: $(MAKEPROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEPROG).o $(MAKEPROG).c

endif


ifdef MAKEOBJ
$(BUILDDIR)/$(MAKEOBJ).o: $(MAKEOBJ).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEOBJ).o $(MAKEOBJ).c
else


ifeq "$(strip $(SINGLERUN))" "1"

 #ifeq "$(SINGLERUN)" "1"

$(info Singlerun)

$(PROG): $(PROG).c
	$(GCC) $(CFLAGS) -o $(PROG) $(PROG).c ../minilibcombined.c
	#$(GCC) $(CFLAGS) -o $(PROG) $(PROG).c $(MLIBDIR)/minilib.c $(MLIBDIR)/asm/start-osx.S
	strip $(PROG)

else

$(PROG): $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o
	$(foreach FILE,$(OFILES),make MAKEOBJ=$(FILE);)
	$(info Makesj: $(OFILES))
	$(info ddd $(addprefix $(BUILDDIR)/,$(addsuffix .o,$(OFILES))))
	$(LD) $(LDFLAGS) -o $(PROG) $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o $(addprefix $(BUILDDIR)/,$(addsuffix .o,$(OFILES)))
	strip $(PROG)

endif

$(BUILDDIR)/$(PROG).o: $(PROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(PROG).o $(PROG).c




$(BUILDDIR)/minilib.o: $(MLIBDIR)/minilib.c minilib.h $(BUILDDIR)/start.o
	cd $(MLIBDIR)/asm && $(MAKE) 
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/minilib.o $(MLIBDIR)/minilib.c 


	#todo: $(BUILDDIR) start for linux
$(BUILDDIR)/start.o: $(MLIBDIR)/asm/start-osx.S
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/start.o $(MLIBDIR)/asm/start-osx.S




rebuild:
	make clean
	make

clean:
	rm build/*.o || echo No build dir
	rm $(PROG) || echo
	cd $(MLIBDIR)/asm && $(MAKE) clean


endif




