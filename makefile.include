# include this makefile via include minilib/makefile

export PATH := $(PATH):$(MLIBDIR)/contrib

ifndef BUILDDIR
		BUILDDIR=build
endif

ifndef MLIBDIR
		MLIBDIR=minilib/
endif

ifndef OPTFLAG
		OPTFLAG=-O1
endif

UNAME := $(shell uname)

COMMONCFLAGS= $(OPTFLAG) -fno-stack-protector -fdata-sections -fomit-frame-pointer -ffunction-sections -Wno-unused-variable -Wno-unused-but-set-variable -Wno-unused-const-variable -Wno-unknown-warning-option -Wall -I$(MLIBDIR) -I$(MLIBDIR)/compat


ifeq ($(UNAME), Darwin)

ifndef OPTFLAG
		OPTFLAG=-O1
endif


#colors..
GREEN="\033[00;32m"
RED="\033[00;31m"
YELLOW="\033[01;33m"
BLUE="\033[01;33m"
LBLUE="\033[00;36m"
WHITE="\033[01;37m"
GREY="\033[02;37m"

ifndef NOMLIB
		LDFLAGS=-static
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -nodefaultlibs -static -nostdlib -DOSX -DMLIB -DX64 -fno-builtin -I$(MLIBDIR)/compat
else
		LDFLAGS=
		#CFLAGS= -Wall -nodefaultlibs -static -nostdlib -DOSX
		CFLAGS=$(COMMONCFLAGS) -DOSX
endif

else
		#assuming Linux
LINUX=1

ifeq ($(shell uname -m),x86_64)
#$(info X64)
	DEFX=-DLINUX -DX64 -DMLIB -I$(MLIBDIR)/headers/linux_x64 -I$(MLIBDIR)/headers/common
#CFLAGS=$(COMMONCFLAGS) -Os -nodefaultlibs -static -nostdlib -fno-builtin -DMLIB -DLINUX -DX64
else
  DEFX=-DLINUX -DMLIB
endif


LSCRIPT=-T$(MLIBDIR)/scripts/ld.script

ifeq "$(strip $(ONLYTEXT))" "1"
		LSCRIPT=-T$(MLIBDIR)/scripts/ld.script.onlytext
endif

#$(info Target: LINUX)
	#LDFLAGS=-nostdlib -nodefaultlibs -static -n -s --gc-sections
	LDFLAGS=-nostdlib -nodefaultlibs --gc-sections -static -n -s $(LSCRIPT) -nostartfiles

	#LDFLAGS=-T $(MLIBDIR)/scripts/ld.script -nodefaultlibs --warn-section-align --gc-sections -static -n -s
	#LDFLAGS=-T $(MLIBDIR)/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s

ifeq "$(strip $(GCC))" "tcc"
	CFLAGS=$(COMMONCFLAGS) -static -nostdlib -fno-builtin $(DEFX)
else
	CFLAGS=$(COMMONCFLAGS) -nodefaultlibs -static -nostdlib -nostdinc -fno-builtin $(DEFX) -Wl,-n,-s,--gc-sections,-nostdlib,$(LSCRIPT)
endif



endif


ifneq "$(strip $(LINUX))" "1"
	ELFTRUNC=0
endif


#lin
#CFLAGS =-Os -Wall -nostdlib -nostdinc -fdata-sections -ffunction-sections -fno-builtin -static
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections -static -fno-builtin -fomit-frame-pointer


#CFLAGS=-Wall -g -nodefaultlibs
# -fomit-frame-pointer führt zu bugs.(?)
#CFLAGS=-Os -Wall -nodefaultlibs -fdata-sections -ffunction-sections
#CFLAGS=-Wall -nodefaultlibs

#lin
#LDFLAGS=-T minilib/scripts/ld.script.onlytext -nodefaultlibs --gc-sections -static -N -s
#LDFLAGS=-T ld.script3 -nodefaultlibs --warn-section-align --gc-sections -static -N -s
#LDFLAGS=-T ld.script -nodefaultlibs --no-define-common --warn-section-align --gc-sections -static -n -s

# --no-define-common schmeisst mbuf raus !??
#  alle Optionen vergrößern den Speicherplatz aufs doppelte??
#LDFLAGS=-g -nodefaultlibs


ifndef LD
LD=ld
endif

ifndef GCC
GCC=gcc
endif



ifdef VERBOSE

$(info $(YELLOW)----- config: -----$(WHITE)) 

$(info Architecture ${UNAME} )

$(info gcc: $(GCC) $(CFLAGS))
$(info ld: $(LD) $(LDFLAGS))
$(info minilib: $(MLIBDIR))
$(info PATH: $(PATH))
$(info -----)
endif


ifdef MAKEPROG


$(MAKEPROG): $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o
	$(LD) $(LDFLAGS) -o $(MAKEPROG) $(BUILDDIR)/$(MAKEPROG).o $(BUILDDIR)/minilib.o $(BUILDDIR)/start.o
	strip $(MAKEPROG)
	$(if $(strip $(ELFTRUNC)),elftrunc $(MAKEPROG) $(MAKEPROG))
	$(if $(strip $(BINDIR)),cp $(MAKEPROG) $(BINDIR)/$(MAKEPROG))


$(BUILDDIR)/$(MAKEPROG).o: $(MAKEPROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEPROG).o $(MAKEPROG).c

endif


ifdef MAKEOBJ
$(BUILDDIR)/$(MAKEOBJ).o: $(MAKEOBJ).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(MAKEOBJ).o $(MAKEOBJ).c
else


ifeq "$(strip $(SINGLERUN))" "1"

 #ifeq "$(SINGLERUN)" "1"

$(info Singlerun)

$(PROG): $(PROG).c
	$(if $(strip $(NOINCLUDE)), $(GCC) $(CFLAGS) -o $(PROG) $(PROG).c, ((cat $(PROG).c && gunzip -c $(MLIBDIR)/minilibcombined.c.gz) | $(GCC) $(CFLAGS) -o $(PROG) -x c - ))
# cat $(PROG).c $(MLIBDIR)/minilibcombined.c | $(GCC) $(CFLAGS) -o $(PROG) -x c -
# $(GCC) $(CFLAGS) -o $(PROG) $(PROG).c $(MLIBDIR)/minilib.c $(MLIBDIR)/asm/start-osx.S
	strip $(PROG)
	$(if $(strip $(ELFTRUNC)),elftrunc $(PROG) $(PROG))
	$(if $(strip $(BINDIR)),cp $(PROG) $(BINDIR)/$(PROG))

else

$(PROG): $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o
	$(foreach FILE,$(OFILES),make MAKEOBJ=$(FILE);)
	$(LD) $(LDFLAGS) -o $(PROG) $(BUILDDIR)/$(PROG).o $(BUILDDIR)/minilib.o $(addprefix $(BUILDDIR)/,$(addsuffix .o,$(OFILES)))
	strip $(PROG)
	$(if $(strip $(ELFTRUNC)),elftrunc $(PROG) $(PROG))
	$(if $(strip $(BINDIR)),cp $(PROG) $(BINDIR)/$(PROG))

endif

$(BUILDDIR)/$(PROG).o: $(PROG).c
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/$(PROG).o $(PROG).c




$(BUILDDIR)/minilib.o: minilib.c minilib.h
	cd $(MLIBDIR)/asm && $(MAKE) 
	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/minilib.o minilib.c 


	#todo: $(BUILDDIR) start for linux
#$(BUILDDIR)/start.o: $(MLIBDIR)/asm/start-osx.S
#	$(GCC) $(CFLAGS) -c -o $(BUILDDIR)/start.o $(MLIBDIR)/asm/start-osx.S




rebuild:
	make clean
	make

clean:
	rm build/*.o || echo No build dir
	rm $(PROG) || echo
	cd $(MLIBDIR)/asm && $(MAKE) clean


endif




