So, here I'm going to explain the structure of the source,
as well as the "build system".


ATM, notes to me:

(If you have any thoughts, 
 please either open an issue, 
 or drop me a mail. Thanks)


compat headers:
 in folder "compat".
 are there, to be a drop in replacement for glibc in simple cases.
   compile-switch INCLUDESRC:
	   Include the sources into the headers.
		 (advantage: just compile with -I/minilib -DMLIB -D..
		  disadvantage: can lead to double defines, if several sourcefiles.)
		 possible solution: don't include sources.	
		  instead compile minilib.o
			 also possible: try to link. Grep errors for undefined functions.
			   enable them in the build of minilib.
				 compile minilib and link.


  shall minilib really be a dropin replacement?..


rename include to minilib.(?) Yes.
 headers/arch : don't use -I . 
   Instead include in the source files, put swictches there. 
	 minilib should be compileable just by including minilib.h
	   so, there would be: gcc -DMLIB -DX64 
		 #define ML_start
		 #define ML_INCLUDESRC
		 #define ML_printf
		 #include "minilib.h"

		 or, better:
		 in minilib.h:
		 #define ML_start
		 #define ML_printf
		 #define ML_INCLUDESRC

		 and include minilib.h

		 when the sources shall be "splitted":
		  //#define ML_INCLUDESRC in minilib.h

			in minilib.c:
			#define ML_INCLUDESRC 
			#include "minilib.h"

			..same with the compat headers.
			 (Although this might lead to some bloat.
			  But it's the simplest way, and the smallest fence for someone new)

		just have to sort out, what bloats minilib just now.




