
  Howto .. in short
====================


If you'd like to try this minilib,
there are two ways:


1. Using the "released" (pre-released..) bundled files "minilib.h" and "mini-gcc"
===

	Download minilib.h from the branch "release".

   wget https://raw.githubusercontent.com/michael105/minilib/release/minilib.h


  download hello-combined.c
  (source attached below, with explanations..)
    
	wget https://raw.githubusercontent.com/michael105/minilib/release/hello-combined.h




	The tool "elfshrink" out of the folder minilib/tools brings this further down, now 185 Bytes here.



2. Obviously, 1. Involves changing existing sourcefiles.
  There's also the possibility to download the compat-headers.
	These are intended to get included instead of the libc headers;
	so it's possible to compile existing sources without changes.

	At the moment this includes 3. cloning the (master) git - 
	 - these headers aren't in the release branch yet.



3. Clone the git's master branch. 
===

	In the branch "release", the minilib sources are bundled within minilib.h.

 	In the branch "master", minilib.h contains only the different include directives,
	as well as the compile switches needed to configure the build of the minilib.
	
	There's no difference, which of both files (release or master) you include;
	besides it might be nearly impossible to track problems down within
	the huge bundled header minilib.h of the branch release.

	So, in order to clone the git of minilib:

git clone https://github.com/michael105/minilib.git minilib

  -> this will build the folder minilib and download the sources of minilib into it.

	Either export the environmental variable CC,
	so the wrapper script mini-gcc is going to be used by existing makefiles.
	(When they take care of the environmental variable CC)

export CC="path-to-minilib/mini-gcc"

	or call the wrapper mini-gcc yourself, 
	instead of gcc.

  (e.g.)
path-to-minilib/mini-gcc -o hello hello.c

___________


 The configuration of minilib: 
=================================

  Which functions and definitions of minilib are going to be built
	can be configured at compile time.
	This way it's possible to get the compiled binaries as small as possible.

	There are mainly three ways.

	- including the compat headers, 
	  the correspondig functions are automatical configured to be built.
		That obviously will possibly build unneccessary options into
		the resulting binary, like (e.g.) a too big buffer.

	- Via #define 
	  The attached example (hello.c) shows this option.
		All options, defined before the inclusion of minilib.h,
		are going to be built.








XXX TODO: rewrite docu below..

copy minilib/Makefile.template ./Makefile

  (edit Makefile. set "PROG" to your program's name)

copy minilib/minilib.conf ./
  
  (edit minilib.conf and uncomment functions, you need.
   Only functions, you define to be build in minilib.conf
   will be included)



-- create/update minilib.conf.h with mini-gcc --config minilib.conf
	
TODO: Update docu



add the lines below to you source(s)

#include "minilib.conf.h"
#define INCLUDESRC
#include "minilib/minilib.h"

make

	(Optionally, linux 64bit only for now) 

	  cd tools; make; cd ..
		./tools/shrinkelf hello-combined




=======================================
file:    hello-combined.c
=======================================

  // build start, the entry point for the OS
#define mini_start

  // define and build the function "write"
#define mini_write

 // build on OSX ( atm I can't check whether 32bit linux works )
#define OSX

 // build with 64bit
#define X64

 // include definitions as well as the sources.
#define INCLUDESRC

 // Only functions, you define before, will be built.
#include "minilibcompiled.h"

int main(){
		write(stdout, "Hello world!\n", 13);
		return(0);
}


