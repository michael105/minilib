 implemented functions
=======================

short ref, links to source files.

Only functions defined are going to be built.

To define them, either do (for, e.g. puts) `#define mini_puts`
before you include minilib.h

Or, use the config script.: `mini_puts`

Some functions define other functions, these will be listed in the line,
starting with `Define:`


An example, using the scripting config, is given below:
(miniputs.c)
----
#if 0
mini_start
mini_puts

LDSCRIPT text_and_bss
INCLUDESRC
shrinkelf

return
#endif

int main(){
  puts("Hello, world!");
  return(0);
}
----

compile with ./mini-gcc --config miniputs.c -o miniputs miniputs.c

(what compiles to an annoying size of 251 Bytes here. Something again bloats.
replacing the puts with writes, there still are 208 Bytes. This used to
be 151 Bytes. Have to sort this out.)

:toc:






 ctype.h
---------

isprint::

  static inline int __attribute__((always_inline)) isprint(const char c);
 +
  (link:../include/isprint.h[../include/isprint.h] l.8) manpage: link:manpages/locale/isprint.3.rst[isprint] +


isspace::

  int isspace(int c);
 +
  (link:../src/isspace.c[../src/isspace.c] l.6) manpage: link:manpages/locale/isspace.3.rst[isspace] +




 declarations.h
----------------

dup3::

  dup3(int a1, int a2, int a3)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.53) manpage: link:manpages/gen/dup3.3.rst[dup3] +


fstat::

  fstat(int a1,struct stat* a2)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.47) manpage: link:manpages/sys/stat.2.rst[fstat] +


getcwd::

  getcwd(char *buf,long size)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.55) manpage: link:manpages/gen/getcwd.3.rst[getcwd] +


getdents::

  getdents( unsigned int fd, struct dirent *direntry, unsigned int count )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.39) manpage: link:manpages/sys/getdirentries.2.rst[getdents] +


gettimeofday::

  gettimeofday( struct timeval *a1, struct timezone *a2)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.28) manpage: link:manpages/sys/gettimeofday.2.rst[gettimeofday] +


mprotect::

  mprotect( POINTER *a1, POINTER a2, int a3 )
 +
 Returns: *a1 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.32) manpage: link:manpages/sys/mprotect.2.rst[mprotect] +


stat::

  stat(const char* filename,struct stat* a2)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.48) manpage: link:manpages/sys/stat.2.rst[stat] +


uname::

  uname(struct old_utsname *name )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.37) manpage: link:manpages/gen/uname.3.rst[uname] +




 dirent.h
----------

closedir::

  int closedir(DIR *dir);
 +
  Defines: free +
 (link:../src/dirent/closedir.c[../src/dirent/closedir.c] l.6) manpage: link:manpages/gen/directory.3.rst[closedir] +


opendir::

  DIR *opendir(const char *name);
 +
  Defines: open close malloc +
 (link:../src/dirent/opendir.c[../src/dirent/opendir.c] l.10) manpage: link:manpages/gen/directory.3.rst[opendir] +


readdir::

  struct dirent *readdir(DIR *dir);
 +
  (link:../src/dirent/readdir.c[../src/dirent/readdir.c] l.9) manpage: link:manpages/gen/directory.3.rst[readdir] +




 fcntl.h
---------

creat::

  inline int volatile __attribute__((always_inline)) creat( const char *s, int mode );
 +
  (link:../src/open.c[../src/open.c] l.29) manpage: link:manpages/compat-43/creat.2.rst[creat] +




 ioctl.h
---------

ioctl::

  int ioctl( int fd, unsigned long int request, ... );
 +
  (link:../src/ioctl.c[../src/ioctl.c] l.11) manpage: link:manpages/sys/ioctl.2.rst[ioctl] +




 mini_addons.h
---------------

_itobin::

  int _itobin(int i, char*buf, int prec, int groups );
 +
  (link:../src/itobin.c[../src/itobin.c] l.8)  +


_mprints::

  #define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)
 +
  Defines: dprints +
 (link:../src/prints.c[../src/prints.c] l.66)  +


_strcmp::

  int _strcmp(const char*c1,const char*c2,int len);
 +
  Defines: 0 +
 (link:../src/mstrcmp.c[../src/mstrcmp.c] l.11)  +


basename::

  char *basename(char *path);
 +
  Defines: strlen +
 (link:../src/basename.c[../src/basename.c] l.29) manpage: link:manpages/gen/basename.3.rst[basename] +


def::

  #define SETOPT_short( opts, option ) (;
 +
  (link:../macros/getoptm.h[../macros/getoptm.h] l.52)  +
Set a option flag(s) (bit(s))  manually. +
 		param options: e.g. just a, or ( a+h+l) to check for several flags at once +
 

dprintf::

  int dprintf( int fd, const char *fmt, ... );
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.202) manpage: link:manpages/stdio/printf.3.rst[dprintf] +


dtodec::

  int dtodec(double d, char* buf, int precision);
 +
  Defines: uitodec +
 (link:../src/dtodec.c[../src/dtodec.c] l.10)  +


fprintfs::

  int fprintfs( FILE* F, char *fmt, ...);
 +
  Defines: fileno write strlen +
 (link:../src/fprintfs.c[../src/fprintfs.c] l.10)  +
prints formatted to the stream F.only %s is recognized.no mini_buf needed, so using fprintfs instead of fprintf can save some sections / bytes. +
 

fprints::

  #define fprints(F,str) write(fileno(F),str,strlen(str))
 +
  Defines: fileno strlen write +
 (link:../include/prints.h[../include/prints.h] l.17)  +
print the string(s) supplied as arg(s) to stream +
 

fwrites::

  #define fwrites(fd,str) write(fd,str,sizeof(str))
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.39)  +
write the constant str to stdout. Computes length with sizeof(str) at compile time. +
 

itobin::

  #define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )
 +
  Defines:  +
 (link:../src/itobin.c[../src/itobin.c] l.41)  +


itodec::

  int itodec(int i, char *buf, int prec, char limiter );
 +
  Defines: uitodec +
 (link:../src/itodec.c[../src/itodec.c] l.121)  +


memfrob::

  void* memfrob(void* s, unsigned int len);
 +
  (link:../src/memfrob.c[../src/memfrob.c] l.3)  +


print::

  #define print(str) write(STDOUT_FILENO,str,strlen(str))
 +
  Defines: strlen write +
 (link:../include/prints.h[../include/prints.h] l.29)  +
write str to stdout. Needs strlen +
 

printl::

  #define printl() write(STDOUT_FILENO,"\n",1)
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.44)  +
write a newline to stdout +
 

prints::

  #define prints(...) _mprints(__VA_ARGS__,0)
 +
  Defines:  +
 (link:../include/prints.h[../include/prints.h] l.11)  +
print the string(s) supplied as arg(s) to stdout +
 

printsl::

  #define printsl(...) _mprints(__VA_ARGS__,"\n",0)
 +
  Defines:  +
 (link:../include/prints.h[../include/prints.h] l.25)  +
print the string(s) supplied as arg(s) and newline to stdout +
 

snprintf::

  int snprintf( char *buf, size_t size, const char *fmt, ... );
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.219) manpage: link:manpages/stdio/printf.3.rst[snprintf] +


uitodec::

  int uitodec(unsigned int i, char *buf, int prec, char limiter );
 +
  (link:../src/itodec.c[../src/itodec.c] l.8)  +


vsnprintf::

  int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.36) manpage: link:manpages/stdio/printf.3.rst[vsnprintf] +


writes::

  #define writes(str) write(STDOUT_FILENO,str,sizeof(str))
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.34)  +
write the constant str to stdout. Computes length with sizeof(str) at compile time. +
 



 stdio.h
---------

_itohex::

  int _itohex(int i,char* buf,int padding, int capitals);
 +
  (link:../src/itohex.c[../src/itohex.c] l.5)  +


clearerror::

  static inline void clearerror(FILE *f);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.198)  +


fclose::

  static inline int __attribute__((always_inline)) fclose( FILE* f );
 +
  Defines: close +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.65) manpage: link:manpages/stdio/fclose.3.rst[fclose] +


feof::

  static inline int feof(FILE *f);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.184) manpage: link:manpages/stdio/ferror.3.rst[feof] +


ferror::

  static inline int ferror(FILE *f);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.191) manpage: link:manpages/stdio/ferror.3.rst[ferror] +


fflush::

  static inline int __attribute__((always_inline)) fflush( FILE *F );
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.28) manpage: link:manpages/stdio/fflush.3.rst[fflush] +
This does nothing, since minilib doesn't provide buffered streams yet.in order to sync the stream, please use fsync +
 

fgetc::

  static inline int fgetc(FILE *F);
 +
  Defines: fileno read +
 (link:../include/fgetc.h[../include/fgetc.h] l.10) manpage: link:manpages/stdio/getc.3.rst[fgetc] +


fgetpos::

  static inline void fgetpos(FILE *f, long *pos );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.127) manpage: link:manpages/stdio/fseek.3.rst[fgetpos] +


fileno::

  static inline int __attribute__((always_inline)) fileno( FILE *f );
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.55) manpage: link:manpages/stdio/ferror.3.rst[fileno] +


fopen::

  FILE *fopen(const char* filename, const char* mode);
 +
  Defines: open +
 (link:../src/fopen.c[../src/fopen.c] l.12) manpage: link:manpages/stdio/fopen.3.rst[fopen] +
modes implemented: r, r+, w, w+, a, a+ +
 

fprint::

  #define fprint(...) fprintf(__VA_ARGS__)
 +
  Defines: fileno write +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.95)  +


fprintf::

  #define fprintf(stream,...)	write(fileno(stream),ml.mbuf,sprintf(ml.mbuf,__VA_ARGS__))
 +
  Defines: fileno write +
 (link:../src/sprintf.c[../src/sprintf.c] l.244) manpage: link:manpages/stdio/printf.3.rst[fprintf] +


fputc::

  static inline int volatile fputc(int c, FILE* F);
 +
  Defines: fileno write +
 (link:../include/fputc.h[../include/fputc.h] l.10) manpage: link:manpages/stdio/putc.3.rst[fputc] +


fputs::

  static inline int volatile fputs(const char *c, FILE *F);
 +
  Defines: fileno write strlen +
 (link:../include/fputs.h[../include/fputs.h] l.14) manpage: link:manpages/stdio/fputs.3.rst[fputs] +


fread::

  static inline size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f);
 +
  Defines: read +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.162) manpage: link:manpages/stdio/fread.3.rst[fread] +


fseek::

  static inline int fseek(FILE *f, long offset, int whence );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.146) manpage: link:manpages/stdio/fseek.3.rst[fseek] +


fsetpos::

  static inline int fsetpos(FILE *f, int pos );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.133) manpage: link:manpages/stdio/fseek.3.rst[fsetpos] +


ftell::

  static inline long ftell(FILE *f);
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.121) manpage: link:manpages/stdio/fseek.3.rst[ftell] +


fwrite::

  static inline size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f);
 +
  Defines: write +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.106) manpage: link:manpages/stdio/fread.3.rst[fwrite] +


getc::

  #define getc(F) fgetc(F)
 +
  Defines: fileno read +
 (link:../include/fgetc.h[../include/fgetc.h] l.18) manpage: link:manpages/stdio/getc.3.rst[getc] +


itoHEX::

  int itoHEX(int i,char* buf,int padding);
 +
  Defines:  +
 (link:../src/itohex.c[../src/itohex.c] l.55)  +


itohex::

  int itohex(int i,char* buf,int padding);
 +
  Defines:  +
 (link:../src/itohex.c[../src/itohex.c] l.48)  +


perror::

  void perror(char *msg);
 +
  Defines: write strlen strerror fileno +
 (link:../src/strerror.c[../src/strerror.c] l.22) manpage: link:manpages/string/strerror.3.rst[perror] +


printf::

  #define printf(...) fprintf(stdout,__VA_ARGS__)
 +
  Defines: write fileno +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.91) manpage: link:manpages/stdio/printf.3.rst[printf] +


putc::

  #define putc(c,stream) fputc(c,stream)
 +
  Defines: write fileno +
 (link:../include/fputc.h[../include/fputc.h] l.19) manpage: link:manpages/stdio/putc.3.rst[putc] +


putchar::

  #define putchar(c) fputc(c,stdout)
 +
  Defines: write fileno +
 (link:../include/fputc.h[../include/fputc.h] l.16) manpage: link:manpages/stdio/putc.3.rst[putchar] +


puts::

  #define puts(msg) ( print(msg) + printl() )
 +
  Defines: strlen write +
 (link:../include/prints.h[../include/prints.h] l.49) manpage: link:manpages/stdio/fputs.3.rst[puts] +
write msg to stdout, append a newline. Needs strlen. +
 

rewind::

  static inline void rewind( FILE *f );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.156) manpage: link:manpages/stdio/fseek.3.rst[rewind] +


setbuf::

  void setbuf(FILE *stream, char *buf);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.206) manpage: link:manpages/stdio/setbuf.3.rst[setbuf] +
dummy functions. +
  There is no buffering implemented for the streams yet. +
 

setvbuf::

  int setvbuf(FILE *stream, char *buf, int mode, size_t size);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.210) manpage: link:manpages/stdio/setbuf.3.rst[setvbuf] +
dummy +
 

sprintf::

  #define sprintf(str,...) snprintf( str, 4096,  __VA_ARGS__)
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.26) manpage: link:manpages/stdio/printf.3.rst[sprintf] +


vfprintf::

  #define vfprintf(...) fprintf(__VA_ARGS__)
 +
  Defines: fileno write +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.100) manpage: link:manpages/stdio/printf.3.rst[vfprintf] +




 stdlib.h
----------

atoi::

  int atoi(char *c);
 +
  (link:../src/atoi.c[../src/atoi.c] l.6) manpage: link:manpages/stdlib/atoi.3.rst[atoi] +


free::

  void volatile free(void* p);
 +
  (link:../src/malloc.c[../src/malloc.c] l.200) manpage: link:manpages/stdlib/memory.3.rst[free] +


getenv::

  char *getenv(const char* name);
 +
  (link:../src/getenv.c[../src/getenv.c] l.11) manpage: link:manpages/stdlib/getenv.3.rst[getenv] +


malloc::

  void* volatile malloc(int size);
 +
  (link:../src/malloc.c[../src/malloc.c] l.150) manpage: link:manpages/stdlib/memory.3.rst[malloc] +


rand::

  unsigned int rand();
 +
  (link:../src/rand.c[../src/rand.c] l.15) manpage: link:manpages/stdlib/rand.3.rst[rand] +


srand::

  void srand( unsigned int i );
 +
  (link:../src/rand.c[../src/rand.c] l.7) manpage: link:manpages/stdlib/rand.3.rst[srand] +




 string.h
----------

memcmp::

  int memcmp(const void* c1,const void* c2,int len);
 +
  Defines: 0 +
 (link:../src/mstrcmp.c[../src/mstrcmp.c] l.43) manpage: link:manpages/string/memcmp.3.rst[memcmp] +


memcpy::

  void *memcpy( void *d, const void *s, int n );
 +
  (link:../src/memcpy.c[../src/memcpy.c] l.6) manpage: link:manpages/string/memcpy.3.rst[memcpy] +


memset::

  void *memset( void *s, int c, int n);
 +
  (link:../src/memset.c[../src/memset.c] l.3) manpage: link:manpages/string/memset.3.rst[memset] +


strcat::

  char *strcat(char *dest, const char *src );
 +
  (link:../src/strcat.c[../src/strcat.c] l.6) manpage: link:manpages/string/string.3.rst[strcat] +


strcmp::

  int strcmp(const char*c1,const char*c2);
 +
  Defines:  +
 (link:../src/mstrcmp.c[../src/mstrcmp.c] l.27) manpage: link:manpages/string/string.3.rst[strcmp] +


strcpy::

  char *strcpy(char *dest, const char *src);
 +
  (link:../src/memcpy.c[../src/memcpy.c] l.17) manpage: link:manpages/string/string.3.rst[strcpy] +


strerror::

  char* strerror( int errnum );
 +
  (link:../src/strerror.c[../src/strerror.c] l.9) manpage: link:manpages/string/string.3.rst[strerror] +


strlen::

  int strlen(const char*str);
 +
  (link:../src/strlen.c[../src/strlen.c] l.7) manpage: link:manpages/string/strlen.3.rst[strlen] +


strncmp::

  int strncmp(const char*c1,const char*c2,int len);
 +
  Defines:  +
 (link:../src/mstrcmp.c[../src/mstrcmp.c] l.34) manpage: link:manpages/string/string.3.rst[strncmp] +


strncpy::

  char *strncpy(char *dest, const char *src, int n);
 +
  Defines: memcpy +
 (link:../src/memcpy.c[../src/memcpy.c] l.27) manpage: link:manpages/string/string.3.rst[strncpy] +




 time.h
--------

time::

  time(unsigned int *a1 )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.59) manpage: link:manpages/gen/time.3.rst[time] +




 unistd.h
----------

chdir::

  chdir(const char* path)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.49) manpage: link:manpages/sys/chdir.2.rst[chdir] +


close::

  close( int fd )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.34) manpage: link:manpages/sys/close.2.rst[close] +


dup::

  dup(int a1)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.51) manpage: link:manpages/sys/dup.2.rst[dup] +


dup2::

  dup2(int a1, int a2)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.52) manpage: link:manpages/sys/dup.2.rst[dup2] +


fsync::

  fsync(int a1 )
 +
 (link:../include/lseek.h[../include/lseek.h] l.20) manpage: link:manpages/sys/fsync.2.rst[fsync] +


ftruncate::

  ftruncate(unsigned int a1, unsigned int a2 )
 +
 (link:../include/lseek.h[../include/lseek.h] l.19) manpage: link:manpages/sys/truncate.2.rst[ftruncate] +


getpid::

  DEF_syscall(getpid,0 )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.30) manpage: link:manpages/sys/getpid.2.rst[getpid] +


lseek::

  lseek(unsigned int a1, int a2, int a3 )
 +
 (link:../include/lseek.h[../include/lseek.h] l.17) manpage: link:manpages/sys/lseek.2.rst[lseek] +


open::

  int volatile open( const char *s, int flags, ... );
 +
  (link:../src/open.c[../src/open.c] l.12) manpage: link:manpages/sys/open.2.rst[open] +


read::

  read( int fd, POINTER *buf, int len )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.35) manpage: link:manpages/sys/read.2.rst[read] +


rename::

  rename( const char* a1, const char* a2 )		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.44) manpage: link:manpages/sys/rename.2.rst[rename] +


select::

  static inline int volatile __attribute__((always_inline)) select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait);
 +
  (link:../include/select.h[../include/select.h] l.10) manpage: link:manpages/sys/select.2.rst[select] +


tcgetattr::

  static inline int __attribute__((always_inline)) tcgetattr(int fd, struct termios *io);
 +
  Defines: ioctl +
 (link:../include/tcgetattr.h[../include/tcgetattr.h] l.17) manpage: link:manpages/gen/tcsetattr.3.rst[tcgetattr] +


tcsetattr::

  static inline int __attribute__((always_inline)) tcsetattr(int fd, int opt, const struct termios *io);
 +
  Defines: ioctl +
 (link:../include/tcsetattr.h[../include/tcsetattr.h] l.18) manpage: link:manpages/gen/tcsetattr.3.rst[tcsetattr] +


unlink::

  unlink( const char* a1)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.45) manpage: link:manpages/sys/unlink.2.rst[unlink] +


write::

  write(int fd,const void *buf, int len )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.41) manpage: link:manpages/sys/write.2.rst[write] +


