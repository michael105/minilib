 implemented functions
=======================

short ref, links to source files.

Only functions defined are going to be built.

To define them, either do (for, e.g. puts) `#define mini_puts`
before you include minilib.h

Or, use the config script.: `mini_puts`

Some functions define other functions, these will be listed in the line,
starting with `Define:`


An example, using the scripting config, is given below:
(miniputs.c)
----
#if 0
mini_start
mini_puts

LDSCRIPT text_and_bss
INCLUDESRC
shrinkelf

return
#endif

int main(){
  puts("Hello, world!");
  return(0);
}
----

compile with ./mini-gcc --config miniputs.c -o miniputs miniputs.c

(what compiles to an annoying size of 251 Bytes here. Something again bloats.
replacing the puts with writes, there still are 208 Bytes. This used to
be 151 Bytes. Have to sort this out.)

:toc:






 ctype.h
---------

isprint::

  static inline int __attribute__((always_inline)) isprint(const char c);
 +
  (link:../include/isprint.h[../include/isprint.h] l.8) manpage: link:manpages/locale/isprint.3.rst[isprint] +


isspace::

  int isspace(int c);
 +
  (link:../src/isspace.c[../src/isspace.c] l.6) manpage: link:manpages/locale/isspace.3.rst[isspace] +




 declarations.h
----------------

brk::

  brk( unsigned long brk)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.177) manpage: link:manpages/sys/brk.2.rst[brk] +


chmod::

  chmod( const char *filename, mode_t mode)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.170) manpage: link:manpages/sys/chmod.2.rst[chmod] +


dup3::

  dup3(int a1, int a2, int a3)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.112) manpage: link:manpages/gen/dup3.3.rst[dup3] +


execveat::

  execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.152)  +


fchmod::

  fchmod( unsigned int fd, mode_t mode)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.108) manpage: link:manpages/sys/chmod.2.rst[fchmod] +


fchown::

  fchown( unsigned int fd, uid_t user, gid_t group)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.107) manpage: link:manpages/sys/chown.2.rst[fchown] +


fcntl::

  fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.157) manpage: link:manpages/sys/fcntl.2.rst[fcntl] +


fstat::

  fstat(int a1,struct stat* a2)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.103) manpage: link:manpages/sys/stat.2.rst[fstat] +


getcwd::

  getcwd( char *buf,  unsigned long size)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.114) manpage: link:manpages/gen/getcwd.3.rst[getcwd] +


getdents::

  getdents( unsigned int fd, struct dirent *direntry, unsigned int count )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.98) manpage: link:manpages/sys/getdirentries.2.rst[getdents] +


getitimer::

  getitimer( int which,  struct itimerval *value)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.183) manpage: link:manpages/sys/getitimer.2.rst[getitimer] +


getppid::

  DEF_syscall(getppid,0)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.173) manpage: link:manpages/sys/getpid.2.rst[getppid] +


gettimeofday::

  gettimeofday( struct timeval *a1, struct timezone *a2)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.130) manpage: link:manpages/sys/gettimeofday.2.rst[gettimeofday] +


kill::

  kill( pid_t pid,  int sig)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.123) manpage: link:manpages/sys/kill.2.rst[kill] +


mknod::

  mknod( const char *filename,  umode_t mode,  unsigned dev)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.180) manpage: link:manpages/sys/mknod.2.rst[mknod] +


mount::

  mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.163) manpage: link:manpages/sys/mount.2.rst[mount] +


mprotect::

  mprotect( POINTER *a1, POINTER a2, int a3 )
 +
 Returns: *a1 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.145) manpage: link:manpages/sys/mprotect.2.rst[mprotect] +


nanosleep::

  nanosleep( struct timespec *rqtp, struct timespec *rmtp)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.129) manpage: link:manpages/sys/nanosleep.2.rst[nanosleep] +


pivot_root::

  pivot_root( const char *new_root,  const char *put_old)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.136)  +


readahead::

  readahead( int fd,  loff_t offset,  size_t count)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.178)  +


reboot::

  reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.161) manpage: link:manpages/sys/reboot.2.rst[reboot] +


rt_sigaction::

  rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.132)  +


rt_sigprocmask::

  rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.185)  +


rt_sigreturn::

  rt_sigreturn( unsigned long __unused)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.133)  +


sendfile::

  sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.160) manpage: link:manpages/sys/sendfile.2.rst[sendfile] +


setitimer::

  setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.182) manpage: link:manpages/sys/getitimer.2.rst[setitimer] +


stat::

  stat(const char* filename,struct stat* a2)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.104) manpage: link:manpages/sys/stat.2.rst[stat] +


symlink::

  symlink( const char *oldname,  const char *newname)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.117) manpage: link:manpages/sys/symlink.2.rst[symlink] +


sync::

  DEF_syscall(sync,0)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.118) manpage: link:manpages/sys/sync.2.rst[sync] +


umask::

  umask( int mask)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.169) manpage: link:manpages/sys/umask.2.rst[umask] +


umount2::

  umount2( const char *mountpoint, int flags) 
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.159)  +


uname::

  uname(struct old_utsname *name )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.147) manpage: link:manpages/gen/uname.3.rst[uname] +


utime::

  utime( const char *filename, struct utimbuf *times)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.172) manpage: link:manpages/gen/utime.3.rst[utime] +


vfork::

  DEF_syscall(vfork,0)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.126) manpage: link:manpages/sys/vfork.2.rst[vfork] +


vhangup::

  DEF_syscall(vhangup,0 )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.144)  +


wait4::

  wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.155) manpage: link:manpages/sys/wait.2.rst[wait4] +




 dirent.h
----------

closedir::

  int closedir(DIR *dir);
 +
  Defines: free +
 (link:../src/dirent/closedir.c[../src/dirent/closedir.c] l.6) manpage: link:manpages/gen/directory.3.rst[closedir] +


opendir::

  DIR *opendir(const char *name);
 +
  Defines: open malloc close +
 (link:../src/dirent/opendir.c[../src/dirent/opendir.c] l.10) manpage: link:manpages/gen/directory.3.rst[opendir] +


readdir::

  struct dirent *readdir(DIR *dir);
 +
  (link:../src/dirent/readdir.c[../src/dirent/readdir.c] l.9) manpage: link:manpages/gen/directory.3.rst[readdir] +




 fcntl.h
---------

creat::

  int volatile creat( const char *s, int mode );
 +
  Defines: open +
 (link:../src/open.c[../src/open.c] l.30) manpage: link:manpages/compat-43/creat.2.rst[creat] +


mkfifo::

  static int mkfifo( const char* path, mode_t mode );
 +
  (link:../include/mkfifo.h[../include/mkfifo.h] l.4) manpage: link:manpages/sys/mkfifo.2.rst[mkfifo] +




 ioctl.h
---------

ioctl::

  int volatile  __attribute__((optimize("O0"))) ioctl( int fd, unsigned long int request, ... );
 +
  (link:../src/ioctl.c[../src/ioctl.c] l.11) manpage: link:manpages/sys/ioctl.2.rst[ioctl] +




 mini_addons.h
---------------

_itobin::

  int _itobin(int i, char*buf, int prec, int groups );
 +
  (link:../src/itobin.c[../src/itobin.c] l.8)  +


_mprints::

  #define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)
 +
  Defines: dprints +
 (link:../src/prints.c[../src/prints.c] l.69)  +


basename::

  char *basename(char *path);
 +
  Defines: strlen +
 (link:../src/basename.c[../src/basename.c] l.29) manpage: link:manpages/gen/basename.3.rst[basename] +


def::

  #define SETOPT_short( opts, option ) (;
 +
  (link:../macros/getoptm.h[../macros/getoptm.h] l.52)  +
Set a option flag(s) (bit(s))  manually. +
 		param options: e.g. just a, or ( a+h+l) to check for several flags at once +
 

dirname::

  char *dirname(char *s);
 +
  Defines: strlen +
 (link:../src/dirname.c[../src/dirname.c] l.8) manpage: link:manpages/gen/dirname.3.rst[dirname] +


djb2_hash::

  unsigned long djb2_hash(const unsigned char *str);
 +
  (link:../src/hashes.c[../src/hashes.c] l.10)  +
hashes, from d.j.Bernstein +
  (http://www.cse.yorku.ca/~oz/hash.html) +
  I've tested djb2_hash, and it gives quite good results. +
  But I'm sure, Bernstein did think and test his algorithm sincerely. +
  When combining djb2_hash and sdbm_hash, the probability of collisions +
  might tend to zero. +
  Me I'm going this way. I guess. I might check djb2_hash for collisions within a space of around 8 digits. +
 

dprintf::

  int dprintf( int fd, const char *fmt, ... );
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.206) manpage: link:manpages/stdio/printf.3.rst[dprintf] +


dtodec::

  int dtodec(double d, char* buf, int precision);
 +
  Defines: uitodec +
 (link:../src/dtodec.c[../src/dtodec.c] l.10)  +


eprint::

  #define eprint(str) write(STDERR_FILENO,str,strlen(str))
 +
  Defines: write strlen +
 (link:../include/prints.h[../include/prints.h] l.33)  +
write str to stderr. Needs strlen +
 

eprintfs::

  #define eprintfs(fmt,...) fprintfs(stderr, fmt, __VA_ARGS__)
 +
  Defines: fileno write strlen +
 (link:../include/prints.h[../include/prints.h] l.81)  +
write str to stderr.  +
  only format %s is recognized +
 

eprintl::

  #define eprintl() write(STDERR_FILENO,"\n",1)
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.58)  +
write a newline to stderr +
 

eputs::

  #define eputs(msg) ( eprint(msg) + eprintl() )
 +
  Defines: write strlen +
 (link:../include/prints.h[../include/prints.h] l.68)  +
write msg to stderr, append a newline. Needs strlen. +
 

ewrites::

  #define ewrites(str) write(STDERR_FILENO,str,sizeof(str))
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.43)  +
write the constant str to stderr. Computes length with sizeof(str) at compile time. +
 

fprintfs::

  int fprintfs( FILE* F, char *fmt, ...);
 +
  Defines: strlen fileno write +
 (link:../src/fprintfs.c[../src/fprintfs.c] l.10)  +
prints formatted to the stream F.only %s is recognized.no mini_buf needed, so using fprintfs instead of fprintf can save some sections / bytes. +
 

fprints::

  #define fprints(F,str) write(fileno(F),str,strlen(str))
 +
  Defines: strlen write fileno +
 (link:../include/prints.h[../include/prints.h] l.17)  +
print the string(s) supplied as arg(s) to stream +
 

fwrites::

  #define fwrites(fd,str) write(fd,str,sizeof(str))
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.49)  +
write the constant str to fd. Computes length with sizeof(str) at compile time. +
 

grantpt::

  int grantpt(int fd);
 +
  (link:../src/pty.c[../src/pty.c] l.13) manpage: link:manpages/stdlib/ptsname.3.rst[grantpt] +


itobin::

  #define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )
 +
  Defines:  +
 (link:../src/itobin.c[../src/itobin.c] l.41)  +


itodec::

  int itodec(int i, char *buf, int prec, char limiter );
 +
  Defines: uitodec +
 (link:../src/itodec.c[../src/itodec.c] l.116)  +


ltodec::

  int ltodec(long i, char *buf, int prec, char limiter );
 +
  (link:../src/ltodec.c[../src/ltodec.c] l.71)  +


memfrob::

  void* memfrob(void* s, unsigned int len);
 +
  (link:../src/memfrob.c[../src/memfrob.c] l.3)  +


posix_openpt::

  int posix_openpt(int flags);
 +
  Defines: open +
 (link:../src/pty.c[../src/pty.c] l.8) manpage: link:manpages/sys/posix_openpt.2.rst[posix_openpt] +


print::

  #define print(str) write(STDOUT_FILENO,str,strlen(str))
 +
  Defines: strlen write +
 (link:../include/prints.h[../include/prints.h] l.29)  +
write str to stdout. Needs strlen +
 

printfs::

  #define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)
 +
  Defines: write fileno strlen +
 (link:../include/prints.h[../include/prints.h] l.75)  +
write str to stdout.  +
  only format %s is recognized +
 

printl::

  #define printl() write(STDOUT_FILENO,"\n",1)
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.54)  +
write a newline to stdout +
 

prints::

  #define prints(...) _mprints(__VA_ARGS__,0)
 +
  Defines:  +
 (link:../include/prints.h[../include/prints.h] l.11)  +
print the string(s) supplied as arg(s) to stdout +
 

printsl::

  #define printsl(...) _mprints(__VA_ARGS__,"\n",0)
 +
  Defines:  +
 (link:../include/prints.h[../include/prints.h] l.25)  +
print the string(s) supplied as arg(s) and newline to stdout +
 

ptsname::

  char *ptsname(int fd);
 +
  Defines: write uitodec +
 (link:../src/pty.c[../src/pty.c] l.40) manpage: link:manpages/stdlib/ptsname.3.rst[ptsname] +


ptsname_r::

  int ptsname_r(int fd, char *buf, size_t len);
 +
  Defines: uitodec write +
 (link:../src/pty.c[../src/pty.c] l.27)  +


sdbm_hash::

  unsigned long sdbm_hash(const unsigned char *str);
 +
  (link:../src/hashes.c[../src/hashes.c] l.21)  +


snprintf::

  int snprintf( char *buf, size_t size, const char *fmt, ... );
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.223) manpage: link:manpages/stdio/printf.3.rst[snprintf] +


uitodec::

  int uitodec(unsigned int i, char *buf, int prec, char limiter );
 +
  (link:../src/itodec.c[../src/itodec.c] l.8)  +


ultodec::

  int ultodec(unsigned long ui, char *buf, int prec, char limiter );
 +
  (link:../src/ltodec.c[../src/ltodec.c] l.6)  +


unlockpt::

  int unlockpt(int fd);
 +
  Defines: ioctl +
 (link:../src/pty.c[../src/pty.c] l.20) manpage: link:manpages/stdlib/ptsname.3.rst[unlockpt] +


verbose_errstr::

  const char* verbose_errstr(int num);
 +
  (link:../include/errstr.h[../include/errstr.h] l.8)  +
verbose error (errno) string.  +
  this adds about 3.5kB to the compiled binary(!) +
 

vsnprintf::

  int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.40) manpage: link:manpages/stdio/printf.3.rst[vsnprintf] +
the function, translating the fmt of printf. +
  warning - most possibly you'd like to define besides fprintf, or family, +
  mini_itodec as well. (%d conversion) +
 

writes::

  #define writes(str) write(STDOUT_FILENO,str,sizeof(str))
 +
  Defines: write +
 (link:../include/prints.h[../include/prints.h] l.39)  +
write the constant str to stdout. Computes length with sizeof(str) at compile time. +
 



 mini_ksyscalls
----------------

ksys__sysctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.315)  +


ksys_accept::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.91)  +


ksys_accept4::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.551)  +


ksys_access::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.47)  +


ksys_acct::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.329)  +


ksys_add_key::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.471)  +


ksys_adjtimex::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.321)  +


ksys_alarm::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.79)  +


ksys_arch_prctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.319)  +


ksys_bind::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.103)  +


ksys_brk::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.29)  +


ksys_capget::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.255)  +


ksys_capset::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.257)  +


ksys_chdir::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.165)  +


ksys_chmod::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.185)  +


ksys_chown::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.189)  +


ksys_chroot::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.325)  +


ksys_clock_adjtime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.585)  +


ksys_clock_getres::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.435)  +


ksys_clock_gettime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.433)  +


ksys_clock_nanosleep::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.437)  +


ksys_clock_settime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.431)  +


ksys_clone::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.117)  +


ksys_close::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.11)  +


ksys_connect::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.89)  +


ksys_creat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.175)  +


ksys_delete_module::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.353)  +


ksys_dup::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.69)  +


ksys_dup2::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.71)  +


ksys_dup3::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.559)  +


ksys_epoll_create::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.407)  +


ksys_epoll_create1::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.557)  +


ksys_epoll_ctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.443)  +


ksys_epoll_pwait::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.537)  +


ksys_epoll_wait::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.441)  +


ksys_eventfd::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.543)  +


ksys_eventfd2::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.555)  +


ksys_execve::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.123)  +


ksys_exit::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.125) manpage: link:manpages/sys/_exit.2.rst[_exit] +


ksys_exit_group::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.439)  +


ksys_faccessat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.513)  +


ksys_fadvise64::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.419)  +


ksys_fallocate::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.545)  +


ksys_fanotify_init::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.575)  +


ksys_fanotify_mark::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.577)  +


ksys_fchdir::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.167)  +


ksys_fchmod::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.187)  +


ksys_fchmodat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.511)  +


ksys_fchown::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.191)  +


ksys_fchownat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.495)  +


ksys_fcntl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.149)  +


ksys_fdatasync::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.155)  +


ksys_fgetxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.371)  +


ksys_finit_module::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.601)  +


ksys_flistxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.377)  +


ksys_flock::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.151)  +


ksys_fork::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.119)  +


ksys_fremovexattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.383)  +


ksys_fsetxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.365)  +


ksys_fstat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.15)  +


ksys_fstatfs::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.279)  +


ksys_fsync::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.153)  +


ksys_ftruncate::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.159)  +


ksys_futex::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.389)  +


ksys_futimesat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.497)  +


ksys_get_mempolicy::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.453)  +


ksys_get_robust_list::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.523)  +


ksys_getcpu::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.593)  +


ksys_getcwd::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.163)  +


ksys_getdents::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.161)  +


ksys_getdents64::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.411)  +


ksys_getegid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.221)  +


ksys_geteuid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.219)  +


ksys_getgid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.213)  +


ksys_getgroups::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.235)  +


ksys_getitimer::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.77)  +


ksys_getpeername::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.109)  +


ksys_getpgid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.247)  +


ksys_getpgrp::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.227)  +


ksys_getpid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.83)  +


ksys_getppid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.225)  +


ksys_getpriority::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.283)  +


ksys_getrandom::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.611)  +


ksys_getresgid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.245)  +


ksys_getresuid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.241)  +


ksys_getrlimit::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.199)  +


ksys_getrusage::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.201)  +


ksys_getsid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.253)  +


ksys_getsockname::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.107)  +


ksys_getsockopt::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.115)  +


ksys_gettid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.357)  +


ksys_gettimeofday::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.197)  +


ksys_getuid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.209)  +


ksys_getxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.367)  +


ksys_init_module::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.351)  +


ksys_inotify_add_watch::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.483)  +


ksys_inotify_init::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.481)  +


ksys_inotify_init1::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.563)  +


ksys_inotify_rm_watch::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.485)  +


ksys_io_cancel::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.403)  +


ksys_io_destroy::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.397)  +


ksys_io_getevents::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.399)  +


ksys_io_setup::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.395)  +


ksys_io_submit::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.401)  +


ksys_ioctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.37)  +


ksys_ioperm::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.349)  +


ksys_iopl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.347)  +


ksys_ioprio_get::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.479)  +


ksys_ioprio_set::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.477)  +


ksys_kcmp::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.599)  +


ksys_kexec_file_load::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.615)  +


ksys_kexec_load::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.467)  +


ksys_keyctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.475)  +


ksys_kill::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.129)  +


ksys_lchown::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.193)  +


ksys_lgetxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.369)  +


ksys_link::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.177)  +


ksys_linkat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.505)  +


ksys_listen::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.105)  +


ksys_listxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.373)  +


ksys_llistxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.375)  +


ksys_lookup_dcookie::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.405)  +


ksys_lremovexattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.381)  +


ksys_lseek::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.21)  +


ksys_lsetxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.363)  +


ksys_lstat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.17)  +


ksys_madvise::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.61)  +


ksys_mbind::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.449)  +


ksys_memfd_create::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.613)  +


ksys_migrate_pages::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.487)  +


ksys_mincore::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.59)  +


ksys_mkdir::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.171)  +


ksys_mkdirat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.491)  +


ksys_mknod::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.271)  +


ksys_mknodat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.493)  +


ksys_mlock::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.301)  +


ksys_mlockall::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.305)  +


ksys_mmap::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.23)  +


ksys_modify_ldt::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.311)  +


ksys_mount::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.333)  +


ksys_move_pages::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.533)  +


ksys_mprotect::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.25)  +


ksys_mq_getsetattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.465)  +


ksys_mq_notify::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.463)  +


ksys_mq_open::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.455)  +


ksys_mq_timedreceive::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.461)  +


ksys_mq_timedsend::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.459)  +


ksys_mq_unlink::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.457)  +


ksys_mremap::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.55)  +


ksys_msgctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.147)  +


ksys_msgget::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.141)  +


ksys_msgrcv::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.145)  +


ksys_msgsnd::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.143)  +


ksys_msync::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.57)  +


ksys_munlock::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.303)  +


ksys_munlockall::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.307)  +


ksys_munmap::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.27)  +


ksys_name_to_handle_at::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.581)  +


ksys_nanosleep::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.75)  +


ksys_newfstatat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.499)  +


ksys_open::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.9)  +


ksys_open_by_handle_at::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.583)  +


ksys_openat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.489)  +


ksys_pause::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.73)  +


ksys_perf_event_open::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.571)  +


ksys_personality::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.273)  +


ksys_pipe::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.49)  +


ksys_pipe2::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.561)  +


ksys_pivot_root::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.313)  +


ksys_poll::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.19)  +


ksys_ppoll::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.517)  +


ksys_prctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.317)  +


ksys_pread64::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.39)  +


ksys_preadv::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.565)  +


ksys_prlimit64::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.579)  +


ksys_process_vm_readv::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.595)  +


ksys_process_vm_writev::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.597)  +


ksys_pselect6::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.515)  +


ksys_ptrace::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.207)  +


ksys_pwrite64::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.41)  +


ksys_pwritev::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.567)  +


ksys_quotactl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.355)  +


ksys_read::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.5)  +


ksys_readahead::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.359)  +


ksys_readlink::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.183)  +


ksys_readlinkat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.509)  +


ksys_readv::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.43)  +


ksys_reboot::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.341)  +


ksys_recvfrom::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.95)  +


ksys_recvmmsg::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.573)  +


ksys_recvmsg::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.99)  +


ksys_remap_file_pages::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.409)  +


ksys_removexattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.379)  +


ksys_rename::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.169)  +


ksys_renameat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.503)  +


ksys_renameat2::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.607)  +


ksys_request_key::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.473)  +


ksys_restart_syscall::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.415)  +


ksys_rmdir::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.173)  +


ksys_rt_sigaction::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.31)  +


ksys_rt_sigpending::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.259)  +


ksys_rt_sigprocmask::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.33)  +


ksys_rt_sigqueueinfo::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.263)  +


ksys_rt_sigreturn::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.35)  +


ksys_rt_sigsuspend::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.265)  +


ksys_rt_sigtimedwait::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.261)  +


ksys_rt_tgsigqueueinfo::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.569)  +


ksys_sched_get_priority_max::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.295)  +


ksys_sched_get_priority_min::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.297)  +


ksys_sched_getaffinity::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.393)  +


ksys_sched_getattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.605)  +


ksys_sched_getparam::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.289)  +


ksys_sched_getscheduler::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.293)  +


ksys_sched_rr_get_interval::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.299)  +


ksys_sched_setaffinity::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.391)  +


ksys_sched_setattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.603)  +


ksys_sched_setparam::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.287)  +


ksys_sched_setscheduler::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.291)  +


ksys_sched_yield::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.53)  +


ksys_seccomp::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.609)  +


ksys_select::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.51)  +


ksys_semctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.137)  +


ksys_semget::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.133)  +


ksys_semop::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.135)  +


ksys_semtimedop::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.417)  +


ksys_sendfile::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.85)  +


ksys_sendmmsg::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.589)  +


ksys_sendmsg::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.97)  +


ksys_sendto::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.93)  +


ksys_set_mempolicy::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.451)  +


ksys_set_robust_list::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.521)  +


ksys_set_tid_address::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.413)  +


ksys_setdomainname::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.345)  +


ksys_setfsgid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.251)  +


ksys_setfsuid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.249)  +


ksys_setgid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.217)  +


ksys_setgroups::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.237)  +


ksys_sethostname::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.343)  +


ksys_setitimer::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.81)  +


ksys_setns::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.591)  +


ksys_setpgid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.223)  +


ksys_setpriority::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.285)  +


ksys_setregid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.233)  +


ksys_setresgid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.243)  +


ksys_setresuid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.239)  +


ksys_setreuid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.231)  +


ksys_setrlimit::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.323)  +


ksys_setsid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.229)  +


ksys_setsockopt::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.113)  +


ksys_settimeofday::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.331)  +


ksys_setuid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.215)  +


ksys_setxattr::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.361)  +


ksys_shmat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.65)  +


ksys_shmctl::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.67)  +


ksys_shmdt::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.139)  +


ksys_shmget::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.63)  +


ksys_shutdown::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.101)  +


ksys_sigaltstack::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.267)  +


ksys_signalfd::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.539)  +


ksys_signalfd4::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.553)  +


ksys_socket::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.87)  +


ksys_socketpair::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.111)  +


ksys_splice::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.525)  +


ksys_stat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.13)  +


ksys_statfs::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.277)  +


ksys_swapoff::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.339)  +


ksys_swapon::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.337)  +


ksys_symlink::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.181)  +


ksys_symlinkat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.507)  +


ksys_sync::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.327)  +


ksys_sync_file_range::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.529)  +


ksys_syncfs::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.587)  +


ksys_sysfs::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.281)  +


ksys_sysinfo::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.203)  +


ksys_syslog::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.211)  +


ksys_tee::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.527)  +


ksys_tgkill::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.445)  +


ksys_time::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.387)  +


ksys_timer_create::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.421)  +


ksys_timer_delete::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.429)  +


ksys_timer_getoverrun::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.427)  +


ksys_timer_gettime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.425)  +


ksys_timer_settime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.423)  +


ksys_timerfd_create::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.541)  +


ksys_timerfd_gettime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.549)  +


ksys_timerfd_settime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.547)  +


ksys_times::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.205)  +


ksys_tkill::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.385)  +


ksys_truncate::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.157)  +


ksys_umask::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.195)  +


ksys_umount2::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.335)  +


ksys_uname::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.131)  +


ksys_unlink::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.179)  +


ksys_unlinkat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.501)  +


ksys_unshare::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.519)  +


ksys_ustat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.275)  +


ksys_utime::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.269)  +


ksys_utimensat::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.535)  +


ksys_utimes::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.447)  +


ksys_vfork::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.121)  +


ksys_vhangup::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.309)  +


ksys_vmsplice::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.531)  +


ksys_wait4::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.127)  +


ksys_waitid::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.469)  +


ksys_write::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.7)  +


ksys_writev::

  (link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.45)  +




 signal.h
----------

raise::

  static inline int raise(int signr);
 +
  Defines: getpid +
 (link:../src/sigaction.c[../src/sigaction.c] l.132) manpage: link:manpages/gen/raise.3.rst[raise] +


sigaction::

  static int volatile sigaction(int sig, const struct sigaction *act, struct sigaction *oact);
 +
  Defines: memcpy +
 (link:../src/sigaction.c[../src/sigaction.c] l.106) manpage: link:manpages/sys/sigaction.2.rst[sigaction] +


sigaddset::

  int sigaddset(sigset_t *set, int sig);
 +
  (link:../src/sigaction.c[../src/sigaction.c] l.34) manpage: link:manpages/gen/sigsetops.3.rst[sigaddset] +


sigdelset::

  int sigdelset(sigset_t *set, int sig);
 +
  (link:../src/sigaction.c[../src/sigaction.c] l.58) manpage: link:manpages/gen/sigsetops.3.rst[sigdelset] +


sigemptyset::

  static int sigemptyset(sigset_t *set);
 +
  (link:../src/sigaction.c[../src/sigaction.c] l.7) manpage: link:manpages/gen/sigsetops.3.rst[sigemptyset] +


sigfillset::

  static int sigfillset(sigset_t *set);
 +
  (link:../src/sigaction.c[../src/sigaction.c] l.20) manpage: link:manpages/gen/sigsetops.3.rst[sigfillset] +


sigismember::

  int sigismember(sigset_t *set, int sig);
 +
  (link:../src/sigaction.c[../src/sigaction.c] l.75) manpage: link:manpages/gen/sigsetops.3.rst[sigismember] +


signal::

  sighandler_t signal(int sig, sighandler_t func );
 +
  Defines: memcpy +
 (link:../src/signal.c[../src/signal.c] l.8) manpage: link:manpages/gen/signal.3.rst[signal] +


sigprocmask::

  int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
 +
  (link:../src/sigaction.c[../src/sigaction.c] l.52) manpage: link:manpages/sys/sigprocmask.2.rst[sigprocmask] +




 stdio.h
---------

_fopen::

  FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f);
 +
  Defines: open fileno close +
 (link:../src/fopen.c[../src/fopen.c] l.12)  +
modes implemented: r, r+, w, w+, a, a+ +
 

_itohex::

  int _itohex(int i,char* buf,int padding, int capitals);
 +
  (link:../src/itohex.c[../src/itohex.c] l.6)  +


clearerr::

  static inline void clearerr(FILE *f);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.198) manpage: link:manpages/stdio/ferror.3.rst[clearerr] +


clearerror::

  static inline void clearerror(FILE *f);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.203)  +


errno_str::

  const char *errno_str(int err);
 +
  (link:../src/strerror.c[../src/strerror.c] l.43)  +
convert errno to str, with 3 chars length +
  ending the string (located on the stack (!)  +
  with two \0\0, when errno<100 +
 

fclose::

  static inline int __attribute__((always_inline)) fclose( FILE* f );
 +
  Defines: close +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.65) manpage: link:manpages/stdio/fclose.3.rst[fclose] +


fdopen::

  FILE *fdopen(int fd, const char* mode);
 +
  Defines: open +
 (link:../src/fopen.c[../src/fopen.c] l.90) manpage: link:manpages/stdio/fopen.3.rst[fdopen] +
modes implemented: r, r+, w, w+, a, a+ +
 

feof::

  static inline int feof(FILE *f);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.184) manpage: link:manpages/stdio/ferror.3.rst[feof] +


ferror::

  static inline int ferror(FILE *f);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.191) manpage: link:manpages/stdio/ferror.3.rst[ferror] +


fflush::

  static inline int __attribute__((always_inline)) fflush( FILE *F );
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.28) manpage: link:manpages/stdio/fflush.3.rst[fflush] +
This does nothing, since minilib doesn't provide buffered streams yet.In order to sync data to disc, please use fsync +
 

fgetc::

  static inline int fgetc(FILE *F);
 +
  Defines: read fileno +
 (link:../include/fgetc.h[../include/fgetc.h] l.11) manpage: link:manpages/stdio/getc.3.rst[fgetc] +


fgetpos::

  static inline void fgetpos(FILE *f, long *pos );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.127) manpage: link:manpages/stdio/fseek.3.rst[fgetpos] +


fgets::

  char* fgets(char *buf, int size, FILE* F);
 +
  Defines: read fileno +
 (link:../src/fgets.c[../src/fgets.c] l.6) manpage: link:manpages/stdio/fgets.3.rst[fgets] +


fileno::

  static int fileno( FILE *f );
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.56) manpage: link:manpages/stdio/ferror.3.rst[fileno] +
Return the fd nummber of stdin,-out,-err.  +
 

fopen::

  FILE *fopen(const char* filename, const char* mode);
 +
  Defines: open +
 (link:../src/fopen.c[../src/fopen.c] l.80) manpage: link:manpages/stdio/fopen.3.rst[fopen] +
modes implemented: r, r+, w, w+, a, a+ +
 

fprint::

  #define fprint(...) fprintf(__VA_ARGS__)
 +
  Defines: write fileno +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.95)  +


fprintf::

  #define fprintf(stream,...)	write(fileno(stream),ml.mbuf,sprintf(ml.mbuf,__VA_ARGS__))
 +
  Defines: fileno write +
 (link:../src/sprintf.c[../src/sprintf.c] l.248) manpage: link:manpages/stdio/printf.3.rst[fprintf] +


fputc::

  static inline int volatile fputc(int c, FILE* F);
 +
  Defines: write fileno +
 (link:../include/fputc.h[../include/fputc.h] l.10) manpage: link:manpages/stdio/putc.3.rst[fputc] +


fputs::

  static inline int volatile fputs(const char *c, FILE *F);
 +
  Defines: strlen write fileno +
 (link:../include/fputs.h[../include/fputs.h] l.20) manpage: link:manpages/stdio/fputs.3.rst[fputs] +


fread::

  static inline size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f);
 +
  Defines: read +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.162) manpage: link:manpages/stdio/fread.3.rst[fread] +


freopen::

  FILE *freopen(const char* filename, const char* mode, FILE *F);
 +
  Defines: open +
 (link:../src/fopen.c[../src/fopen.c] l.100) manpage: link:manpages/stdio/fopen.3.rst[freopen] +
modes implemented: r, r+, w, w+, a, a+ +
 

fseek::

  static inline int fseek(FILE *f, long offset, int whence );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.146) manpage: link:manpages/stdio/fseek.3.rst[fseek] +


fsetpos::

  static inline int fsetpos(FILE *f, int pos );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.133) manpage: link:manpages/stdio/fseek.3.rst[fsetpos] +


ftell::

  static inline long ftell(FILE *f);
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.121) manpage: link:manpages/stdio/fseek.3.rst[ftell] +


fwrite::

  static inline size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f);
 +
  Defines: write +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.106) manpage: link:manpages/stdio/fread.3.rst[fwrite] +


getc::

  #define getc(F) fgetc(F)
 +
  Defines: read fileno +
 (link:../include/fgetc.h[../include/fgetc.h] l.26) manpage: link:manpages/stdio/getc.3.rst[getc] +


getchar::

  #define getchar() fgetc(0)
 +
  Defines: read fileno +
 (link:../include/fgetc.h[../include/fgetc.h] l.29) manpage: link:manpages/stdio/getc.3.rst[getchar] +


gets::

  #define gets(F) fgets(F,0xfffffff,stdin)
 +
  Defines: read fileno +
 (link:../src/fgets.c[../src/fgets.c] l.29) manpage: link:manpages/stdio/fgets.3.rst[gets] +


itoHEX::

  int itoHEX(int i,char* buf,int padding);
 +
  Defines:  +
 (link:../src/itohex.c[../src/itohex.c] l.56)  +


itohex::

  int itohex(int i,char* buf,int padding);
 +
  Defines:  +
 (link:../src/itohex.c[../src/itohex.c] l.49)  +


perror::

  void perror(const char *msg);
 +
  Defines: fileno write strlen strerror +
 (link:../src/strerror.c[../src/strerror.c] l.31) manpage: link:manpages/string/strerror.3.rst[perror] +


printf::

  #define printf(...) fprintf(stdout,__VA_ARGS__)
 +
  Defines: fileno write +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.91) manpage: link:manpages/stdio/printf.3.rst[printf] +


putc::

  #define putc(c,stream) fputc(c,stream)
 +
  Defines: fileno write +
 (link:../include/fputc.h[../include/fputc.h] l.19) manpage: link:manpages/stdio/putc.3.rst[putc] +


putchar::

  #define putchar(c) fputc(c,stdout)
 +
  Defines: fileno write +
 (link:../include/fputc.h[../include/fputc.h] l.16) manpage: link:manpages/stdio/putc.3.rst[putchar] +


puts::

  #define puts(msg) ( print(msg) + printl() )
 +
  Defines: strlen write +
 (link:../include/prints.h[../include/prints.h] l.64) manpage: link:manpages/stdio/fputs.3.rst[puts] +
write msg to stdout, append a newline. Needs strlen. +
 

rewind::

  static inline void rewind( FILE *f );
 +
  Defines: lseek +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.156) manpage: link:manpages/stdio/fseek.3.rst[rewind] +


setbuf::

  static void setbuf(FILE *stream, char *buf);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.211) manpage: link:manpages/stdio/setbuf.3.rst[setbuf] +
dummy function. +
  There is no buffering implemented for the streams yet. +
 

setvbuf::

  static int setvbuf(FILE *stream, char *buf, int mode, size_t size);
 +
  (link:../include/mini_fstream.h[../include/mini_fstream.h] l.216) manpage: link:manpages/stdio/setbuf.3.rst[setvbuf] +
dummy function +
 

sprintf::

  #define sprintf(str,...) snprintf( str, 4096,  __VA_ARGS__)
 +
  Defines: write +
 (link:../src/sprintf.c[../src/sprintf.c] l.26) manpage: link:manpages/stdio/printf.3.rst[sprintf] +


ungetc::

  static int ungetc(int c, FILE *F);
 +
  (link:../include/fgetc.h[../include/fgetc.h] l.35) manpage: link:manpages/stdio/ungetc.3.rst[ungetc] +
pushes one char back to the stream. +
  Overwrites a previously pushed char +
  (conforming to the posix spec)  +
 

vfprintf::

  #define vfprintf(...) fprintf(__VA_ARGS__)
 +
  Defines: fileno write +
 (link:../include/mini_fstream.h[../include/mini_fstream.h] l.100) manpage: link:manpages/stdio/printf.3.rst[vfprintf] +




 stdlib.h
----------

abs::

  static int abs(int i);
 +
  (link:../include/math.h[../include/math.h] l.25) manpage: link:manpages/stdlib/abs.3.rst[abs] +


atoi::

  int atoi(const char *c);
 +
  (link:../src/atoi.c[../src/atoi.c] l.6) manpage: link:manpages/stdlib/atoi.3.rst[atoi] +


atol::

  long atol(const char *c);
 +
  (link:../src/atoi.c[../src/atoi.c] l.43) manpage: link:manpages/stdlib/atol.3.rst[atol] +


div::

  static div_t div(int numerator, int denominator);
 +
  (link:../include/math.h[../include/math.h] l.8) manpage: link:manpages/stdlib/div.3.rst[div] +


free::

  void volatile free(void* p);
 +
  (link:../src/malloc.c[../src/malloc.c] l.295) manpage: link:manpages/stdlib/memory.3.rst[free] +


getenv::

  char* getenv(const char* name);
 +
  Defines: environ +
 (link:../src/getenv.c[../src/getenv.c] l.8) manpage: link:manpages/stdlib/getenv.3.rst[getenv] +


labs::

  static long int labs(long int i);
 +
  (link:../include/math.h[../include/math.h] l.30) manpage: link:manpages/stdlib/labs.3.rst[labs] +


ldiv::

  static ldiv_t ldiv(long int numerator, long int denominator);
 +
  (link:../include/math.h[../include/math.h] l.16) manpage: link:manpages/stdlib/ldiv.3.rst[ldiv] +


malloc::

  void* volatile malloc(int size);
 +
  (link:../src/malloc.c[../src/malloc.c] l.245) manpage: link:manpages/stdlib/memory.3.rst[malloc] +


rand::

  unsigned int rand();
 +
  (link:../src/rand.c[../src/rand.c] l.15) manpage: link:manpages/stdlib/rand.3.rst[rand] +


realloc::

  void* realloc(void *p, int size);
 +
  Defines: malloc free +
 (link:../src/malloc.c[../src/malloc.c] l.176) manpage: link:manpages/stdlib/memory.3.rst[realloc] +


srand::

  void srand( unsigned int i );
 +
  (link:../src/rand.c[../src/rand.c] l.7) manpage: link:manpages/stdlib/rand.3.rst[srand] +


strtol::

  long int strtol(const char *c, char **endp, int base);
 +
  (link:../src/strtol.c[../src/strtol.c] l.3) manpage: link:manpages/stdlib/strtol.3.rst[strtol] +


system::

  int system( const char* command );
 +
  Defines: wait4 vfork execve environ write +
 (link:../src/system.c[../src/system.c] l.4) manpage: link:manpages/stdlib/system.3.rst[system] +


todo_putenv::

  int todo_putenv( char *s );
 +
  Defines: environ +
 (link:../src/getenv.c[../src/getenv.c] l.22)  +




 string.h
----------

_strcasecmp::

  int _strcasecmp(const char*c1,const char*c2,int len);
 +
  Defines: tolower +
 (link:../src/strcmp.c[../src/strcmp.c] l.30)  +


_strcmp::

  int _strcmp(const char*c1,const char*c2,int len);
 +
  (link:../src/strcmp.c[../src/strcmp.c] l.13)  +


memcmp::

  int memcmp(const void* c1,const void* c2,int len);
 +
  Defines: 0 +
 (link:../src/strcmp.c[../src/strcmp.c] l.85) manpage: link:manpages/string/memcmp.3.rst[memcmp] +


memcpy::

  void *memcpy( void *d, const void *s, int n );
 +
  (link:../src/memcpy.c[../src/memcpy.c] l.6) manpage: link:manpages/string/memcpy.3.rst[memcpy] +


memmove::

  void* memmove(void *dest, const void *src, int n);
 +
  (link:../src/memmove.c[../src/memmove.c] l.3) manpage: link:manpages/string/memmove.3.rst[memmove] +


memset::

  void *memset( void *s, int c, int n);
 +
  (link:../src/memset.c[../src/memset.c] l.3) manpage: link:manpages/string/memset.3.rst[memset] +


strcasecmp::

  int strcasecmp(const char*c1,const char*c2);
 +
  Defines:  +
 (link:../src/strcmp.c[../src/strcmp.c] l.49) manpage: link:manpages/string/string.3.rst[strcasecmp] +


strcat::

  char *strcat(char *dest, const char *src );
 +
  Defines: strlen +
 (link:../src/strcat.c[../src/strcat.c] l.7) manpage: link:manpages/string/string.3.rst[strcat] +


strchr::

  char *strchr(const char *s, int c);
 +
  Defines: strchrnul +
 (link:../src/strchr.c[../src/strchr.c] l.20) manpage: link:manpages/string/string.3.rst[strchr] +


strchrnul::

  char *strchrnul(const char *s, int c);
 +
  (link:../src/strchr.c[../src/strchr.c] l.7) manpage: link:manpages/string/strchr.3.rst[strchrnul] +


strcmp::

  int strcmp(const char*c1,const char*c2);
 +
  Defines:  +
 (link:../src/strcmp.c[../src/strcmp.c] l.68) manpage: link:manpages/string/string.3.rst[strcmp] +


strcpy::

  char *strcpy(char *dest, const char *src);
 +
  (link:../src/memcpy.c[../src/memcpy.c] l.17) manpage: link:manpages/string/string.3.rst[strcpy] +


strdup::

  char *strdup(const char *source);
 +
  Defines: strcpy strlen malloc +
 (link:../src/strdup.c[../src/strdup.c] l.7) manpage: link:manpages/string/strdup.3.rst[strdup] +


strerror::

  char* strerror( int errnum );
 +
  (link:../src/strerror.c[../src/strerror.c] l.9) manpage: link:manpages/string/string.3.rst[strerror] +


strlen::

  int strlen(const char*str);
 +
  (link:../src/strlen.c[../src/strlen.c] l.7) manpage: link:manpages/string/strlen.3.rst[strlen] +


strncasecmp::

  int strncasecmp(const char*c1,const char*c2,int len);
 +
  Defines:  +
 (link:../src/strcmp.c[../src/strcmp.c] l.57) manpage: link:manpages/string/string.3.rst[strncasecmp] +


strncmp::

  int strncmp(const char*c1,const char*c2,int len);
 +
  Defines:  +
 (link:../src/strcmp.c[../src/strcmp.c] l.76) manpage: link:manpages/string/string.3.rst[strncmp] +


strncpy::

  char *strncpy(char *dest, const char *src, int n);
 +
  Defines: memcpy +
 (link:../src/memcpy.c[../src/memcpy.c] l.27) manpage: link:manpages/string/string.3.rst[strncpy] +


strrchr::

  char *strrchr(const char *s, int c);
 +
  Defines: strchrnul +
 (link:../src/strchr.c[../src/strchr.c] l.36) manpage: link:manpages/string/string.3.rst[strrchr] +


strstr::

  char* strstr(const char *big, const char *little);
 +
  (link:../src/strstr.c[../src/strstr.c] l.3) manpage: link:manpages/string/strstr.3.rst[strstr] +




 sys/wait.h
------------

wait::

  pid_t wait(int *wstatus);
 +
  Defines: wait4 +
 (link:../src/wait.c[../src/wait.c] l.8) manpage: link:manpages/sys/wait.2.rst[wait] +


waitpid::

  pid_t waitpid(pid_t pid, int *wstatus, int options);
 +
  Defines: wait4 +
 (link:../src/wait.c[../src/wait.c] l.16) manpage: link:manpages/sys/wait.2.rst[waitpid] +




 time.h
--------

time::

  time(unsigned int *a1 )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.188) manpage: link:manpages/gen/time.3.rst[time] +




 unistd.h
----------

access::

  access( const char *filename, int mode)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.156) manpage: link:manpages/sys/access.2.rst[access] +


chdir::

  chdir(const char* path)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.105) manpage: link:manpages/sys/chdir.2.rst[chdir] +


chown::

  chown( const char *filename, uid_t user, gid_t group)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.171) manpage: link:manpages/sys/chown.2.rst[chown] +


chroot::

  chroot( const char *filename)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.135) manpage: link:manpages/sys/chroot.2.rst[chroot] +


close::

  close( int fd )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.94) manpage: link:manpages/sys/close.2.rst[close] +


dup::

  dup(int a1)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.110) manpage: link:manpages/sys/dup.2.rst[dup] +


dup2::

  dup2(int a1, int a2)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.111) manpage: link:manpages/sys/dup.2.rst[dup2] +


execv::

  static inline int execv(const char *pathname, char *const argv[]);
 +
  Defines: environ execve +
 (link:../src/execvp.c[../src/execvp.c] l.7) manpage: link:manpages/gen/exec.3.rst[execv] +


execve::

  execve( const char *filename,  char* const* argv, char* const* envp)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.121) manpage: link:manpages/sys/execve.2.rst[execve] +


execvp::

  static inline int execvp(const char *file, char *const argv[]);
 +
  Defines: environ execve +
 (link:../src/execvp.c[../src/execvp.c] l.61) manpage: link:manpages/gen/exec.3.rst[execvp] +


execvpe::

  static int execvpe(const char *file, char *const argv[], char *const envp[]);
 +
  Defines: environ access execve +
 (link:../src/execvp.c[../src/execvp.c] l.21)  +
When invoked with a filename, starting with "." or "/", +
  interprets this as absolute path. (calls execve with the pathname) +
  Looks for file in the PATH environment, othwerise. +
 

fexecveat::

  static inline int fexecveat(int fd, char *const argv[], char *const envp[]);
 +
  (link:../src/execvp.c[../src/execvp.c] l.12)  +


fork::

  DEF_syscall(fork,0)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.125) manpage: link:manpages/sys/fork.2.rst[fork] +


fsync::

  fsync(int a1 )
 +
 (link:../include/lseek.h[../include/lseek.h] l.20) manpage: link:manpages/sys/fsync.2.rst[fsync] +


ftruncate::

  ftruncate(unsigned int a1, unsigned int a2 )
 +
 (link:../include/lseek.h[../include/lseek.h] l.19) manpage: link:manpages/sys/truncate.2.rst[ftruncate] +


getgid::

  DEF_syscall(getgid,0)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.175) manpage: link:manpages/sys/getgid.2.rst[getgid] +


getpgrp::

  DEF_syscall(getpgrp,0)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.176) manpage: link:manpages/sys/getpgrp.2.rst[getpgrp] +


getpid::

  DEF_syscall(getpid,0 )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.139) manpage: link:manpages/sys/getpid.2.rst[getpid] +


getuid::

  DEF_syscall(getuid,0)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.179) manpage: link:manpages/sys/getuid.2.rst[getuid] +


isatty::

  int isatty(int fd);
 +
  Defines: ioctl +
 (link:../src/isatty.c[../src/isatty.c] l.7) manpage: link:manpages/gen/ttyname.3.rst[isatty] +


link::

  link( const char *oldname, const char *newname)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.116) manpage: link:manpages/sys/link.2.rst[link] +


lseek::

  lseek(unsigned int a1, int a2, int a3 )
 +
 (link:../include/lseek.h[../include/lseek.h] l.17) manpage: link:manpages/sys/lseek.2.rst[lseek] +


mkdir::

  mkdir( const char *pathname, int mode)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.153) manpage: link:manpages/sys/mkdir.2.rst[mkdir] +


open::

  int volatile open( const char *s, int flags, ... );
 +
  (link:../src/open.c[../src/open.c] l.13) manpage: link:manpages/sys/open.2.rst[open] +


pipe::

  pipe( int *filedes)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.168) manpage: link:manpages/sys/pipe.2.rst[pipe] +


read::

  read( int fd, void *buf, int len )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.95) manpage: link:manpages/sys/read.2.rst[read] +


rename::

  rename( const char* oldpath, const char* newpath )		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.100) manpage: link:manpages/sys/rename.2.rst[rename] +


rmdir::

  rmdir( const char *pathname)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.154) manpage: link:manpages/sys/rmdir.2.rst[rmdir] +


select::

  static int volatile __attribute__((optimize("O0"))) select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait);
 +
  (link:../include/select.h[../include/select.h] l.9) manpage: link:manpages/sys/select.2.rst[select] +


setgid::

  setgid( gid_t gid)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.141) manpage: link:manpages/sys/setuid.2.rst[setgid] +


setpgid::

  setpgid( pid_t pid, pid_t pgid)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.174) manpage: link:manpages/sys/setpgid.2.rst[setpgid] +


setsid::

  DEF_syscall(setsid,0 )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.140) manpage: link:manpages/sys/setsid.2.rst[setsid] +


setuid::

  setuid( uid_t uid)
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.142) manpage: link:manpages/sys/setuid.2.rst[setuid] +


sleep::

  unsigned int volatile sleep(unsigned int seconds);
 +
  (link:../src/sleep.c[../src/sleep.c] l.10) manpage: link:manpages/gen/sleep.3.rst[sleep] +
nonconformant sleep +
  TODO: ignore blocked signals, sigchld +
 

tcgetattr::

  static inline int __attribute__((always_inline)) tcgetattr(int fd, struct termios *io);
 +
  Defines: ioctl +
 (link:../include/tcgetattr.h[../include/tcgetattr.h] l.21) manpage: link:manpages/gen/tcsetattr.3.rst[tcgetattr] +


tcsetattr::

  static inline int __attribute__((always_inline)) tcsetattr(int fd, int opt, const struct termios *io);
 +
  Defines: ioctl +
 (link:../include/tcsetattr.h[../include/tcsetattr.h] l.20) manpage: link:manpages/gen/tcsetattr.3.rst[tcsetattr] +


unlink::

  unlink( const char* a1)		
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.101) manpage: link:manpages/sys/unlink.2.rst[unlink] +


usleep::

  unsigned int volatile usleep(unsigned int useconds);
 +
  (link:../src/sleep.c[../src/sleep.c] l.31) manpage: link:manpages/gen/usleep.3.rst[usleep] +
nonconformant usleep.  +
  Sleep useconds. +
  I just hope, noone relies on an exact sleep time. +
  which isn't possible without a real time os, anyways. +
  When for whatever reason you'd need nanoseconds exact times, +
  best shot might be a spinloop, and looking for cpu ticks. +
  +
  TODO: ignore blocked signals, sigchld +
 

write::

  write(int fd,const void *buf, int len )
 +
 (link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.96) manpage: link:manpages/sys/write.2.rst[write] +


