
#conversions

f:_itobin|D:int _itobin(int i, char*buf, int prec, int groups )|c:conversions|x:|
f:_itohex|D:int _itohex(int i,char* buf,int padding, int capitals)|c:conversions|x:|
f:atoi|D:int atoi(const char *c)|c:conversions|x:convert a string to an integer|
f:atol|D:long atol(const char *c)|c:conversions|x:convert a string to a long integer|
f:dtodec|D:int dtodec(double d, char* buf, int precision)|c:conversions|x:|
f:itoHEX|D:int itoHEX(int i,char* buf,int padding)|c:conversions|x:|
f:itobin|D:#define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )|c:conversions|x:|
f:itodec|D:int itodec(int i, char *buf, int prec, char limiter, char pad )|c:conversions|x:|
f:itohex|D:int itohex(int i,char* buf,int padding)|c:conversions|x:|
f:itooct|D:int itooct(int i, char *buf)|c:conversions|x:|
f:ltodec|D:int ltodec(long i, char *buf, int prec, char limiter )|c:conversions|x:|
f:strtol|D:long int strtol(const char *c, const char **endp, int base)|c:conversions|x:convert a string to a long integer|
f:uitodec|D:int uitodec(unsigned int i, char *buf, int prec, char limiter, char pad )|c:conversions|x:|
f:ultodec|D:int ultodec(unsigned long ui, char *buf, int prec, char limiter )|c:conversions|x:|

#directories

f:alphasort|D:int alphasort( const struct dirent** de1, const struct dirent** de2 )|c:directories|x:|
f:basename|D:char *basename(char *path)|c:directories|x:return the last component of a pathname|
f:chdir|D:int chdir(const char* path)|c:directories|x:change working directory|
f:dirbuf|D:|c:directories|x:|
f:dirbufsize|D:|c:|x:|
f:dirfd|D:int dirfd(DIR *d)|c:directories|x:extract the file descriptor used by a DIR stream|
f:dirname|D:char *dirname(char *s)|c:directories|x:report the parent directory name of a file pathname|
f:fstat|D:int fstat(int fd,struct stat* statbuf)|c:directories|x:get file status|
f:getcwd|D:int getcwd( char *buf,  unsigned long size)|c:directories|x:get the pathname of the current working directory|
f:getdents|D:int getdents( unsigned int fd, struct dirent *direntry, unsigned int count )|c:directories|x:get directory entries|
f:inotify_add_watch|D:int inotify_add_watch( int fd,  const char *pathname,  u32 mask)|c:directories|x:|
f:inotify_init|D:int DEF_syscall(inotify_init,0)|c:directories|x:|
f:inotify_init1|D:int inotify_init1( int flags)|c:directories|x:|
f:inotify_rm_watch|D:int inotify_rm_watch( int fd,  __s32 wd)|c:directories|x:|
f:mkdir|D:int mkdir( const char *pathname, int mode)|c:directories|x:make a directory relative to directory file descriptor|
f:opendir|D:DIR *opendir(const char *name )|c:directories|x:open directory associated with file descriptor|
f:opendirp|D:DIR *opendirp(const char *name, DIR *dir)|c:directories|x:|
f:readdir|D:struct dirent *readdir(DIR *dir)|c:directories|x:read a directory|
f:rewinddir|D:void rewinddir(DIR *dir)|c:directories|x:reset the position of a directory stream to the beginning|
f:rmdir|D:int rmdir( const char *pathname)|c:directories|x:remove a directory|
f:scandir|D:int scandir(const char *path, struct dirent **listing[], int (*fp_select)(const struct dirent *),	int (*cmp)(const struct dirent **, const struct dirent **))|c:directories|x:scan a directory|
f:scandir_bufsize|D:|c:directories|x:|
f:seekdir|D:void seekdir(DIR *dir, long off)|c:directories|x:set the position of a directory stream|
f:telldir|D:long telldir(DIR *dir)|c:directories|x:current location of a named directory stream|

#errno

f:errno|D:#ifdef mini_errno|c:errno|x:error return value|
f:errno_str|D:char *errno_str(int err)|c:errno|x:|
f:exit_errno|D:void exit_errno( int errnum )|c:errno|x:|
f:perror|D:void perror(const char *msg)|c:errno|x:write error messages to standard error|
f:ret_errno|D:#ifdef mini_errno|c:errno|x:|
f:seterrno|D:#ifdef mini_errno|c:errno|x:|
f:strerror|D:char* strerror( int errnum )|c:errno|x:|
f:verbose_errstr|D:const char* verbose_errstr(int num)|c:errno|x:|
f:verbose_errstr2|D:const char* verbose_errstr2(int num)|c:errno|x:|

#files

f:_fopen|D:FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f)|c:files|x:|
f:access|D:int access( const char *filename, int mode)|c:files|x:determine accessibility of a file relative to directory file|
f:chmod|D:int chmod( const char *filename, mode_t mode)|c:files|x:change mode of a file relative to directory file descriptor|
f:chown|D:int chown( const char *filename, uid_t user, gid_t group)|c:files|x:change owner and group of a file relative to directory|
f:close|D:int close( int fd )|c:files|x:close a file descriptor|
f:closedir|D:int closedir(DIR *dir)|c:files|x:close a directory stream|
f:creat|D:int volatile creat( const char *s, int mode )|c:files|x:create a new file or rewrite an existing one|
f:dup|D:int dup(int fd)|c:files|x:duplicate an open file descriptor|
f:dup2|D:int dup2(int oldfd, int newfd)|c:files|x:duplicate a file descriptor|
f:dup3|D:int dup3(int oldfd, int newfd, int flags)|c:files|x:duplicate a file descriptor|
f:fchmod|D:int fchmod( unsigned int fd, mode_t mode)|c:files|x:change mode of a file|
f:fchown|D:int fchown( unsigned int fd, uid_t user, gid_t group)|c:files|x:change owner and group of a file|
f:fcntl|D:int fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)|c:files|x:file control|
f:fsync|D:int fsync(int a1 )|c:files|x:synchronize changes to a file|
f:ftruncate|D:int ftruncate(unsigned int a1, unsigned int a2 )|c:files|x:truncate a file to a specified length|
f:link|D:int link( const char *oldname, const char *newname)|c:files|x:link one file to another file relative to two directory|
f:lseek|D:int lseek(unsigned int a1, int a2, int a3 )|c:files|x:move the read/write file offset|
f:open|D:int volatile open( const char *s, int flags, ... )|c:files|x:open file relative to directory file descriptor|
f:readahead|D:int readahead( int fd,  loff_t offset,  size_t count)|c:files|x:initiate file readahead into page cache|
f:rename|D:int rename( const char* oldpath, const char* newpath )|c:files|x:rename file relative to directory file descriptor|
f:select|D:int volatile  select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait)|c:files|x:synchronous I/O multiplexing|
f:sendfile|D:int sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)|c:files|x:transfer data between file descriptors|
f:stat|D:int stat(const char* filename,struct stat* statbuf)|c:files|x:get file status|
f:symlink|D:int symlink( const char *oldname,  const char *newname)|c:files|x:make a symbolic link relative to directory file descriptor|
f:umask|D:int umask( int mask)|c:files|x:set and get the file mode creation mask|
f:unlink|D:int unlink( const char* path)|c:files|x:remove a directory entry relative to directory file descriptor|

#hashes

f:djb_cksum|D:unsigned int djb_cksum( const char* p, unsigned int len )|c:hashes|x:|

#input

f:fgetc|D:int fgetc(FILE *F)|c:input|x:get a byte from a stream|
f:fgets|D:char* fgets(char *buf, int size, FILE* F)|c:input|x:get a string from a stream|
f:getc|D:#define getc(F) fgetc(F)|c:input|x:get a byte from a stream|
f:getchar|D:#define getchar() fgetc(0)|c:input|x:get a byte from a|
f:gets|D:#define gets(F) fgets(F,0xfffffff,stdin)|c:input|x:get a string from a|
f:read|D:int read( int fd, void *buf, int len )|c:input|x:read from a file|
f:ungetc|D:int ungetc(int c, FILE *F)|c:input|x:push byte back into input stream|

#ipc

f:kill|D:int kill( pid_t pid,  int sig)|c:ipc|x:send a signal to a process or a group of processes|
f:mkfifo|D:int mkfifo( const char* path, mode_t mode )|c:ipc|x:make a FIFO special file relative to directory file descriptor|
f:pipe|D:int pipe( int *filedes)|c:ipc|x:create an interprocess channel|
f:raise|D:int raise(int signr)|c:ipc|x:send a signal to the executing process|
f:rt_sigaction|D:int rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)|c:ipc|x:examine and change a signal action|
f:rt_sigprocmask|D:int rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)|c:ipc|x:examine and change blocked signals|
f:rt_sigreturn|D:int rt_sigreturn( unsigned long __unused)|c:ipc|x:return from signal handler and cleanup stack frame|
f:sigaction|D:int volatile sigaction(int sig, const struct sigaction *act, struct sigaction *oact)|c:ipc|x:examine and change a signal action|
f:sigaddset|D:int sigaddset(sigset_t *set, int sig)|c:ipc|x:add a signal to a signal set|
f:sigdelset|D:int sigdelset(sigset_t *set, int sig)|c:ipc|x:delete a signal from a signal set|
f:sigemptyset|D:int sigemptyset(sigset_t *set)|c:ipc|x:initialize and empty a signal set|
f:sigfillset|D:int sigfillset(sigset_t *set)|c:ipc|x:initialize and fill a signal set|
f:sigismember|D:int sigismember(sigset_t *set, int sig)|c:ipc|x:test for a signal in a signal set|
f:signal|D:sighandler_t signal(int sig, sighandler_t func )|c:ipc|x:signal management|
f:sigprocmask|D:int sigprocmask(int how, const sigset_t *set, sigset_t *oldset)|c:ipc|x:examine and change blocked signals|
f:wait|D:pid_t wait(int *wstatus)|c:ipc|x:wait for a child process to stop or terminate|
f:wait4|D:int wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)|c:ipc|x:wait for process to change state, BSD style|
f:waitpid|D:pid_t waitpid(pid_t pid, int *wstatus, int options)|c:ipc|x:wait for a child process to stop or terminate|

#math

f:abs|D:int abs(int i)|c:math|x:return an integer absolute value|
f:div|D:div_t div(int numerator, int denominator)|c:math|x:compute the quotient and remainder of an integer division|
f:djb2_hash|D:unsigned long djb2_hash(const unsigned char *str)|c:math|x:|
f:labs|D:long int labs(long int i)|c:math|x:return a long integer absolute value|
f:ldiv|D:ldiv_t ldiv(long int numerator, long int denominator)|c:math|x:compute quotient and remainder of a long division|
f:rand|D:unsigned int rand()|c:math|x:|
f:sdbm_hash|D:unsigned long sdbm_hash(const unsigned char *str)|c:math|x:|
f:srand|D:void srand( unsigned int i )|c:math|x:pseudo-random number generator|

#memory

f:brk|D:int brk( const void* addr )|c:memory|x:change data segment size|
f:free|D:void free(void *p)|c:memory|x:free allocated memory|
f:free_brk|D:int free_brk()|c:memory|x:|
f:getbrk|D:long getbrk()|c:memory|x:|
f:malloc|D:void* malloc(int size)|c:memory|x:a memory allocator|
f:malloc_brk|D:void* malloc_brk(int size)|c:memory|x:|
f:map_protected|D:void* map_protected(int len)|c:memory|x:|
f:memcmp|D:int memcmp(const void* c1,const void* c2,int len)|c:memory|x:compare bytes in memory|
f:memcpy|D:void* memcpy( void*d, const void *s, int n )|c:memory|x:copy bytes in memory|
f:memfd_create|D:int memfd_create( const char  *uname_ptr,  unsigned int flags)|c:memory|x:create an anonymous file|
f:memfrob|D:void* memfrob(void* s, unsigned int len)|c:memory|x:frobnicate (encrypt) a memory area|
f:memmove|D:void* memmove(void *dest, const void *src, int n)|c:memory|x:copy bytes in memory with overlapping areas|
f:memset|D:void *memset( void *s, int c, int n)|c:memory|x:set bytes in memory|
f:mmap|D:void*  mmap(void* addr,  size_t len,  int prot,  int flags,  int fd,  off_t off)|c:memory|x:map pages of memory|
f:mprotect|D:int mprotect( POINTER *a1, POINTER a2, int a3 )|c:memory|x:set protection of memory mapping|
f:mremap|D:void* volatile  mremap(void* addr, size_t old_len, size_t new_len, int flags, void* new_addr)|c:memory|x:remap a virtual memory address|
f:munmap|D:int munmap( void* addr,  size_t len)|c:memory|x:unmap pages of memory|
f:realloc|D:void* realloc(void *p, int size)|c:memory|x:memory reallocator|
f:sbrk|D:void* sbrk(long incr)|c:memory|x:change data segment size|
f:splice|D:int splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)|c:memory|x:splice data to/from a pipe|
f:swap|D:void swap(void* a, void* b,int size)|c:memory|x:|
f:unmap_protected|D:int unmap_protected(void *p, int len)|c:memory|x:|

#output

f:_mprints|D:#define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)|c:output|x:|
f:ansicolors|D:|c:output|x:|
f:dprintf|D:int dprintf( int fd, const char *fmt, ... )|c:output|x:print formatted output|
f:dprints|D:int dprints(int fd, const char *msg,...)|c:output|x:|
f:eprint|D:#define eprint(str) write(STDERR_FILENO,str,strlen(str))|c:output|x:|
f:eprintfs|D:#define eprintfs(fmt,...) fprintfs(stderr, fmt, __VA_ARGS__)|c:output|x:|
f:eprintl|D:#define eprintl() write(STDERR_FILENO,"\n",1)|c:output|x:|
f:eprints|D:#define eprints(...) dprints(STDERR_FILENO,__VA_ARGS__,0)|c:output|x:|
f:eprintsl|D:#define eprintsl(...) dprints(STDERR_FILENO,__VA_ARGS__,"\n",0)|c:output|x:|
f:eputs|D:#define eputs(msg) ( eprint(msg) + eprintl() )|c:output|x:|
f:ewrites|D:#define ewrites(str) write(STDERR_FILENO,str,sizeof(str))|c:output|x:|
f:fprint|D:#define fprint(...) fprintf(__VA_ARGS__)|c:output|x:|
f:fprintf|D:#define fprintf(stream,...)	write(fileno(stream),mlgl->mbuf,snprintf(mlgl->mbuf,mini_buf,__VA_ARGS__))|c:output|x:|
f:fprintfs|D:int fprintfs( FILE* F, char *fmt, ...)|c:output|x:|
f:fprints|D:#define fprints(F,...) dprints(fileno(F),__VA_ARGS__,0)|c:output|x:|
f:fputc|D:int volatile fputc(int c, FILE* F)|c:output|x:put a byte on a stream|
f:fwrite|D:size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f)|c:output|x:binary output|
f:fwrites|D:#define fwrites(fd,str) write(fd,str,sizeof(str))|c:output|x:|
f:group_print|D:|c:output|x:|
f:group_write|D:|c:output|x:|
f:print|D:#define print(str) write(STDOUT_FILENO,str,strlen(str))|c:output|x:|
f:printf|D:#define printf(...) fprintf(stdout,__VA_ARGS__)|c:output|x:print formatted output|
f:printfs|D:#define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)|c:output|x:|
f:printl|D:#define printl() write(STDOUT_FILENO,"\n",1)|c:output|x:|
f:prints|D:#define prints(...) _mprints(__VA_ARGS__,0)|c:output|x:|
f:printsl|D:#define printsl(...) _mprints(__VA_ARGS__,"\n",0)|c:output|x:|
f:putc|D:#define putc(c,stream) fputc(c,stream)|c:output|x:put a byte on a stream|
f:putchar|D:#define putchar(c) fputc(c,stdout)|c:output|x:put a byte on a stdout stream|
f:puts|D:#define puts(msg) ( print(msg) + printl() )|c:output|x:put a string on standard output|
f:shortcolornames|D:|c:output|x:|
f:snprintf|D:int snprintf( char *buf, size_t size, const char *fmt, ... )|c:output|x:print formatted output|
f:vfprintf|D:#define vfprintf(...) fprintf(__VA_ARGS__)|c:output|x:|
f:vsnprintf|D:int vsnprintf(char *buf, size_t size, const char* fmt, va_list args )|c:output|x:format output of a stdarg argument list|
f:vsprintf|D:int vsprintf( char *buf, const char *fmt, ... )|c:output|x:|
f:write|D:int write(int fd,const void *buf, int len )|c:output|x:write on a file|
f:writes|D:#define writes(str) write(STDOUT_FILENO,str,sizeof(str))|c:output|x:|

#process

f:abort|D:void abort()|c:process|x:|
f:atexit|D:int atexit( functionp* func )|c:process|x:|
f:clone|D:int clone( int clone_flags,  unsigned long stack,  void *parent_tid,  void *child_tid)|c:process|x:|
f:clone_t|D:int clone_t(int flags)|c:process|x:|
f:execl|D:int execl(const char *pathname, const char* arg0,... )|c:process|x:|
f:execv|D:int execv(const char *pathname, char *const argv[])|c:process|x:execute a file|
f:execve|D:int execve( const char *filename,  char* const* argv, char* const* envp)|c:process|x:execute program|
f:execveat|D:int execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)|c:process|x:execute program relative to a directory file descriptor|
f:execvp|D:int execvp(const char *file, char *const argv[])|c:process|x:execute a file|
f:execvpe|D:int execvpe(const char *file, char *const argv[], char *const envp[])|c:process|x:execute a file|
f:fexecve|D:int fexecve(int fd, char *const argv[], char *const envp[])|c:process|x:execute a file|
f:fexecveat|D:int fexecveat(int fd, char *const argv[], char *const envp[])|c:process|x:|
f:fork|D:int DEF_syscall(fork,0)|c:process|x:create a new process|
f:getenv|D:char* getenv(const char* name)|c:process|x:get value of an environment variable|
f:getpgrp|D:int DEF_syscall(getpgrp,0)|c:process|x:get the process group ID of the calling process|
f:getpid|D:int DEF_syscall(getpid,0 )|c:process|x:get the process ID|
f:getppid|D:int DEF_syscall(getppid,0)|c:process|x:get the parent process ID|
f:setpgid|D:int setpgid( pid_t pid, pid_t pgid)|c:process|x:set process group ID for job control|
f:setsid|D:int DEF_syscall(setsid,0 )|c:process|x:create session and set process group ID|
f:system|D:int system( const char* command )|c:process|x:issue a command|
f:vexec|D:int vexec( const char* path, char* const* argv, char* const* envp )|c:process|x:|
f:vexec_q|D:int vexec_q( const char* path, char* const* argv, char* const* envp )|c:process|x:|
f:vfork|D:int DEF_syscall(vfork,0)|c:process|x:create a child process and block parent|

#regex

f:ext_match|D:int ext_match(char *text, const char *re, void(*p_match)(int number, char *pos,int len), int(*p_match_char)(int number, char *match_char), regex_match *st_match)|c:regex|x:|
f:match|D:int match(char *text, const char *re, text_match *st_match)|c:regex|x:|

#streams

f:clearerr|D:void clearerr(FILE *f)|c:streams|x:clear indicators on a stream|
f:clearerror|D:void clearerror(FILE *f)|c:streams|x:|
f:fclose|D:int  fclose( FILE* f )|c:streams|x:close a stream|
f:fdopen|D:FILE *fdopen(int fd, const char* mode)|c:streams|x:associate a stream with a file descriptor|
f:feof|D:int feof(FILE *f)|c:streams|x:test end-of-file indicator on a stream|
f:ferror|D:int ferror(FILE *f)|c:streams|x:test error indicator on a stream|
f:fflush|D:int  fflush( FILE *F )|c:streams|x:flush a stream|
f:fgetpos|D:void fgetpos(FILE *f, long *pos )|c:streams|x:get current file position information|
f:fileno|D:int fileno( FILE *f )|c:streams|x:map a stream pointer to a file descriptor|
f:fopen|D:FILE *fopen(const char* filename, const char* mode)|c:streams|x:open a stream|
f:fputs|D:int volatile fputs(const char *c, FILE *F)|c:streams|x:put a string on a stream|
f:fread|D:size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f)|c:streams|x:binary input|
f:freopen|D:FILE *freopen(const char* filename, const char* mode, FILE *F)|c:streams|x:open a stream|
f:fseek|D:int fseek(FILE *f, long offset, int whence )|c:streams|x:reposition a file-position indicator in a stream|
f:fsetpos|D:int fsetpos(FILE *f, int pos )|c:streams|x:set current file position|
f:ftell|D:long ftell(FILE *f)|c:streams|x:return a file offset in a stream|
f:rewind|D:void rewind( FILE *f )|c:streams|x:reset the file position indicator in a stream|
f:setbuf|D:void setbuf(FILE *stream, char *buf)|c:streams|x:assign buffering to a stream|
f:setvbuf|D:int setvbuf(FILE *stream, char *buf, int mode, size_t size)|c:streams|x:assign buffering to a stream|

#strings

f:_strcasecmp|D:int _strcasecmp(const char*c1,const char*c2,int len)|c:strings|x:|
f:_strcmp|D:int _strcmp(const char*c1,const char*c2,int len)|c:strings|x:|
f:sprintf|D:#define sprintf(str,...) snprintf( str, mini_buf,  __VA_ARGS__)|c:strings|x:print formatted output|
f:strcasecmp|D:int strcasecmp(const char*c1,const char*c2)|c:strings|x:|
f:strcat|D:char *strcat(char *dest, const char *src )|c:strings|x:concatenate two strings|
f:strchr|D:char *strchr(const char *s, int c)|c:strings|x:string scanning operation|
f:strchrnul|D:char *strchrnul(const char *s, int c)|c:strings|x:locate character in string|
f:strcmp|D:int strcmp(const char*c1,const char*c2)|c:strings|x:compare two strings|
f:strcpy|D:char *strcpy(char *dest, const char *src)|c:strings|x:copy a string and return a pointer to the end of the result|
f:strdup|D:char *strdup(const char *source)|c:strings|x:duplicate a specific number of bytes from a string|
f:strlen|D:int strlen(const char*str)|c:strings|x:get length of fixed size string|
f:strncasecmp|D:int strncasecmp(const char*c1,const char*c2,int len)|c:strings|x:case-insensitive string comparisons|
f:strncmp|D:int strncmp(const char*c1,const char*c2,int len)|c:strings|x:compare part of two strings|
f:strncpy|D:char *strncpy(char *dest, const char *src, int n)|c:strings|x:copy fixed length string, returning a pointer to the array end|
f:strrchr|D:char *strrchr(const char *s, int c)|c:strings|x:string scanning operation|
f:strstr|D:char* strstr(const char *big, const char *little)|c:strings|x:find a substring|

#system

f:chroot|D:int chroot( const char *filename)|c:system|x:change root directory|
f:getgid|D:int DEF_syscall(getgid,0)|c:system|x:get the real group ID|
f:getuid|D:int DEF_syscall(getuid,0)|c:system|x:get a real user ID|
f:ioctl|D:int volatile   ioctl( int fd, unsigned long int request, ... )|c:system|x:control a STREAMS device (\fBSTREAMS\fP)|
f:macro|D:void  optimization_fence(void*p){}|c:system|x:|
f:mknod|D:int mknod( const char *filename,  umode_t mode,  unsigned dev)|c:system|x:make directory, special file, or regular file|
f:mount|D:int mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)|c:system|x:mount filesystem|
f:pivot_root|D:int pivot_root( const char *new_root,  const char *put_old)|c:system|x:change the root mount|
f:putenv|D:int putenv( char *string )|c:system|x:|
f:reboot|D:int reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)|c:system|x:reboot or enable/disable Ctrl-Alt-Del|
f:setgid|D:int setgid( gid_t gid)|c:system|x:set-group-ID|
f:setgroups|D:int setgroups( int gidsetsize,  gid_t *grouplist)|c:system|x:|
f:setuid|D:int setuid( uid_t uid)|c:system|x:set user ID|
f:sync|D:int DEF_syscall(sync,0)|c:system|x:schedule file system updates|
f:umount2|D:int umount2( const char *mountpoint, int flags)|c:system|x:unmount filesystem|
f:uname|D:int uname(struct new_utsname *name )|c:system|x:get the name of the current system|

#terminal

f:grantpt|D:int grantpt(int fd)|c:terminal|x:grant access to the slave pseudo-terminal device|
f:isatty|D:int isatty(int fd)|c:terminal|x:test for a terminal device|
f:nanosleep|D:int nanosleep( struct timespec *rqtp, struct timespec *rmtp)|c:terminal|x:high resolution sleep|
f:posix_openpt|D:int posix_openpt(int flags)|c:terminal|x:open a pseudo-terminal device|
f:ptsname|D:char *ptsname(int fd)|c:terminal|x:get name of the slave pseudo-terminal device|
f:ptsname_r|D:int ptsname_r(int fd, char *buf, size_t len)|c:terminal|x:get the name of the slave pseudoterminal|
f:tcgetattr|D:int tcgetattr(int fd, struct termios *io)|c:terminal|x:get the parameters associated with the terminal|
f:tcsetattr|D:int tcsetattr(int fd, int opt, const struct termios *io)|c:terminal|x:set the parameters associated with the terminal|
f:unlockpt|D:int unlockpt(int fd)|c:terminal|x:unlock a pseudo-terminal master/slave pair|
f:vhangup|D:int DEF_syscall(vhangup,0 )|c:terminal|x:virtually hangup the current terminal|

#time

f:getitimer|D:int getitimer( int which,  struct itimerval *value)|c:time|x:get and set value of interval timer|
f:gettimeofday|D:int gettimeofday( struct timeval *a1, struct timezone *a2)|c:time|x:get the date and time|
f:setitimer|D:int setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)|c:time|x:set the value of an interval timer|
f:sleep|D:unsigned int volatile sleep(unsigned int seconds)|c:time|x:suspend execution for an interval of time|
f:time|D:int time(unsigned int *a1 )|c:time|x:get time|
f:usleep|D:unsigned int volatile usleep(unsigned int useconds)|c:time|x:suspend execution for microsecond intervals|
f:utime|D:int utime( const char *filename, struct utimbuf *times)|c:time|x:set file access and modification times|

#unsorted

f:ALIGN|D:|c:unsorted|x:|
f:OPTFENCE|D:void  opt_fence(void*p,...)|c:unsorted|x:|
f:OPTIMIZATIONS|D:|c:unsorted|x:|
f:_die|D:void _die()|c:unsorted|x:|
f:_match|D:int _match(char *text, const char *re, text_match *st_match)|c:unsorted|x:|
f:_match_ext2|D:char* _match_ext2(char *text, char *re, void(*p_matched_cb)(int number, char *pos,int len), int(*p_wildcard_cb)(int number, char *match_char), text_match *st_match)|c:unsorted|x:|
f:bind|D:int bind( int fd,  struct sockaddr *umyaddr,  int addrlen)|c:unsorted|x:|
f:bsd_cksum|D:unsigned int bsd_cksum( const char* p, unsigned int len )|c:unsorted|x:|
f:bsd_cksumblock|D:unsigned int bsd_cksumblock( unsigned int hash, const char* p, unsigned int len )|c:unsorted|x:|
f:calloc|D:void* calloc(int nmemb, int size)|c:unsorted|x:|
f:cfmakeraw|D:void cfmakeraw(struct termios *tp)|c:unsorted|x:|
f:config|D:|c:unsorted|x:|
f:def|D:#define SETOPT_short( opts, option ) (|c:unsorted|x:|
f:die|D:#define die(errnum,msg) {ewritesl(msg);exit_errno(errnum);}|c:unsorted|x:|
f:die_if|D:#define die_if( when, errnum, msg ) if( when ) die( errnum, msg )|c:unsorted|x:|
f:dief|D:#define dief(errnum,fmt,...) {fprintf(stderr,fmt,__VA_ARGS__);exit_errno(errnum);}|c:unsorted|x:|
f:dief_if|D:#define dief_if( when, errnum, fmt,... ) if( when ) dief( errnum, fmt, __VA_ARGS__ )|c:unsorted|x:|
f:dies|D:#define dies(errnum,...) {eprintsl(__VA_ARGS__);exit_errno(errnum);}|c:unsorted|x:|
f:dies_if|D:#define dies_if( when, errnum, ... ) if( when ) dies( errnum, __VA_ARGS__ )|c:unsorted|x:|
f:dirbuf_malloc|D:#ifndef mini_dirbuf_malloc|c:unsorted|x:|
f:eprintf|D:#define eprintf(fmt,...) fprintf(stderr, fmt, __VA_ARGS__)|c:unsorted|x:|
f:err|D:#define err( status, fmt ... ) { fprintf(stderr,fmt ); fprints(stderr,":",strerror(errno)); exit(status); }|c:unsorted|x:|
f:error|D:#define error( status, errnum, fmt ... ) { fprintf(stderr,fmt ); if (errnum) fprints(stderr,":",strerror(errnum)); if ( status ) exit(status); }|c:unsorted|x:|
f:errx|D:#define errx( status, fmt ... ) { fprintf(stderr,fmt); exit(status); }|c:unsorted|x:|
f:ewritesl|D:#define ewritesl(str) write(STDERR_FILENO,str"\n",sizeof(str)+1)|c:unsorted|x:|
f:fgetsn|D:int fgetsn(char *buf, int size, FILE* F)|c:unsorted|x:|
f:fgetsp|D:char* fgetsp(char *buf, int size, FILE* F)|c:unsorted|x:|
f:fgetud|D:unsigned int fgetud(FILE* F)|c:unsorted|x:|
f:fgetul|D:unsigned long int fgetul(FILE* F)|c:unsorted|x:|
f:flock|D:int flock( unsigned int fd,  unsigned int cmd)|c:unsorted|x:|
f:fwritesl|D:#define fwritesl(fd,str) write(fd,str"\n",sizeof(str)+1)|c:unsorted|x:|
f:getgrouplist|D:int getgrouplist(const char* user, gid_t group, gid_t *groups, int *ngroups)|c:unsorted|x:|
f:getgroups|D:int getgroups(int maxgroups, int *list)|c:unsorted|x:|
f:gethostname|D:int gethostname(char *name,int len)|c:unsorted|x:|
f:getresuid|D:int getresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)|c:unsorted|x:|
f:getsockopt|D:int getsockopt( int fd,  int level,  int optname,  char *optval,  int *optlen)|c:unsorted|x:|
f:getusergroups|D:int getusergroups(const char* user, int maxgroups, int *list)|c:unsorted|x:|
f:group_printf|D://|c:unsorted|x:|
f:htonl|D:uint32_t htonl(uint32_t i)|c:unsorted|x:|
f:htons|D:uint16_t htons(uint16_t i)|c:unsorted|x:|
f:inet_aton|D:int inet_aton(const char* s, struct in_addr *addr)|c:unsorted|x:|
f:inet_ntoa|D:char* inet_ntoa( struct in_addr in)|c:unsorted|x:|
f:initgroups|D:int initgroups(const char* user, gid_t group)|c:unsorted|x:|
f:lstat|D:int lstat(const char* filename,struct stat* statbuf)|c:unsorted|x:|
f:match_ext|D:int match_ext(char *text, const char *re, void(*p_match)(int number, char *pos,int len, void *userdata), int(*p_match_char)(int number, char *match_char, void *userdata), tmatch_ext *st_match, void *userdata)|c:unsorted|x:|
f:match_ext2|D:int match_ext2(char *text, char *re, void(*p_matched_cb)(int number, char *pos,int len), int(*p_wildcard_cb)(int number, char *match_char),text_match *st_match)|c:unsorted|x:|
f:msync|D:int msync( void* addr,  size_t len, int flags)|c:unsorted|x:|
f:network|D:|c:unsorted|x:|
f:ntohl|D:#define ntohl(i) htonl(i)|c:unsorted|x:|
f:ntohs|D:#define ntohs(i) htons(i)|c:unsorted|x:|
f:optimization_fence|D:void  optimization_fence(void*p)|c:unsorted|x:|
f:poll|D:int poll(struct pollfd *fds, nfds_t cnt, int timeout)|c:unsorted|x:|
f:prctl|D:int prctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)|c:unsorted|x:|
f:pwent|D:|c:unsorted|x:|
f:qsort|D:void qsort(void  *base,	size_t nel,	size_t width,	int (*comp)(const void *, const void *))|c:unsorted|x:|
f:recvfrom|D:int recvfrom( int fd,  void *ubuf,  size_t size,  unsigned flags,  struct sockaddr *addr,  unsigned int *addr_len)|c:unsorted|x:|
f:rt_sigsuspend|D:int rt_sigsuspend( const sigset_t *mask, size_t sigsetsize)|c:unsorted|x:|
f:sendto|D:int sendto( int fd,  void *buff,  size_t len,  unsigned flags,  struct sockaddr *addr,  int addr_len)|c:unsorted|x:|
f:setbrk|D:int setbrk(long addr)|c:unsorted|x:|
f:setenv|D:int setenv( const char *name, const char *value, int overwrite )|c:unsorted|x:|
f:setresuid|D:int setresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)|c:unsorted|x:|
f:setreuid|D:int setreuid( uid_t ruid,  uid_t euid)|c:unsorted|x:|
f:setsockopt|D:int setsockopt( int fd,  int level,  int optname,  const void *optval,  int optlen)|c:unsorted|x:|
f:short_errstr|D:const char* short_errstr(int num)|c:unsorted|x:|
f:sigsuspend|D:int sigsuspend( const sigset_t *mask )|c:unsorted|x:|
f:snprintfs|D:int snprintfs( char* buf, int size, char *fmt, ...)|c:unsorted|x:|
f:socket|D:int socket( int family,  int type,  int protocol)|c:unsorted|x:|
f:stpcpy|D:char *stpcpy(char *dest, const char *src)|c:unsorted|x:|
f:stplcpy|D:char *stplcpy(char *dest, const char *src, int size)|c:unsorted|x:|
f:stpncpy|D:char *stpncpy(char *dest, const char *src, int size)|c:unsorted|x:|
f:strlcpy|D:char *strlcpy(char *dest, const char *src, int n)|c:unsorted|x:|
f:strtoll|D:long long int strtoll(const char *c, const char **endp, int base)|c:unsorted|x:|
f:term_width|D:int term_width()|c:unsorted|x:|
f:termio|D:|c:unsorted|x:|
f:timerfd_create|D:int timerfd_create( int clockid,  int flags)|c:unsorted|x:|
f:timerfd_gettime|D:int timerfd_gettime( int ufd,  struct itimerspec *otmr)|c:unsorted|x:|
f:timerfd_settime|D:int timerfd_settime( int ufd,  int flags,  const struct itimerspec *utmr,  struct itimerspec *otmr)|c:unsorted|x:|
f:token_i|D:int token_i( userdb* udb, char **p )|c:unsorted|x:|
f:token_s|D:char *token_s( userdb *udb, char **p )|c:unsorted|x:|
f:userdb_open|D:int userdb_open(userdb *udb, const char* file)|c:unsorted|x:|
f:warn|D:#define warn( fmt ... ) { fprintf(stderr,fmt ); }|c:unsorted|x:|
f:where|D:int where(const char *file,char *buf)|c:unsorted|x:|
f:writesl|D:#define writesl(str) write(STDOUT_FILENO,str "\n",sizeof(str)+1)|c:unsorted|x:|

#userdb

f:endgrent|D:void endgrent()|c:userdb|x:|
f:endpwent|D:void endpwent()|c:userdb|x:|
f:getgrent|D:struct group* getgrent()|c:userdb|x:|
f:getgrgid|D:struct group *getgrgid(gid_t gid)|c:userdb|x:|
f:getgrnam|D:struct group *getgrnam(const char* name)|c:userdb|x:|
f:getpwent|D:struct passwd* getpwent()|c:userdb|x:|
f:getpwnam|D:struct passwd *getpwnam(const char* name)|c:userdb|x:|
f:getpwuid|D:struct passwd *getpwuid(uid_t uid)|c:userdb|x:|
f:max_groupmembers|D:#ifndef mini_max_groupmembers|c:userdb|x:|
f:setgrent|D:void setgrent()|c:userdb|x:|
f:setpwent|D:void setpwent()|c:userdb|x:|

#x64-syscalls

f:sys__sysctl|D:sys__sysctl( struct __sysctl_args *args)|c:x64-syscalls|x:read/write system parameters|
f:sys_accept|D:sys_accept( int fd,  struct sockaddr *upeersockaddr,  int *upeeraddrlen)|c:x64-syscalls|x:accept a new connection on a socket|
f:sys_accept4|D:sys_accept4( int fd,  struct sockaddr *upeer_sockaddr,  int *upeer_addrlen,  int flags)|c:x64-syscalls|x:accept a connection on a socket|
f:sys_access|D:sys_access( const char *filename,  int mode)|c:x64-syscalls|x:determine accessibility of a file relative to directory file|
f:sys_acct|D:sys_acct( const char *name)|c:x64-syscalls|x:switch process accounting on or off|
f:sys_add_key|D:sys_add_key( const char *_type,  const char *_description,  const void *_payload,  size_t plen)|c:x64-syscalls|x:add a key to the kernel's key management facility|
f:sys_adjtimex|D:sys_adjtimex( struct timex *txc_p)|c:x64-syscalls|x:tune kernel clock|
f:sys_alarm|D:sys_alarm( unsigned int seconds)|c:x64-syscalls|x:schedule an alarm signal|
f:sys_arch_prctl|D:sys_arch_prctl( struct task_struct *task,  int code,  unsigned long *addr)|c:x64-syscalls|x:set architecture-specific thread state|
f:sys_bind|D:sys_bind( int fd,  struct sockaddr *umyaddr,  int addrlen)|c:x64-syscalls|x:bind a name to a socket|
f:sys_brk|D:long sys_brk(unsigned long addr)|c:x64-syscalls|x:change data segment size|
f:sys_capget|D:sys_capget( cap_user_header_t header,  cap_user_data_t dataptr)|c:x64-syscalls|x:set/get capabilities of thread(s)|
f:sys_capset|D:sys_capset( cap_user_header_t header,  const cap_user_data_t data)|c:x64-syscalls|x:set/get capabilities of thread(s)|
f:sys_chdir|D:sys_chdir( const char *filename)|c:x64-syscalls|x:change working directory|
f:sys_chmod|D:sys_chmod( const char *filename,  mode_t mode)|c:x64-syscalls|x:change mode of a file relative to directory file descriptor|
f:sys_chown|D:sys_chown( const char *filename,  uid_t user,  gid_t group)|c:x64-syscalls|x:change owner and group of a file relative to directory|
f:sys_chroot|D:sys_chroot( const char *filename)|c:x64-syscalls|x:change root directory|
f:sys_clock_adjtime|D:sys_clock_adjtime( clockid_t which_clock,  struct timex *tx)|c:x64-syscalls|x:|
f:sys_clock_getres|D:sys_clock_getres( const clockid_t which_clock,  struct timespec *tp)|c:x64-syscalls|x:|
f:sys_clock_gettime|D:sys_clock_gettime( const clockid_t which_clock,  struct timespec *tp)|c:x64-syscalls|x:clock and time functions|
f:sys_clock_nanosleep|D:sys_clock_nanosleep( const clockid_t which_clock,  int flags,  const struct timespec *rqtp,  struct timespec *rmtp)|c:x64-syscalls|x:high resolution sleep with specifiable clock|
f:sys_clock_settime|D:sys_clock_settime( const clockid_t which_clock,  const struct timespec *tp)|c:x64-syscalls|x:clock and timer functions|
f:sys_clone|D:sys_clone( unsigned long clone_flags,  unsigned long newsp,  void *parent_tid,  void *child_tid)|c:x64-syscalls|x:create a child process|
f:sys_close|D:sys_close( unsigned int fd)|c:x64-syscalls|x:close a file descriptor|
f:sys_connect|D:sys_connect( int fd,  struct sockaddr *uservaddr,  int addrlen)|c:x64-syscalls|x:connect a socket|
f:sys_creat|D:sys_creat( const char *pathname,  int mode)|c:x64-syscalls|x:create a new file or rewrite an existing one|
f:sys_delete_module|D:sys_delete_module( const char *name_user,  unsigned int flags)|c:x64-syscalls|x:unload a kernel module|
f:sys_dup|D:sys_dup( unsigned int fildes)|c:x64-syscalls|x:duplicate an open file descriptor|
f:sys_dup2|D:sys_dup2( unsigned int oldfd,  unsigned int newfd)|c:x64-syscalls|x:duplicate a file descriptor|
f:sys_dup3|D:sys_dup3( unsigned int oldfd,  unsigned int newfd,  int flags)|c:x64-syscalls|x:duplicate a file descriptor|
f:sys_epoll_create|D:sys_epoll_create( int size)|c:x64-syscalls|x:open an epoll file descriptor|
f:sys_epoll_create1|D:sys_epoll_create1( int flags)|c:x64-syscalls|x:open an epoll file descriptor|
f:sys_epoll_ctl|D:sys_epoll_ctl( int epfd,  int op,  int fd,  struct epoll_event *event)|c:x64-syscalls|x:control interface for an epoll file descriptor|
f:sys_epoll_pwait|D:sys_epoll_pwait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout,  const sigset_t *sigmask,  size_t sigsetsize)|c:x64-syscalls|x:wait for an I/O event on an epoll file descriptor|
f:sys_epoll_wait|D:sys_epoll_wait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout)|c:x64-syscalls|x:wait for an I/O event on an epoll file descriptor|
f:sys_eventfd|D:sys_eventfd( unsigned int count)|c:x64-syscalls|x:create a file descriptor for event notification|
f:sys_eventfd2|D:sys_eventfd2( unsigned int count,  int flags)|c:x64-syscalls|x:create a file descriptor for event notification|
f:sys_execve|D:sys_execve( const char *filename,  const char *const argv[],  const char *const envp[])|c:x64-syscalls|x:execute program|
f:sys_exit|D:sys_exit( int error_code)|c:x64-syscalls|x:terminate a process|
f:sys_exit_group|D:sys_exit_group( int error_code)|c:x64-syscalls|x:exit all threads in a process|
f:sys_faccessat|D:sys_faccessat( int dfd,  const char *filename,  int mode)|c:x64-syscalls|x:determine accessibility of a file relative to directory file|
f:sys_fadvise64|D:sys_fadvise64( int fd,  loff_t offset,  size_t len,  int advice)|c:x64-syscalls|x:predeclare an access pattern for file data|
f:sys_fallocate|D:sys_fallocate( long fd,  long mode,  loff_t offset,  loff_t len)|c:x64-syscalls|x:manipulate file space|
f:sys_fanotify_init|D:sys_fanotify_init( unsigned int flags,  unsigned int event_f_flags)|c:x64-syscalls|x:create and initialize fanotify group|
f:sys_fanotify_mark|D:sys_fanotify_mark( long fanotify_fd,  long flags,  __u64 mask,  long dfd, long pathname)|c:x64-syscalls|x:add, remove, or modify an fanotify mark on a filesystem|
f:sys_fchdir|D:sys_fchdir( unsigned int fd)|c:x64-syscalls|x:change working directory|
f:sys_fchmod|D:sys_fchmod( unsigned int fd,  mode_t mode)|c:x64-syscalls|x:change mode of a file|
f:sys_fchmodat|D:sys_fchmodat( int dfd,  const char *filename,  mode_t mode)|c:x64-syscalls|x:change mode of a file relative to directory file descriptor|
f:sys_fchown|D:sys_fchown( unsigned int fd,  uid_t user,  gid_t group)|c:x64-syscalls|x:change owner and group of a file|
f:sys_fchownat|D:sys_fchownat( int dfd,  const char *filename,  uid_t user,  gid_t group,  int flag)|c:x64-syscalls|x:change owner and group of a file relative to directory|
f:sys_fcntl|D:sys_fcntl( unsigned int fd,  unsigned int cmd,  unsigned long arg)|c:x64-syscalls|x:file control|
f:sys_fdatasync|D:sys_fdatasync( unsigned int fd)|c:x64-syscalls|x:synchronize the data of a file|
f:sys_fgetxattr|D:sys_fgetxattr( int fd,  const char *name,  void *value,  size_t size)|c:x64-syscalls|x:retrieve an extended attribute value|
f:sys_finit_module|D:sys_finit_module( int fd,  const char  *uargs,  int flags)|c:x64-syscalls|x:load a kernel module|
f:sys_flistxattr|D:sys_flistxattr( int fd,  char *list,  size_t size)|c:x64-syscalls|x:list extended attribute names|
f:sys_flock|D:sys_flock( unsigned int fd,  unsigned int cmd)|c:x64-syscalls|x:apply or remove an advisory lock on an open file|
f:sys_fork|D:sysSYSDEF_syscall(_fork,0)|c:x64-syscalls|x:create a new process|
f:sys_fremovexattr|D:sys_fremovexattr( int fd,  const char *name)|c:x64-syscalls|x:remove an extended attribute|
f:sys_fsetxattr|D:sys_fsetxattr( int fd,  const char *name,  const void *value,  size_t size, int flags)|c:x64-syscalls|x:set an extended attribute value|
f:sys_fstat|D:sys_fstat( unsigned int fd,  struct stat *statbuf)|c:x64-syscalls|x:get file status|
f:sys_fstatfs|D:sys_fstatfs( unsigned int fd,  struct statfs *buf)|c:x64-syscalls|x:get filesystem statistics|
f:sys_fsync|D:sys_fsync( unsigned int fd)|c:x64-syscalls|x:synchronize changes to a file|
f:sys_ftruncate|D:sys_ftruncate( unsigned int fd,  unsigned long length)|c:x64-syscalls|x:truncate a file to a specified length|
f:sys_futex|D:sys_futex( u32 *uaddr,  int op,  u32 val,  struct timespec *utime,  u32 *uaddr2,  u32 val3)|c:x64-syscalls|x:fast user-space locking|
f:sys_futimesat|D:sys_futimesat( int dfd,  const char *filename,  struct timeval *utimes)|c:x64-syscalls|x:change timestamps of a file relative to a directory file descriptor|
f:sys_get_mempolicy|D:sys_get_mempolicy( int *policy,  unsigned long *nmask,  unsigned long maxnode,  unsigned long addr,  unsigned long flags)|c:x64-syscalls|x:retrieve NUMA memory policy for a thread|
f:sys_get_robust_list|D:sys_get_robust_list( int pid,  struct robust_list_head **head_ptr,  size_t *len_ptr)|c:x64-syscalls|x:get/set list of robust futexes|
f:sys_getcpu|D:sys_getcpu( unsigned *cpup,  unsigned *nodep,  struct getcpu_cache *unused)|c:x64-syscalls|x:determine CPU and NUMA node on which the calling thread is running|
f:sys_getcwd|D:sys_getcwd( char *buf,  unsigned long size)|c:x64-syscalls|x:get the pathname of the current working directory|
f:sys_getdents|D:sys_getdents( unsigned int fd,  struct linux_dirent *dirent,  unsigned int count)|c:x64-syscalls|x:get directory entries|
f:sys_getdents64|D:sys_getdents64( unsigned int fd,  struct linux_dirent64 *dirent,  unsigned int count)|c:x64-syscalls|x:get directory entries|
f:sys_getegid|D:sysSYSDEF_syscall(_getegid,0)|c:x64-syscalls|x:get the effective group ID|
f:sys_geteuid|D:sysSYSDEF_syscall(_geteuid,0)|c:x64-syscalls|x:get the effective user ID|
f:sys_getgid|D:sysSYSDEF_syscall(_getgid,0)|c:x64-syscalls|x:get the real group ID|
f:sys_getgroups|D:sys_getgroups( int gidsetsize,  gid_t *grouplist)|c:x64-syscalls|x:get supplementary group IDs|
f:sys_getitimer|D:sys_getitimer( int which,  struct itimerval *value)|c:x64-syscalls|x:get and set value of interval timer|
f:sys_getpeername|D:sys_getpeername( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)|c:x64-syscalls|x:get the name of the peer socket|
f:sys_getpgid|D:sys_getpgid( pid_t pid)|c:x64-syscalls|x:get the process group ID for a process|
f:sys_getpgrp|D:sysSYSDEF_syscall(_getpgrp,0)|c:x64-syscalls|x:get the process group ID of the calling process|
f:sys_getpid|D:sysSYSDEF_syscall(_getpid,0)|c:x64-syscalls|x:get the process ID|
f:sys_getppid|D:sysSYSDEF_syscall(_getppid,0)|c:x64-syscalls|x:get the parent process ID|
f:sys_getpriority|D:sys_getpriority( int which,  int who)|c:x64-syscalls|x:get and set the nice value|
f:sys_getrandom|D:sys_getrandom( char  *buf,  size_t count,  unsigned int flags)|c:x64-syscalls|x:obtain a series of random bytes|
f:sys_getresgid|D:sys_getresgid( gid_t *rgid,  gid_t *egid,  gid_t *sgid)|c:x64-syscalls|x:get real, effective and saved user/group IDs|
f:sys_getresuid|D:sys_getresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)|c:x64-syscalls|x:get real, effective and saved user/group IDs|
f:sys_getrlimit|D:sys_getrlimit( unsigned int resource,  struct rlimit *rlim)|c:x64-syscalls|x:control maximum resource consumption|
f:sys_getrusage|D:sys_getrusage( int who,  struct rusage *ru)|c:x64-syscalls|x:get information about resource utilization|
f:sys_getsid|D:sys_getsid( pid_t pid)|c:x64-syscalls|x:get the process group ID of a session leader|
f:sys_getsockname|D:sys_getsockname( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)|c:x64-syscalls|x:get the socket name|
f:sys_getsockopt|D:sys_getsockopt( int fd,  int level,  int optname,  char *optval,  int *optlen)|c:x64-syscalls|x:get the socket options|
f:sys_gettid|D:sysSYSDEF_syscall(_gettid,0)|c:x64-syscalls|x:get thread identification|
f:sys_gettimeofday|D:sys_gettimeofday( struct timeval *tv,  struct timezone *tz)|c:x64-syscalls|x:get the date and time|
f:sys_getuid|D:sysSYSDEF_syscall(_getuid,0)|c:x64-syscalls|x:get a real user ID|
f:sys_getxattr|D:sys_getxattr( const char *pathname,  const char *name,  void *value,  size_t size)|c:x64-syscalls|x:retrieve an extended attribute value|
f:sys_init_module|D:sys_init_module( void *umod,  unsigned long len,  const char *uargs)|c:x64-syscalls|x:load a kernel module|
f:sys_inotify_add_watch|D:sys_inotify_add_watch( int fd,  const char *pathname,  u32 mask)|c:x64-syscalls|x:add a watch to an initialized inotify instance|
f:sys_inotify_init|D:sysSYSDEF_syscall(_inotify_init,0)|c:x64-syscalls|x:initialize an inotify instance|
f:sys_inotify_init1|D:sys_inotify_init1( int flags)|c:x64-syscalls|x:initialize an inotify instance|
f:sys_inotify_rm_watch|D:sys_inotify_rm_watch( int fd,  __s32 wd)|c:x64-syscalls|x:remove an existing watch from an inotify instance|
f:sys_io_cancel|D:sys_io_cancel( aio_context_t ctx_id,  struct iocb *iocb,  struct io_event *result)|c:x64-syscalls|x:cancel an outstanding asynchronous I/O operation|
f:sys_io_destroy|D:sys_io_destroy( aio_context_t ctx)|c:x64-syscalls|x:destroy an asynchronous I/O context|
f:sys_io_getevents|D:sys_io_getevents( aio_context_t ctx_id,  long min_nr,  long nr,  struct io_event *events)|c:x64-syscalls|x:read asynchronous I/O events from the completion queue|
f:sys_io_setup|D:sys_io_setup( unsigned nr_events,  aio_context_t *ctxp)|c:x64-syscalls|x:create an asynchronous I/O context|
f:sys_io_submit|D:sys_io_submit( aio_context_t ctx_id,  long nr,  struct iocb **iocbpp)|c:x64-syscalls|x:submit asynchronous I/O blocks for processing|
f:sys_ioctl|D:sys_ioctl( unsigned int fd,  unsigned int cmd,  unsigned long arg)|c:x64-syscalls|x:control a STREAMS device (\fBSTREAMS\fP)|
f:sys_ioperm|D:sys_ioperm( unsigned long from,  unsigned long num,  int turn_on)|c:x64-syscalls|x:set port input/output permissions|
f:sys_iopl|D:sys_iopl( unsigned int level,  struct pt_regs *regs)|c:x64-syscalls|x:change I/O privilege level|
f:sys_ioprio_get|D:sys_ioprio_get( int which,  int who)|c:x64-syscalls|x:get/set I/O scheduling class and priority|
f:sys_ioprio_set|D:sys_ioprio_set( int which,  int who,  int ioprio)|c:x64-syscalls|x:get/set I/O scheduling class and priority|
f:sys_kcmp|D:sys_kcmp( pid_t pid1,  pid_t pid2,  int type,  unsigned long idx1,  unsigned long idx2)|c:x64-syscalls|x:compare two processes to determine if they share a kernel resource|
f:sys_kexec_file_load|D:sys_kexec_file_load( int kernel_fd,  int initrd_fd,  unsigned long cmdline_len,  const char  *cmdline_ptr,  unsigned long flags)|c:x64-syscalls|x:load a new kernel for later execution|
f:sys_kexec_load|D:sys_kexec_load( unsigned long entry,  unsigned long nr_segments,  struct kexec_segment *segments,  unsigned long flags)|c:x64-syscalls|x:load a new kernel for later execution|
f:sys_keyctl|D:sys_keyctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)|c:x64-syscalls|x:key management function wrappers|
f:sys_kill|D:sys_kill( pid_t pid,  int sig)|c:x64-syscalls|x:send a signal to a process or a group of processes|
f:sys_lchown|D:sys_lchown( const char *filename,  uid_t user,  gid_t group)|c:x64-syscalls|x:change the owner and group of a symbolic link|
f:sys_lgetxattr|D:sys_lgetxattr( const char *pathname,  const char *name,  void *value,  size_t size)|c:x64-syscalls|x:retrieve an extended attribute value|
f:sys_link|D:sys_link( const char *oldname,  const char *newname)|c:x64-syscalls|x:link one file to another file relative to two directory|
f:sys_linkat|D:sys_linkat( int oldfd,  const char *oldname,  int newfd,  const char *newname,  int flags)|c:x64-syscalls|x:make a new name for a file|
f:sys_listen|D:sys_listen( int fd,  int backlog)|c:x64-syscalls|x:listen for socket connections and limit the queue of incoming|
f:sys_listxattr|D:sys_listxattr( const char *pathname,  char *list,  size_t size)|c:x64-syscalls|x:list extended attribute names|
f:sys_llistxattr|D:sys_llistxattr( const char *pathname,  char *list,  size_t size)|c:x64-syscalls|x:list extended attribute names|
f:sys_lookup_dcookie|D:sys_lookup_dcookie( u64 cookie64,  long buf,  long len)|c:x64-syscalls|x:return a directory entry's path|
f:sys_lremovexattr|D:sys_lremovexattr( const char *pathname,  const char *name)|c:x64-syscalls|x:remove an extended attribute|
f:sys_lseek|D:sys_lseek( unsigned int fd,  off_t offset,  unsigned int origin)|c:x64-syscalls|x:move the read/write file offset|
f:sys_lsetxattr|D:sys_lsetxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)|c:x64-syscalls|x:set an extended attribute value|
f:sys_lstat|D:sys_lstat( const char *filename,  struct stat *statbuf)|c:x64-syscalls|x:get file status|
f:sys_madvise|D:sys_madvise( unsigned long start,  size_t len_in,  int behavior)|c:x64-syscalls|x:give advice about use of memory|
f:sys_mbind|D:sys_mbind( unsigned long start,  unsigned long len,  unsigned long mode,  unsigned long *nmask,  unsigned long maxnode,  unsigned flags)|c:x64-syscalls|x:set memory policy for a memory range|
f:sys_memfd_create|D:sys_memfd_create( const char  *uname_ptr,  unsigned int flags)|c:x64-syscalls|x:create an anonymous file|
f:sys_migrate_pages|D:sys_migrate_pages( pid_t pid,  unsigned long maxnode,  const unsigned long *old_nodes,  const unsigned long *new_nodes)|c:x64-syscalls|x:move all pages in a process to another set of nodes|
f:sys_mincore|D:sys_mincore( unsigned long start,  size_t len,  unsigned char *vec)|c:x64-syscalls|x:determine whether pages are resident in memory|
f:sys_mkdir|D:sys_mkdir( const char *pathname,  int mode)|c:x64-syscalls|x:make a directory relative to directory file descriptor|
f:sys_mkdirat|D:sys_mkdirat( int dfd,  const char *pathname,  int mode)|c:x64-syscalls|x:create a directory|
f:sys_mknod|D:sys_mknod( const char *filename,  umode_t mode,  unsigned dev)|c:x64-syscalls|x:make directory, special file, or regular file|
f:sys_mknodat|D:sys_mknodat( int dfd,  const char *filename,  int mode,  unsigned dev)|c:x64-syscalls|x:create a special or ordinary file|
f:sys_mlock|D:sys_mlock( unsigned long start,  size_t len)|c:x64-syscalls|x:lock or unlock a range of process address space|
f:sys_mlockall|D:sys_mlockall( int flags)|c:x64-syscalls|x:lock/unlock the address space of a process|
f:sys_mmap|D:sys_mmap( unsigned long addr,  unsigned long len,  unsigned long prot,  unsigned long flags,  unsigned long fd,  unsigned long off)|c:x64-syscalls|x:map pages of memory|
f:sys_modify_ldt|D:sys_modify_ldt( int func,  void *ptr,  unsigned long bytecount)|c:x64-syscalls|x:get or set a per-process LDT entry|
f:sys_mount|D:sys_mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)|c:x64-syscalls|x:mount filesystem|
f:sys_move_pages|D:sys_move_pages( pid_t pid,  unsigned long nr_pages,  const void *pages[], const int *nodes,  int *status,  int flags)|c:x64-syscalls|x:move individual pages of a process to another node|
f:sys_mprotect|D:sys_mprotect( unsigned long start,  size_t len,  unsigned long prot)|c:x64-syscalls|x:set protection of memory mapping|
f:sys_mq_getsetattr|D:sys_mq_getsetattr( mqd_t mqdes,  const struct mq_attr *u_mqstat,  struct mq_attr *u_omqstat)|c:x64-syscalls|x:get/set message queue attributes|
f:sys_mq_notify|D:sys_mq_notify( mqd_t mqdes,  const struct sigevent *u_notification)|c:x64-syscalls|x:notify process that a message is available|
f:sys_mq_open|D:sys_mq_open( const char *u_name,  int oflag,  mode_t mode,  struct mq_attr *u_attr)|c:x64-syscalls|x:open a message queue|
f:sys_mq_timedreceive|D:sys_mq_timedreceive( mqd_t mqdes,  char *u_msg_ptr,  size_t msg_len,  unsigned int *u_msg_prio,  const struct timespec *u_abs_timeout)|c:x64-syscalls|x:receive a message from a message queue|
f:sys_mq_timedsend|D:sys_mq_timedsend( mqd_t mqdes,  const char *u_msg_ptr,  size_t msg_len,  unsigned int msg_prio,  const struct timespec *u_abs_timeout)|c:x64-syscalls|x:send a message to a message queue|
f:sys_mq_unlink|D:sys_mq_unlink( const char *u_name)|c:x64-syscalls|x:remove a message queue|
f:sys_mremap|D:sys_mremap( unsigned long addr,  unsigned long old_len,  unsigned long new_len,  unsigned long flags,  unsigned long new_addr)|c:x64-syscalls|x:remap a virtual memory address|
f:sys_msgctl|D:sys_msgctl( int msqid,  int cmd,  struct msqid_ds *buf)|c:x64-syscalls|x:XSI message control operations|
f:sys_msgget|D:sys_msgget( key_t key,  int msgflg)|c:x64-syscalls|x:get the XSI message queue identifier|
f:sys_msgrcv|D:sys_msgrcv( int msqid,  struct msgbuf *msgp,  size_t msgsz,  long msgtyp,  int msgflg)|c:x64-syscalls|x:XSI message receive operation|
f:sys_msgsnd|D:sys_msgsnd( int msqid,  struct msgbuf *msgp,  size_t msgsz,  int msgflg)|c:x64-syscalls|x:XSI message send operation|
f:sys_msync|D:sys_msync( unsigned long start,  size_t len,  int flags)|c:x64-syscalls|x:synchronize memory with physical storage|
f:sys_munlock|D:sys_munlock( unsigned long start,  size_t len)|c:x64-syscalls|x:unlock a range of process address space|
f:sys_munlockall|D:sysSYSDEF_syscall(_munlockall,0)|c:x64-syscalls|x:unlock the address space of a process|
f:sys_munmap|D:sys_munmap( unsigned long addr,  size_t len)|c:x64-syscalls|x:unmap pages of memory|
f:sys_name_to_handle_at|D:sys_name_to_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flag)|c:x64-syscalls|x:obtain handle|
f:sys_nanosleep|D:sys_nanosleep( struct timespec *rqtp,  struct timespec *rmtp)|c:x64-syscalls|x:high resolution sleep|
f:sys_newfstatat|D:sys_newfstatat( int dfd,  const char *filename,  struct stat *statbuf,  int flag)|c:x64-syscalls|x:get file status|
f:sys_open|D:sys_open( const char *filename,  int flags,  int mode)|c:x64-syscalls|x:open file relative to directory file descriptor|
f:sys_open_by_handle_at|D:sys_open_by_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flags)|c:x64-syscalls|x:obtain handle|
f:sys_openat|D:sys_openat( int dfd,  const char *filename,  int flags,  int mode)|c:x64-syscalls|x:open file relative to directory file descriptor|
f:sys_pause|D:sysSYSDEF_syscall(_pause,0)|c:x64-syscalls|x:suspend the thread until a signal is received|
f:sys_perf_event_open|D:sys_perf_event_open( struct perf_event_attr *attr_uptr,  pid_t pid,  int cpu,  int group_fd,  unsigned long flags)|c:x64-syscalls|x:set up performance monitoring|
f:sys_personality|D:sys_personality( unsigned int personality)|c:x64-syscalls|x:set the process execution domain|
f:sys_pipe|D:sys_pipe( int *filedes)|c:x64-syscalls|x:create an interprocess channel|
f:sys_pipe2|D:sys_pipe2( int *filedes,  int flags)|c:x64-syscalls|x:create pipe|
f:sys_pivot_root|D:sys_pivot_root( const char *new_root,  const char *put_old)|c:x64-syscalls|x:change the root mount|
f:sys_poll|D:sys_poll( struct poll_fd *ufds,  unsigned int nfds,  long timeout_msecs)|c:x64-syscalls|x:input/output multiplexing|
f:sys_ppoll|D:sys_ppoll( struct pollfd *ufds,  unsigned int nfds,  struct timespec *tsp,  const sigset_t *sigmask,  size_t sigsetsize)|c:x64-syscalls|x:wait for some event on a file descriptor|
f:sys_prctl|D:sys_prctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)|c:x64-syscalls|x:operations on a process|
f:sys_pread64|D:sys_pread64( unsigned long fd,  char *buf,  size_t count,  loff_t pos)|c:x64-syscalls|x:read from or write to a file descriptor at a given offset|
f:sys_preadv|D:sys_preadv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)|c:x64-syscalls|x:read or write data into multiple buffers|
f:sys_prlimit64|D:sys_prlimit64( pid_t pid,  unsigned int resource,  const struct rlimit64 *new_rlim,  struct rlimit64 *old_rlim)|c:x64-syscalls|x:get/set resource limits|
f:sys_process_vm_readv|D:sys_process_vm_readv( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovec *rvec,  unsigned long riovcnt,  unsigned long flags)|c:x64-syscalls|x:transfer data between process address spaces|
f:sys_process_vm_writev|D:sys_process_vm_writev( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovcc *rvec,  unsigned long riovcnt,  unsigned long flags)|c:x64-syscalls|x:transfer data between process address spaces|
f:sys_pselect6|D:sys_pselect6( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timespec *tsp,  void *sig)|c:x64-syscalls|x:select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \-|
f:sys_ptrace|D:sys_ptrace( long request,  long pid,  unsigned long addr,  unsigned long data)|c:x64-syscalls|x:process trace|
f:sys_pwrite64|D:sys_pwrite64( unsigned int fd,  const char *buf,  size_t count,  loff_t pos)|c:x64-syscalls|x:read from or write to a file descriptor at a given offset|
f:sys_pwritev|D:sys_pwritev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)|c:x64-syscalls|x:read or write data into multiple buffers|
f:sys_quotactl|D:sys_quotactl( unsigned int cmd,  const char *special,  qid_t id,  void *addr)|c:x64-syscalls|x:manipulate disk quotas|
f:sys_read|D:sys_read( unsigned int fd,  char *buf,  size_t count)|c:x64-syscalls|x:read from a file|
f:sys_readahead|D:sys_readahead( int fd,  loff_t offset,  size_t count)|c:x64-syscalls|x:initiate file readahead into page cache|
f:sys_readlink|D:sys_readlink( const char *path,  char *buf,  int bufsiz)|c:x64-syscalls|x:read the contents of a symbolic link|
f:sys_readlinkat|D:sys_readlinkat( int dfd,  const char *pathname,  char *buf,  int bufsiz)|c:x64-syscalls|x:read value of a symbolic link|
f:sys_readv|D:sys_readv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)|c:x64-syscalls|x:read a vector|
f:sys_reboot|D:sys_reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)|c:x64-syscalls|x:reboot or enable/disable Ctrl-Alt-Del|
f:sys_recvfrom|D:sys_recvfrom( int fd,  void *ubuf,  size_t size,  unsigned flags,  struct sockaddr *addr,  int *addr_len)|c:x64-syscalls|x:receive a message from a socket|
f:sys_recvmmsg|D:sys_recvmmsg( int fd,  struct msghdr *mmsg,  unsigned int vlen,  unsigned int flags,  struct timespec *timeout)|c:x64-syscalls|x:receive multiple messages on a socket|
f:sys_recvmsg|D:sys_recvmsg( int fd,  struct msghdr *msg,  unsigned int flags)|c:x64-syscalls|x:receive a message from a socket|
f:sys_remap_file_pages|D:sys_remap_file_pages( unsigned long start,  unsigned long size,  unsigned long prot,  unsigned long pgoff,  unsigned long flags)|c:x64-syscalls|x:create a nonlinear file mapping|
f:sys_removexattr|D:sys_removexattr( const char *pathname,  const char *name)|c:x64-syscalls|x:remove an extended attribute|
f:sys_rename|D:sys_rename( const char *oldname,  const char *newname)|c:x64-syscalls|x:rename file relative to directory file descriptor|
f:sys_renameat|D:sys_renameat( int oldfd,  const char *oldname,  int newfd,  const char *newname)|c:x64-syscalls|x:change the name or location of a file|
f:sys_renameat2|D:sys_renameat2( int olddfd,  const char  *oldname,  int newdfd,  const char  *newname,  unsigned int flags)|c:x64-syscalls|x:change the name or location of a file|
f:sys_request_key|D:sys_request_key( const char *_type,  const char *_description,  const char *_callout_info,  key_serial_t destringid)|c:x64-syscalls|x:request a key from the kernel's key management facility|
f:sys_restart_syscall|D:sysSYSDEF_syscall(_restart_syscall,0)|c:x64-syscalls|x:restart a system call after interruption by a stop signal|
f:sys_rmdir|D:sys_rmdir( const char *pathname)|c:x64-syscalls|x:remove a directory|
f:sys_rt_sigaction|D:sys_rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)|c:x64-syscalls|x:examine and change a signal action|
f:sys_rt_sigpending|D:sys_rt_sigpending( sigset_t *set,  size_t sigsetsize)|c:x64-syscalls|x:examine pending signals|
f:sys_rt_sigprocmask|D:sys_rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)|c:x64-syscalls|x:examine and change blocked signals|
f:sys_rt_sigqueueinfo|D:sys_rt_sigqueueinfo( pid_t pid,  int sig,  siginfo_t *uinfo)|c:x64-syscalls|x:queue a signal and data|
f:sys_rt_sigreturn|D:sys_rt_sigreturn( unsigned long __unused)|c:x64-syscalls|x:return from signal handler and cleanup stack frame|
f:sys_rt_sigsuspend|D:sys_rt_sigsuspend( sigset_t *unewset,  size_t sigsetsize)|c:x64-syscalls|x:wait for a signal|
f:sys_rt_sigtimedwait|D:sys_rt_sigtimedwait( const sigset_t *uthese,  siginfo_t *uinfo,  const struct timespec *uts,  size_t sigsetsize)|c:x64-syscalls|x:synchronously wait|
f:sys_rt_tgsigqueueinfo|D:sys_rt_tgsigqueueinfo( pid_t tgid,  pid_t pid,  int sig,  siginfo_t *uinfo)|c:x64-syscalls|x:queue a signal and data|
f:sys_sched_get_priority_max|D:sys_sched_get_priority_max( int policy)|c:x64-syscalls|x:get priority limits|
f:sys_sched_get_priority_min|D:sys_sched_get_priority_min( int policy)|c:x64-syscalls|x:get static priority range|
f:sys_sched_getaffinity|D:sys_sched_getaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)|c:x64-syscalls|x:set and get a thread's CPU affinity mask|
f:sys_sched_getattr|D:sys_sched_getattr( pid_t pid,  struct sched_attr  *attr,  unsigned int size,  unsigned int flags)|c:x64-syscalls|x:sched_setattr, sched_getattr \-|
f:sys_sched_getparam|D:sys_sched_getparam( pid_t pid,  struct sched_param *param)|c:x64-syscalls|x:get scheduling parameters|
f:sys_sched_getscheduler|D:sys_sched_getscheduler( pid_t pid)|c:x64-syscalls|x:get scheduling policy|
f:sys_sched_rr_get_interval|D:sys_sched_rr_get_interval( pid_t pid,  struct timespec *interval)|c:x64-syscalls|x:get execution time limits|
f:sys_sched_setaffinity|D:sys_sched_setaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)|c:x64-syscalls|x:set and get a thread's CPU affinity mask|
f:sys_sched_setattr|D:sys_sched_setattr( pid_t pid,  struct sched_attr  *attr,  unsigned int flags)|c:x64-syscalls|x:sched_setattr, sched_getattr \-|
f:sys_sched_setparam|D:sys_sched_setparam( pid_t pid,  struct sched_param *param)|c:x64-syscalls|x:set scheduling parameters|
f:sys_sched_setscheduler|D:sys_sched_setscheduler( pid_t pid,  int policy,  struct sched_param *param)|c:x64-syscalls|x:set scheduling policy and parameters|
f:sys_sched_yield|D:sysSYSDEF_syscall(_sched_yield,0)|c:x64-syscalls|x:yield the processor|
f:sys_seccomp|D:sys_seccomp( unsigned int op,  unsigned int flags,  const char  *uargs)|c:x64-syscalls|x:operate on Secure Computing state of the process|
f:sys_select|D:sys_select( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timeval *tvp)|c:x64-syscalls|x:synchronous I/O multiplexing|
f:sys_semctl|D:sys_semctl( int semid,  int semnum,  int cmd,  semun_u arg)|c:x64-syscalls|x:XSI semaphore control operations|
f:sys_semget|D:sys_semget( key_t key,  int nsems,  int semflg)|c:x64-syscalls|x:get set of XSI semaphores|
f:sys_semop|D:sys_semop( int semid,  struct sembuf *tsops,  unsigned nsops)|c:x64-syscalls|x:XSI semaphore operations|
f:sys_semtimedop|D:sys_semtimedop( int semid,  struct sembuf *tsops,  unsigned nsops,  const struct timespec *timeout)|c:x64-syscalls|x:System V semaphore operations|
f:sys_sendfile|D:sys_sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)|c:x64-syscalls|x:transfer data between file descriptors|
f:sys_sendmmsg|D:sys_sendmmsg( int fd,  struct mmsghdr *mmsg,  unsigned int vlen,  unsigned int flags)|c:x64-syscalls|x:send multiple messages on a socket|
f:sys_sendmsg|D:sys_sendmsg( int fd,  struct msghdr *msg,  unsigned flags)|c:x64-syscalls|x:send a message on a socket using a message structure|
f:sys_sendto|D:sys_sendto( int fd,  void *buff,  size_t len,  unsigned flags,  struct sockaddr *addr,  int addr_len)|c:x64-syscalls|x:send a message on a socket|
f:sys_set_mempolicy|D:sys_set_mempolicy( int mode,  unsigned long *nmask,  unsigned long maxnode)|c:x64-syscalls|x:set default NUMA memory policy for a thread and its children|
f:sys_set_robust_list|D:sys_set_robust_list( struct robust_list_head *head,  size_t len)|c:x64-syscalls|x:get/set list of robust futexes|
f:sys_set_tid_address|D:sys_set_tid_address( int *tidptr)|c:x64-syscalls|x:set pointer to thread ID|
f:sys_setdomainname|D:sys_setdomainname( char *name,  int len)|c:x64-syscalls|x:get/set NIS domain name|
f:sys_setfsgid|D:sys_setfsgid( gid_t gid)|c:x64-syscalls|x:set group identity used for filesystem checks|
f:sys_setfsuid|D:sys_setfsuid( uid_t uid)|c:x64-syscalls|x:set user identity used for filesystem checks|
f:sys_setgid|D:sys_setgid( gid_t gid)|c:x64-syscalls|x:set-group-ID|
f:sys_setgroups|D:sys_setgroups( int gidsetsize,  gid_t *grouplist)|c:x64-syscalls|x:get/set list of supplementary group IDs|
f:sys_sethostname|D:sys_sethostname( char *name,  int len)|c:x64-syscalls|x:get/set hostname|
f:sys_setitimer|D:sys_setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)|c:x64-syscalls|x:set the value of an interval timer|
f:sys_setns|D:sys_setns( int fd,  int nstype)|c:x64-syscalls|x:reassociate thread with a namespace|
f:sys_setpgid|D:sys_setpgid( pid_t pid,  pid_t pgid)|c:x64-syscalls|x:set process group ID for job control|
f:sys_setpriority|D:sys_setpriority( int which,  int who,  int niceval)|c:x64-syscalls|x:set the nice value|
f:sys_setregid|D:sys_setregid( gid_t rgid,  gid_t egid)|c:x64-syscalls|x:set real and effective group IDs|
f:sys_setresgid|D:sys_setresgid( gid_t rgid,  gid_t egid,  gid_t sgid)|c:x64-syscalls|x:set real, effective and saved user or group ID|
f:sys_setresuid|D:sys_setresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)|c:x64-syscalls|x:set real, effective and saved user or group ID|
f:sys_setreuid|D:sys_setreuid( uid_t ruid,  uid_t euid)|c:x64-syscalls|x:set real and effective user IDs|
f:sys_setrlimit|D:sys_setrlimit( unsigned int resource,  struct rlimit *rlim)|c:x64-syscalls|x:control maximum resource consumption|
f:sys_setsid|D:sysSYSDEF_syscall(_setsid,0)|c:x64-syscalls|x:create session and set process group ID|
f:sys_setsockopt|D:sys_setsockopt( int fd,  int level,  int optname,  char *optval,  int optlen)|c:x64-syscalls|x:set the socket options|
f:sys_settimeofday|D:sys_settimeofday( struct timeval *tv,  struct timezone *tz)|c:x64-syscalls|x:get / set time|
f:sys_setuid|D:sys_setuid( uid_t uid)|c:x64-syscalls|x:set user ID|
f:sys_setxattr|D:sys_setxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)|c:x64-syscalls|x:set an extended attribute value|
f:sys_shmat|D:sys_shmat( int shmid,  char *shmaddr,  int shmflg)|c:x64-syscalls|x:XSI shared memory attach operation|
f:sys_shmctl|D:sys_shmctl( int shmid,  int cmd,  struct shmid_ds *buf)|c:x64-syscalls|x:XSI shared memory control operations|
f:sys_shmdt|D:sys_shmdt( char *shmaddr)|c:x64-syscalls|x:XSI shared memory detach operation|
f:sys_shmget|D:sys_shmget( key_t key,  size_t size,  int shmflg)|c:x64-syscalls|x:get an XSI shared memory segment|
f:sys_shutdown|D:sys_shutdown( int fd,  int how)|c:x64-syscalls|x:shut down socket send and receive operations|
f:sys_sigaltstack|D:sys_sigaltstack( const stack_t *uss,  stack_t *uoss)|c:x64-syscalls|x:set and get signal alternate stack context|
f:sys_signalfd|D:sys_signalfd( int ufd,  sigset_t *user_mask,  size_t sizemask)|c:x64-syscalls|x:create a file descriptor for accepting signals|
f:sys_signalfd4|D:sys_signalfd4( int ufd,  sigset_t *user_mask,  size_t sizemask,  int flags)|c:x64-syscalls|x:create a file descriptor for accepting signals|
f:sys_socket|D:sys_socket( int family,  int type,  int protocol)|c:x64-syscalls|x:create an endpoint for communication|
f:sys_socketpair|D:sys_socketpair( int family,  int type,  int protocol,  int *usockvec)|c:x64-syscalls|x:create a pair of connected sockets|
f:sys_splice|D:sys_splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)|c:x64-syscalls|x:splice data to/from a pipe|
f:sys_stat|D:sys_stat( const char *filename,  struct stat *statbuf)|c:x64-syscalls|x:get file status|
f:sys_statfs|D:sys_statfs( const char *pathname,  struct statfs *buf)|c:x64-syscalls|x:get filesystem statistics|
f:sys_swapoff|D:sys_swapoff( const char *specialfile)|c:x64-syscalls|x:start/stop swapping to file/device|
f:sys_swapon|D:sys_swapon( const char *specialfile,  int swap_flags)|c:x64-syscalls|x:start/stop swapping to file/device|
f:sys_symlink|D:sys_symlink( const char *oldname,  const char *newname)|c:x64-syscalls|x:make a symbolic link relative to directory file descriptor|
f:sys_symlinkat|D:sys_symlinkat( const char *oldname,  int newfd,  const char *newname)|c:x64-syscalls|x:make a new name for a file|
f:sys_sync|D:sysSYSDEF_syscall(_sync,0)|c:x64-syscalls|x:schedule file system updates|
f:sys_sync_file_range|D:sys_sync_file_range( long fd,  loff_t offset,  loff_t bytes,  long flags)|c:x64-syscalls|x:sync a file segment with disk|
f:sys_syncfs|D:sys_syncfs( int fd)|c:x64-syscalls|x:commit filesystem caches to disk|
f:sys_sysfs|D:sys_sysfs( int option,  unsigned long arg1,  unsigned long arg2)|c:x64-syscalls|x:get filesystem type information|
f:sys_sysinfo|D:sys_sysinfo( struct sysinfo *info)|c:x64-syscalls|x:return system information|
f:sys_syslog|D:sys_syslog( int type,  char *buf,  int len)|c:x64-syscalls|x:log a message|
f:sys_tee|D:sys_tee( int fdin,  int fdout,  size_t len,  unsigned int flags)|c:x64-syscalls|x:duplicating pipe content|
f:sys_tgkill|D:sys_tgkill( pid_t tgid,  pid_t pid,  int sig)|c:x64-syscalls|x:send a signal to a thread|
f:sys_time|D:sys_time( time_t *tloc)|c:x64-syscalls|x:get time|
f:sys_timer_create|D:sys_timer_create( const clockid_t which_clock,  struct sigevent *timer_event_spec,  timer_t *created_timer_id)|c:x64-syscalls|x:create a per-process timer|
f:sys_timer_delete|D:sys_timer_delete( timer_t timer_id)|c:x64-syscalls|x:delete a per-process timer|
f:sys_timer_getoverrun|D:sys_timer_getoverrun( timer_t timer_id)|c:x64-syscalls|x:|
f:sys_timer_gettime|D:sys_timer_gettime( timer_t timer_id,  struct itimerspec *setting)|c:x64-syscalls|x:arm/disarm and fetch|
f:sys_timer_settime|D:sys_timer_settime( timer_t timer_id,  int flags,  const struct itimerspec *new_setting,  struct itimerspec *old_setting)|c:x64-syscalls|x:arm/disarm and fetch|
f:sys_timerfd_create|D:sys_timerfd_create( int clockid,  int flags)|c:x64-syscalls|x:timerfd_create, timerfd_settime, timerfd_gettime \-|
f:sys_timerfd_gettime|D:sys_timerfd_gettime( int ufd,  struct itimerspec *otmr)|c:x64-syscalls|x:timerfd_create, timerfd_settime, timerfd_gettime \-|
f:sys_timerfd_settime|D:sys_timerfd_settime( int ufd,  int flags,  const struct itimerspec *utmr,  struct itimerspec *otmr)|c:x64-syscalls|x:timerfd_create, timerfd_settime, timerfd_gettime \-|
f:sys_times|D:sys_times( struct sysinfo *info)|c:x64-syscalls|x:get process and waited-for child process times|
f:sys_tkill|D:sys_tkill( pid_t pid,  int sig)|c:x64-syscalls|x:send a signal to a thread|
f:sys_truncate|D:sys_truncate( const char *path,  long length)|c:x64-syscalls|x:truncate a file to a specified length|
f:sys_umask|D:sys_umask( int mask)|c:x64-syscalls|x:set and get the file mode creation mask|
f:sys_umount2|D:sys_umount2( const char *target,  int flags)|c:x64-syscalls|x:unmount filesystem|
f:sys_uname|D:sys_uname( struct old_utsname *name)|c:x64-syscalls|x:get the name of the current system|
f:sys_unlink|D:sys_unlink( const char *pathname)|c:x64-syscalls|x:remove a directory entry relative to directory file descriptor|
f:sys_unlinkat|D:sys_unlinkat( int dfd,  const char *pathname,  int flag)|c:x64-syscalls|x:delete a name and possibly the file it refers to|
f:sys_unshare|D:sys_unshare( unsigned long unshare_flags)|c:x64-syscalls|x:disassociate parts of the process execution context|
f:sys_ustat|D:sys_ustat( unsigned dev,  struct ustat *ubuf)|c:x64-syscalls|x:get filesystem statistics|
f:sys_utime|D:sys_utime( char *filename,  struct utimbuf *times)|c:x64-syscalls|x:set file access and modification times|
f:sys_utimensat|D:sys_utimensat( int dfd,  const char *filename,  struct timespec *utimes, int flags)|c:x64-syscalls|x:set file access and modification times relative to directory|
f:sys_utimes|D:sys_utimes( char *filename,  struct timeval *utimes)|c:x64-syscalls|x:change file last access and modification times|
f:sys_vfork|D:sysSYSDEF_syscall(_vfork,0)|c:x64-syscalls|x:create a child process and block parent|
f:sys_vhangup|D:sysSYSDEF_syscall(_vhangup,0)|c:x64-syscalls|x:virtually hangup the current terminal|
f:sys_vmsplice|D:sys_vmsplice( int fd,  const struct iovec *iov,  unsigned long nr_segs, unsigned int flags)|c:x64-syscalls|x:splice user pages to/from a pipe|
f:sys_wait4|D:sys_wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)|c:x64-syscalls|x:wait for process to change state, BSD style|
f:sys_waitid|D:sys_waitid( int which,  pid_t upid,  struct siginfo *infop,  int options,  struct rusage *ru)|c:x64-syscalls|x:wait for a child process to change state|
f:sys_write|D:sys_write( unsigned int fd,  const char *buf,  size_t count)|c:x64-syscalls|x:write on a file|
f:sys_writev|D:sys_writev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)|c:x64-syscalls|x:write a vector|
