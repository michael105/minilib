

(2020/08)

 notes on malloc
~~~~~~~~~~~~~~~~~

  The current implementation of malloc aims at 
  being tiny. Verly low memory overhead (4Bytes per malloc), 
  no usage of sycalls, no mmap or setbrk.(!)

  It uses a preallocated buffer, which has to be defined at compile time.
  The buffer can be located in either the bss section, so it is allocated by the kernel,
  along with other globals. Since in most cases there is a page allocated for this
  section, the space is preallocated in each case, and can be used by the "minibuf".

  Or the buffer can be located on the stack as well, via the option "globals_on_stack").
  Sparse (allocated and free'd) areas are not reused. Instead, when all areas below, say,
  X, are freed, they are freed in a whole.
  The intention here is on tiny tools, which only allocate a few variables,
  where the sizes are more or less known, and ovrall below, say, a maximum of 64kB.
  It is not the right malloc for other applications.

  There are two "mallocs" witin minilib now, which use dynamic allocations: 

  * map_protected
   map_protected maps one (or serveral) page(s)(here 4kB per page) in memory, 
  and guards the page(s) with a protected (PROT_NONE_ page before and after. 
  
  The intention is having a memory area for user input,
  where an over- or underflow won't e.g. overwrite return adresses at the stack.

  * malloc_brk
  malloc_brk allocates space via moving the program's break.
  malloc_brk, however, doesn't keep track of free'd areas. 
  Here the intention is to 1. Be able to free several allocated areas in one call,
  by setting the brk back again.
  And 2., when a malloc'ed area is reallocated, it is possible to simply enlarge the area,
  without copying. 

  This is used in 'scandir', where the contents 
  of a directory are read directly into a mallocated area, and when the allocated buffer
  shows up to be too small, the allocated area is simply enlarged, until the directory is read in.
  Since the function sorts the entries (if requested) after the read in, all names 
  have to be kept in memory. 

  There is only one copy of the data done, from kernel to userspace. 
  (When no filter is used).
  And it is not neccessary to free every direntry, instead, a free of the whole list
  of dirents can be done with one call.
  However, again, this obviously will only work, when the whole area can be freed at once.
  (Subsequent calls to malloc_brk don't allow freeing the areas before).


---

  Atm I'm working at a 'usual' malloc. (Pooled, free lists, and so on).
  When I'm going to finish this, I cannot say now. I simply do have other 
  obligations as well. 

  However, it is possible to use any malloc implementation, you can find.
  (Or to simply use mmap.)
  
  1. The only funcion, which uses a malloc within minilib at all, is 'scandir'.
  (Which uses malloc_brk.)
  All other functions use the predefined "mini_buf". (e.g. printf, conversions, andsoon)

  2. Furthermore, the curent malloc implementation of minilib does use the fixed buffer
  "mini_buf", and no calls to mmap or brk are done at all.

Therefore, you can plug in any existing malloc implementation you wish,
without having to fear, this will interfere in any way. (If you do not use 'scandir')
(E.g. jemalloc, demalloc, and so on. Just do a search at github, there are
countless implementations, many very mature).

  
  Finally, somehow I'd say malloc is not really a system function at all.
  There have to be done too many assumptions on the usecases.
  (How many calls to malloc, which average of the sizes, how many free's 
  and reallocations, andsoon)
  If the usecase would be known, it would be possible to write a optimized version.
  However, the usage isn't known in advance. Not for a system library.
  (Would look different, when writing a system layer for e.g. a database..)

  So - for now, just have a look at one of the other malloc implementations,
  (Or use mmap for yourself).

  As I said, usage of a existing malloc will not interfere with minilib, 
  so long you don't use malloc_brk, map_protected, mmap, brk, or scandir.

---



