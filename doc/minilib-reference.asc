 minilib reference
===================




The given sizes are estimations, each function added as single function within
a binary that much bytes to the overall size.

It is however not possible to give exact numbers, these depend on how much the compiler
can optimize for each call. What is different each time, depending on the circumstances.

To complicate things more, some functions will be inlined, others will be reused.

And, the choosen linker script will have it's (sometimes surprising) influence.

---


 Configuration
---------------


Before the include of minilib.h, the minilib has to be configured.

The proposed way is to use the supplied script minicc, +
which translates config options to define flags, +
and pipes the minilib header to gcc.

The config file is a bash script and can be a separate file, 
or within one of the source files.

Since it is a bash script, it is possible to e.g. +
source other files from within the configuration.

A simple example is given below:

--------------------
#if 0  // has to be the first line
# mini_start is the start routine.
# Most possibly needed
mini_start

# define and compile puts
mini_puts

INCLUDESRC
# this is a comment.
# INCLUDESRC has to be defined for one sourcefile.
# without it only the defines, and no implementations are parsed.

# shrink the binary with tools/shrinkelf
SHRINKELF

# use the linker script onlytext
# meaning, only text and stack sections are loaded
LDSCRIPT onlytext

# return, and the #endif statement are the last lines of the config
return  
#endif

int main(int argc, char *argv[] ){
    puts("Hello, world!");
		return(0);
}
--------------------

Only functions defined are going to be built.

There are several examples given within the folder examples, +
the files within the folder test are there for regression tests, +
but might also be helpful.

To compile a c source file with embedded configuration (as in the example above), +
type 'minicc --config example.c -o example example.c'. +
(Shortcut 'minicc -mlc example.c')

(minicc needs to be in the standard search path) +
If you'd like to "install" the minicc, simply copy the script minicc into /usr/local/bin, + 
or wherever your executables live and can be found.

The minilib itself, as well as the supllied linker scripts are embedded into minicc, +
and extracted and piped to gcc on demand.

(There are compatibility headers provided, e.g. stdio.h; +
these are however not stable and will most probably not work. +
I'm going to update them, as soon other and more important things are finished.)


In addition to the switches, which are built of the function's name and the prefix 'mini_'; +
e.g. 'mini_puts', these switches are defined for the configuration of minilib:


mini_start:: 
	Built the start routine, which is needed for the execution of the binary.


mini_buf 512::
	the buf size in Bytes (here 512Bytes), which is used by minilib for input/output functions,
	the globals and malloc/free. 
	Uncomment this, if you do not need globals or functions,
	depending on the buffer.


globals_on_stack::
  put the minibuf and all globals onto the stack
	(this enables to omit all sections besides text and stack of the binary,
	when nowhere else globals (ans static variables) are used,
	for aggressive size optimization)
	The address of the globals is going to be stored within a fixed cpu register. (r15 at amd64)
	The globals are stored at the end of the stack, behind the first return addresse.
	(They are setup within startup.c; however, startup calls main, but never returns itself,
	instead the function exits via syscall. So it is not possible to overwrite the return addresse 
	with a Bufferoverflow. In case you have to work with unsafe userinput, please have a look
	into map_protected)
	

mini_errno::
	generate the code for the errno variable. +
	This generates some overhead +
	(a few bytes per every syscall, and every function which sets errno;
	globals are generated as well) +
	Without the switch, syscalls do return the negative errno value on failure.


mini_syscalls::
	define the syscall wrappers, starting with 'sys_'


HEADERGUARDS::
	define the headerguards, which hopefully prevent the inclusion
	of the standard library headers.


OPTFLAG -Os::
  optimization Flag. Os,O1,O2 should be save. O3 causes sometimes troubles


   e.g. OPTFLAG '-g -O0'
   (compile with debug info)


OPTIMIZE::
	add some speed optimizations, mainly vectorizations for 64bit. +
	This comes naturally with a memory penalty, +
	yet, the raise in memory usage is neglectible. (a few hundred bytes)


STRIPFLAG::
  stripflag ( defaults to -s) +
	Leaving 'STRIPFLAG' alone removes the flag parameter from gcc's commandline.


SOURCES file1 file2 ...::
	(optional) +
	define other files as sources, to be compiled into the binary. 


BINARY name::
	(optional) +
	Set the name of the resulting binary.+
	(supplied to gcc as -o name)


INCLUDESRC::
  Build minilib with source. +
	Without this switch, only defines and declarations are included. +
	When building with several object files, most probably you should +
	enable this flag only for one object file. +
	It's also possible to pass the switch via a define flag to gcc. +
	('-DINCLUDESRC')


LDSCRIPT default::
  
	The ldscript to use +
  Defines, which executable sections are going to be built. +
	Can be one of: +
  - *default*: .text .data .rodata .bss (.stack) +
  - *default_execstack*: .text .data .rodata .bss (.stack) +
      The stack is executable, what is needed for e.g. closures+
  - *textandbss*: .text .bss (.stack) +
  - *onlytext*: .text (.stack) +
	- *onlytext_tiny*: .text (the stack is defined by the kernel, and made executable) +
	   Despite general meaning, an executable stack isn't harmful on its own,and even widely used.
     It just is important (as always), to check user input against e.g. overflows.


SHRINKELF::
  Shrink the compiled binary with shrinkelf. +
	Aggressively strip the elf headers.


DEBUG::
  generate debug info (-O0 -g). Overwrites OPTFLAG, STRIPFLAG and SHRINKELF


DEFINE def value::
	add a #define def value
	"def" and "value" have to be within apostrophes,
	when they contain either brackets,spaces, or other operators.
	Multilines are possible, with a preceding \\ before the linebreak.





---

== conversions



[[_itobin]]
_itobin::

  _int _itobin(int i, char*buf, int prec, int groups )_ + 
Size: ~188B link:../src/conversions/itobin.c[../src/conversions/itobin.c] l.8 

[[_itohex]]
_itohex::

  _int _itohex(int i,char* buf,int padding, int capitals)_ + 
Size: ~250B link:../src/conversions/itohex.c[../src/conversions/itohex.c] l.6 

[[atoi]]
atoi::

  _int atoi(const char *c)_ + 
 *convert a string to an integer*
Size: ~32B link:../src/conversions/atoi.c[../src/conversions/atoi.c] l.3 manpage: link:manpages/stdlib/atoi.3.rst[atoi] +


[[atol]]
atol::

  _long atol(const char *c)_ + 
 *convert a string to a long integer*
Size: ~108B link:../src/conversions/atol.c[../src/conversions/atol.c] l.3 manpage: link:manpages/stdlib/atol.3.rst[atol] +


[[dtodec]]
dtodec::

  _int dtodec(double d, char* buf, int precision)_ + 
 *Defines:* uitodec + 
Size: ~760B link:../src/conversions/dtodec.c[../src/conversions/dtodec.c] l.10 

[[itoHEX]]
itoHEX::

  _int itoHEX(int i,char* buf,int padding)_ + 
-----
convert a number to hexadecimal representation with big capitals.
 the conversion assumes a size of 32bits for integers,
 negative values are represented as they are stored internally.
 ( -1 is 0xFFFFFFFF, -2 0xFFFFFFFE, ... )
-----
Size: ~250B link:../src/conversions/itohex.c[../src/conversions/itohex.c] l.65 

[[itobin]]
itobin::

  _#define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )_ + 
-----
convert a number to a binary representation.
 the conversion assumes a size of 32bits for integers,
 negative values are represented as they are stored internally.
 ( -1 is 11111111111111111111111111111111,
   -2    11111111111111111111111111111110, ...)
-----
link:../src/conversions/itobin.c[../src/conversions/itobin.c] l.46 

[[itodec]]
itodec::

  _int itodec(int i, char *buf, int prec, char limiter, char pad )_ + 
 *Defines:* uitodec + 
Size: ~555B link:../src/conversions/itodec.c[../src/conversions/itodec.c] l.123 

[[itohex]]
itohex::

  _int itohex(int i,char* buf,int padding)_ + 
-----
convert a number to hexadecimal representation.
 the conversion assumes a size of 32bits for integers,
 negative values are represented as they are stored internally.
 ( -1 is 0xffffffff, -2 0xfffffffe, ... )
-----
Size: ~247B link:../src/conversions/itohex.c[../src/conversions/itohex.c] l.53 

[[itooct]]
itooct::

  _int itooct(int i, char *buf)_ + 
-----
convert int to octal
 return the number of chars written.
-----
link:../src/conversions/itooct.c[../src/conversions/itooct.c] l.4 

[[ltodec]]
ltodec::

  _int ltodec(long i, char *buf, int prec, char limiter )_ + 
Size: ~323B link:../src/conversions/ltodec.c[../src/conversions/ltodec.c] l.75 

[[strtol]]
strtol::

  _long int strtol(const char *c, const char **endp, int base)_ + 
 *convert a string to a long integer*
-----
conversion
 doesn't check for overflow(!)
-----
Size: ~252B link:../src/string/strtol.c[../src/string/strtol.c] l.5 manpage: link:manpages/stdlib/strtol.3.rst[strtol] +


[[uitodec]]
uitodec::

  _int ATTR_OPT("Os")uitodec(unsigned int i, char *buf, int prec, char limiter, char pad )_ + 
-----
convert int to string.
 prec: precision, e.g. 4=> 0087 
 pad: 0 (pad with spaces), or the char to pad
-----
link:../src/conversions/itodec.c[../src/conversions/itodec.c] l.9 

[[ultodec]]
ultodec::

  _int ultodec(unsigned long ui, char *buf, int prec, char limiter )_ + 
Size: ~293B link:../src/conversions/ltodec.c[../src/conversions/ltodec.c] l.6 



---

== directories



[[alphasort]]
alphasort::

  _int alphasort( const struct dirent** de1, const struct dirent** de2 )_ + 
-----
Sort dirents by name.
 Deviating of the standard, 
 the asciitables is used for the comparison
 (using strcmp)
-----
link:../src/directories/alphasort.c[../src/directories/alphasort.c] l.7 manpage: link:manpages/gen/scandir.3.rst[alphasort] +


[[basename]]
basename::

  _char *basename(char *path)_ + 
 *return the last component of a pathname*
Size: ~151B link:../src/directories/basename.c[../src/directories/basename.c] l.2 manpage: link:manpages/gen/basename.3.rst[basename] +


[[chdir]]
chdir::

  _int chdir(const char* path)_ + 
 *change working directory*
Size: ~47B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.114 manpage: link:manpages/sys/chdir.2.rst[chdir] +


[[dirbuf]]
dirbuf::

  __ + 
-----
the switch for defining the dirbuf.
 used internally
-----
link:../include/dirent.h[../include/dirent.h] l.7 

[[dirbufsize]]
dirbufsize::

  __ + 


[[dirfd]]
dirfd::

  _int dirfd(DIR *d)_ + 
 *extract the file descriptor used by a DIR stream*
link:../src/directories/dirfd.c[../src/directories/dirfd.c] l.2 manpage: link:manpages/gen/directory.3.rst[dirfd] +


[[dirname]]
dirname::

  _char *dirname(char *s)_ + 
 *Defines:* strlen + 
 *report the parent directory name of a file pathname*
Size: ~179B link:../src/directories/dirname.c[../src/directories/dirname.c] l.8 manpage: link:manpages/gen/dirname.3.rst[dirname] +


[[fstat]]
fstat::

  _int fstat(int fd,struct stat* statbuf)_ + 
 *get file status*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.111 manpage: link:manpages/sys/stat.2.rst[fstat] +


[[getcwd]]
getcwd::

  _int getcwd( char *buf,  unsigned long size)_ + 
 *get the pathname of the current working directory*
Size: ~61B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.123 manpage: link:manpages/gen/getcwd.3.rst[getcwd] +


[[getdents]]
getdents::

  _int getdents( unsigned int fd, struct dirent *direntry, unsigned int count )_ + 
 *get directory entries*
Size: ~65B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.106 manpage: link:manpages/sys/getdirentries.2.rst[getdents] +


[[inotify_add_watch]]
inotify_add_watch::

  _int inotify_add_watch( int fd,  const char *pathname,  u32 mask)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.206 

[[inotify_init]]
inotify_init::

  _int DEF_syscall(inotify_init,0)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.205 

[[inotify_init1]]
inotify_init1::

  _int inotify_init1( int flags)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.208 

[[inotify_rm_watch]]
inotify_rm_watch::

  _int inotify_rm_watch( int fd,  __s32 wd)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.207 

[[mkdir]]
mkdir::

  _int mkdir( const char *pathname, int mode)_ + 
 *make a directory relative to directory file descriptor*
Size: ~59B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.165 manpage: link:manpages/sys/mkdir.2.rst[mkdir] +


[[opendir]]
opendir::

  _DIR *opendir(const char *name )_ + 
 *Defines:* close sys_brk 0 getbrk dirbuf open write + 
 *open directory associated with file descriptor*
Size: ~281B link:../src/directories/opendir.c[../src/directories/opendir.c] l.10 manpage: link:manpages/gen/directory.3.rst[opendir] +


[[opendirp]]
opendirp::

  _DIR *opendirp(const char *name, DIR *dir)_ + 
 *Defines:* getbrk dirbuf open close sys_brk 0 + 
link:../src/directories/opendirp.c[../src/directories/opendirp.c] l.5 

[[readdir]]
readdir::

  _struct dirent *readdir(DIR *dir)_ + 
 *Defines:* dirbuf getdents + 
 *read a directory*
-----
read a directory.
 return the next dirent, or 0, if the end is reached.
 return 0 on error and set errno,
 if mini_errno is not defined, return -errno on error
-----
Size: ~133B link:../src/directories/readdir.c[../src/directories/readdir.c] l.10 manpage: link:manpages/gen/directory.3.rst[readdir] +


[[rewinddir]]
rewinddir::

  _void rewinddir(DIR *dir)_ + 
 *reset the position of a directory stream to the beginning*
Size: ~80B link:../src/directories/rewinddir.c[../src/directories/rewinddir.c] l.2 manpage: link:manpages/gen/directory.3.rst[rewinddir] +


[[rmdir]]
rmdir::

  _int rmdir( const char *pathname)_ + 
 *remove a directory*
Size: ~47B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.166 manpage: link:manpages/sys/rmdir.2.rst[rmdir] +


[[scandir]]
scandir::

  _int scandir(const char *path, struct dirent **listing[], int (*fp_select)(const struct dirent *),	int (*cmp)(const struct dirent **, const struct dirent **))_ + 
 *Defines:* 0 getpid getbrk strlen swap getdents memcpy kill sys_brk dirbuf seterrno open write errno + 
 *scan a directory*
-----
list files and dirs in a directory

 This implementation uses malloc_brk() for the dynamic allocation
 of the listing, and tries to do as less copies as possible.
 The dynamically allocated space for the result list (**listing[])
 is guaranteed to be at one continuous memory location.

 if the select callback is 0, meaning all entries should be returned,
 There are no copies done at all, 
 besides the copying from kernelspace to userspace.

 To free the space, allocated for the listing,
 either call free_brk(),
 when no other allocations via malloc_brk took place.

 Or save the brk before you call scandir,
 and restore it after the call.
 (e.g.)
 long savebrk=getbrk();
 int ret=scandir(...);
 brk(savebrk);
 Freeing single list entries might give unexpected results.

 returns the number of the read entries,
 or the negative errno on error.
-----
link:../src/directories/scandir.c[../src/directories/scandir.c] l.30 manpage: link:manpages/gen/scandir.3.rst[scandir] +


[[scandir_bufsize]]
scandir_bufsize::

  __ + 
-----
the increment of the buffer of scandir in bytes for memory allocations
 (default:4096)
-----
link:../src/directories/scandir_bufsize.c[../src/directories/scandir_bufsize.c] l.4 

[[seekdir]]
seekdir::

  _void seekdir(DIR *dir, long off)_ + 
 *set the position of a directory stream*
Size: ~100B link:../src/directories/seekdir.c[../src/directories/seekdir.c] l.2 manpage: link:manpages/gen/directory.3.rst[seekdir] +


[[telldir]]
telldir::

  _long telldir(DIR *dir)_ + 
 *current location of a named directory stream*
Size: ~32B link:../src/directories/telldir.c[../src/directories/telldir.c] l.2 manpage: link:manpages/gen/directory.3.rst[telldir] +




---

== errno



[[errno]]
errno::

  _#ifdef mini_errno_ + 
 *error return value*


[[errno_str]]
errno_str::

  _char *errno_str(int err)_ + 
-----
convert errno to str, with 3 chars length
 ending the string (global) 
 with two \0\0, when errno<100
 errnum must be <200.
-----
Size: ~123B link:../src/process/errno_str.c[../src/process/errno_str.c] l.7 

[[exit_errno]]
exit_errno::

  _void exit_errno( int errnum )_ + 
 *Defines:* write errno_str exit execve + 
-----
exit, and execute /bin/errno
 this is intended to give a error message for the 
 given errno num.
 Instead of having the error messages compiled 
 into each binary, they can stay within one executable, "errno"
 This spares about 4kB, but needs errno installed to /bin/errno
 It's the drawback of not having a shared library,
 where all executables would share the same errno messages
 in memory.
 On the other hand, a shared library would need to be installed
 as well.
 The supplied errno can be negative,
 the absolute value is supplied to errno.
-----
link:../src/process/exit_errno.c[../src/process/exit_errno.c] l.17 

[[perror]]
perror::

  _void perror(const char *msg)_ + 
 *Defines:* fileno strlen strerror write errno + 
 *write error messages to standard error*
Size: ~329B link:../src/output/perror.c[../src/output/perror.c] l.4 manpage: link:manpages/string/strerror.3.rst[perror] +


[[ret_errno]]
ret_errno::

  _#ifdef mini_errno_ + 
-----
This macro expands to a return, and
 (when mini_errno is defined) returns -1 and sets errno,
 or returns the negative errno value.
-----
link:../include/ret_errno.h[../include/ret_errno.h] l.5 

[[seterrno]]
seterrno::

  _#ifdef mini_errno_ + 
-----
set errno, but only when errno is defined.
-----
link:../include/seterrno.h[../include/seterrno.h] l.3 

[[strerror]]
strerror::

  _char* strerror( int errnum )_ + 
link:../src/string/strerror.c[../src/string/strerror.c] l.7 manpage: link:manpages/string/string.3.rst[strerror] +


[[verbose_errstr]]
verbose_errstr::

  _const char* verbose_errstr(int num)_ + 
-----
verbose error (errno) string. 
 this adds about 3.5kB to the compiled binary(!)
-----
link:../include/errstr.h[../include/errstr.h] l.10 

[[verbose_errstr2]]
verbose_errstr2::

  _const char* verbose_errstr2(int num)_ + 
-----
verbose error (errno) string. 
 this adds about 3.5kB to the compiled binary(!)
 Trying to shrink that here.
-----
link:../include/errstr2.h[../include/errstr2.h] l.11 



---

== files



[[_fopen]]
_fopen::

  _FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f)_ + 
 *Defines:* close fileno open + 
-----
modes implemented: r, r+, w, w+, a, a+
-----
Size: ~316B link:../src/streams/_fopen.c[../src/streams/_fopen.c] l.12 

[[access]]
access::

  _int access( const char *filename, int mode)_ + 
 *determine accessibility of a file relative to directory file*
Size: ~59B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.168 manpage: link:manpages/sys/access.2.rst[access] +


[[chmod]]
chmod::

  _int chmod( const char *filename, mode_t mode)_ + 
 *change mode of a file relative to directory file descriptor*
Size: ~59B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.192 manpage: link:manpages/sys/chmod.2.rst[chmod] +


[[chown]]
chown::

  _int chown( const char *filename, uid_t user, gid_t group)_ + 
 *change owner and group of a file relative to directory*
Size: ~71B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.193 manpage: link:manpages/sys/chown.2.rst[chown] +


[[close]]
close::

  _int close( int fd )_ + 
 *close a file descriptor*
Size: ~51B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.102 manpage: link:manpages/sys/close.2.rst[close] +


[[closedir]]
closedir::

  _int closedir(DIR *dir)_ + 
 *Defines:* getbrk sys_brk + 
 *close a directory stream*
Size: ~323B link:../src/directories/closedir.c[../src/directories/closedir.c] l.6 manpage: link:manpages/gen/directory.3.rst[closedir] +


[[creat]]
creat::

  _int volatile creat( const char *s, int mode )_ + 
 *Defines:* open + 
 *create a new file or rewrite an existing one*
Size: ~124B link:../src/file/open.c[../src/file/open.c] l.35 manpage: link:manpages/compat-43/creat.2.rst[creat] +


[[dup]]
dup::

  _int dup(int fd)_ + 
 *duplicate an open file descriptor*
Size: ~51B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.119 manpage: link:manpages/sys/dup.2.rst[dup] +


[[dup2]]
dup2::

  _int dup2(int oldfd, int newfd)_ + 
 *duplicate a file descriptor*
Size: ~63B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.120 manpage: link:manpages/sys/dup.2.rst[dup2] +


[[dup3]]
dup3::

  _int dup3(int oldfd, int newfd, int flags)_ + 
 *duplicate a file descriptor*
Size: ~75B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.121 manpage: link:manpages/gen/dup3.3.rst[dup3] +


[[fchmod]]
fchmod::

  _int fchmod( unsigned int fd, mode_t mode)_ + 
 *change mode of a file*
Size: ~63B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.117 manpage: link:manpages/sys/chmod.2.rst[fchmod] +


[[fchown]]
fchown::

  _int fchown( unsigned int fd, uid_t user, gid_t group)_ + 
 *change owner and group of a file*
Size: ~75B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.116 manpage: link:manpages/sys/chown.2.rst[fchown] +


[[fcntl]]
fcntl::

  _int fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)_ + 
 *file control*
Size: ~77B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.169 manpage: link:manpages/sys/fcntl.2.rst[fcntl] +


[[fsync]]
fsync::

  _int fsync(int a1 )_ + 
 *synchronize changes to a file*
Size: ~51B link:../include/lseek.h[../include/lseek.h] l.21 manpage: link:manpages/sys/fsync.2.rst[fsync] +


[[ftruncate]]
ftruncate::

  _int ftruncate(unsigned int a1, unsigned int a2 )_ + 
 *truncate a file to a specified length*
Size: ~63B link:../include/lseek.h[../include/lseek.h] l.20 manpage: link:manpages/sys/truncate.2.rst[ftruncate] +


[[link]]
link::

  _int link( const char *oldname, const char *newname)_ + 
 *link one file to another file relative to two directory*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.125 manpage: link:manpages/sys/link.2.rst[link] +


[[lseek]]
lseek::

  _int lseek(unsigned int a1, int a2, int a3 )_ + 
 *move the read/write file offset*
Size: ~75B link:../include/lseek.h[../include/lseek.h] l.18 manpage: link:manpages/sys/lseek.2.rst[lseek] +


[[open]]
open::

  _int volatile open( const char *s, int flags, ... )_ + 
 *open file relative to directory file descriptor*
-----
open or create a file.
 warning: when using the flag O_CREAT,
 file permission flags have to be given
 as third argument. Otherwise file permission
 flags will be random. (I still do not know, what 
 the flag showing up as "-T" means..)
-----
Size: ~124B link:../src/file/open.c[../src/file/open.c] l.18 manpage: link:manpages/sys/open.2.rst[open] +


[[readahead]]
readahead::

  _int readahead( int fd,  loff_t offset,  size_t count)_ + 
 *initiate file readahead into page cache*
Size: ~79B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.241 

[[rename]]
rename::

  _int rename( const char* oldpath, const char* newpath )_ + 
 *rename file relative to directory file descriptor*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.108 manpage: link:manpages/sys/rename.2.rst[rename] +


[[select]]
select::

  _int volatile ATTR_OPT("O0") select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait)_ + 
 *synchronous I/O multiplexing*
Size: ~138B link:../include/select.h[../include/select.h] l.16 manpage: link:manpages/sys/select.2.rst[select] +


[[sendfile]]
sendfile::

  _int sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_ + 
 *transfer data between file descriptors*
Size: ~142B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.172 manpage: link:manpages/sys/sendfile.2.rst[sendfile] +


[[stat]]
stat::

  _int stat(const char* filename,struct stat* statbuf)_ + 
 *get file status*
Size: ~49B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.112 manpage: link:manpages/sys/stat.2.rst[stat] +


[[symlink]]
symlink::

  _int symlink( const char *oldname,  const char *newname)_ + 
 *make a symbolic link relative to directory file descriptor*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.126 manpage: link:manpages/sys/symlink.2.rst[symlink] +


[[umask]]
umask::

  _int umask( int mask)_ + 
 *set and get the file mode creation mask*
Size: ~51B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.240 manpage: link:manpages/sys/umask.2.rst[umask] +


[[unlink]]
unlink::

  _int unlink( const char* path)_ + 
 *remove a directory entry relative to directory file descriptor*
Size: ~47B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.109 manpage: link:manpages/sys/unlink.2.rst[unlink] +




---

== hashes



[[djb_cksum]]
djb_cksum::

  _unsigned int djb_cksum( const char* p, unsigned int len )_ + 
-----
checksum algorithm by d.j.bernstein.
 Didn't do any benchmarks, but the computation 
 might be quite performant. 
 It is a bitshift and two additions per byte.
-----
link:../src/file/cksum.c[../src/file/cksum.c] l.8 



---

== input



[[fgetc]]
fgetc::

  _int fgetc(FILE *F)_ + 
 *Defines:* read fileno + 
 *get a byte from a stream*
Size: ~57B link:../src/streams/fgetc.c[../src/streams/fgetc.c] l.5 manpage: link:manpages/stdio/getc.3.rst[fgetc] +


[[fgets]]
fgets::

  _char* fgets(char *buf, int size, FILE* F)_ + 
 *Defines:* read fileno + 
 *get a string from a stream*
link:../src/streams/fgets.c[../src/streams/fgets.c] l.4 manpage: link:manpages/stdio/fgets.3.rst[fgets] +


[[getc]]
getc::

  _#define getc(F) fgetc(F)_ + 
 *Defines:* fileno read + 
 *get a byte from a stream*
link:../include/fgetc.h[../include/fgetc.h] l.8 manpage: link:manpages/stdio/getc.3.rst[getc] +


[[getchar]]
getchar::

  _#define getchar() fgetc(0)_ + 
 *Defines:* read fileno + 
 *get a byte from a*
link:../include/fgetc.h[../include/fgetc.h] l.11 manpage: link:manpages/stdio/getc.3.rst[getchar] +


[[gets]]
gets::

  _#define gets(F) fgets(F,0xfffffff,stdin)_ + 
 *Defines:* fileno read + 
 *get a string from a*
link:../src/streams/gets.c[../src/streams/gets.c] l.3 manpage: link:manpages/stdio/fgets.3.rst[gets] +


[[read]]
read::

  _int read( int fd, void *buf, int len )_ + 
 *read from a file*
Size: ~62B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.103 manpage: link:manpages/sys/read.2.rst[read] +


[[ungetc]]
ungetc::

  _int ungetc(int c, FILE *F)_ + 
 *push byte back into input stream*
-----
pushes one char back to the stream.
 Overwrites a previously pushed char
 (conforming to the posix spec) 
-----
Size: ~66B link:../src/streams/ungetc.c[../src/streams/ungetc.c] l.5 manpage: link:manpages/stdio/ungetc.3.rst[ungetc] +




---

== ipc



[[kill]]
kill::

  _int kill( pid_t pid,  int sig)_ + 
 *send a signal to a process or a group of processes*
Size: ~63B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.135 manpage: link:manpages/sys/kill.2.rst[kill] +


[[mkfifo]]
mkfifo::

  _int mkfifo( const char* path, mode_t mode )_ + 
 *make a FIFO special file relative to directory file descriptor*
Size: ~68B link:../include/mkfifo.h[../include/mkfifo.h] l.4 manpage: link:manpages/sys/mkfifo.2.rst[mkfifo] +


[[pipe]]
pipe::

  _int pipe( int *filedes)_ + 
 *create an interprocess channel*
Size: ~41B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.239 manpage: link:manpages/sys/pipe.2.rst[pipe] +


[[raise]]
raise::

  _int raise(int signr)_ + 
 *Defines:* kill getpid + 
 *send a signal to the executing process*
Size: ~68B link:../src/process/sigaction.c[../src/process/sigaction.c] l.145 manpage: link:manpages/gen/raise.3.rst[raise] +


[[rt_sigaction]]
rt_sigaction::

  _int rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)_ + 
 *examine and change a signal action*
Size: ~132B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.144 

[[rt_sigprocmask]]
rt_sigprocmask::

  _int rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)_ + 
 *examine and change blocked signals*
Size: ~132B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.177 

[[rt_sigreturn]]
rt_sigreturn::

  _int rt_sigreturn( unsigned long __unused)_ + 
 *return from signal handler and cleanup stack frame*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.145 

[[sigaction]]
sigaction::

  _int volatile sigaction(int sig, const struct sigaction *act, struct sigaction *oact)_ + 
 *Defines:* memcpy rt_sigaction + 
 *examine and change a signal action*
Size: ~215B link:../src/process/sigaction.c[../src/process/sigaction.c] l.117 manpage: link:manpages/sys/sigaction.2.rst[sigaction] +


[[sigaddset]]
sigaddset::

  _int sigaddset(sigset_t *set, int sig)_ + 
 *add a signal to a signal set*
Size: ~85B link:../src/process/sigaction.c[../src/process/sigaction.c] l.34 manpage: link:manpages/gen/sigsetops.3.rst[sigaddset] +


[[sigdelset]]
sigdelset::

  _int sigdelset(sigset_t *set, int sig)_ + 
 *delete a signal from a signal set*
Size: ~85B link:../src/process/sigaction.c[../src/process/sigaction.c] l.68 manpage: link:manpages/gen/sigsetops.3.rst[sigdelset] +


[[sigemptyset]]
sigemptyset::

  _int sigemptyset(sigset_t *set)_ + 
 *initialize and empty a signal set*
Size: ~41B link:../src/process/sigaction.c[../src/process/sigaction.c] l.7 manpage: link:manpages/gen/sigsetops.3.rst[sigemptyset] +


[[sigfillset]]
sigfillset::

  _int sigfillset(sigset_t *set)_ + 
 *initialize and fill a signal set*
Size: ~41B link:../src/process/sigaction.c[../src/process/sigaction.c] l.20 manpage: link:manpages/gen/sigsetops.3.rst[sigfillset] +


[[sigismember]]
sigismember::

  _int sigismember(sigset_t *set, int sig)_ + 
 *test for a signal in a signal set*
Size: ~44B link:../src/process/sigaction.c[../src/process/sigaction.c] l.85 manpage: link:manpages/gen/sigsetops.3.rst[sigismember] +


[[signal]]
signal::

  _sighandler_t signal(int sig, sighandler_t func )_ + 
 *Defines:* memcpy write rt_sigaction + 
 *signal management*
Size: ~337B link:../src/process/signal.c[../src/process/signal.c] l.5 manpage: link:manpages/gen/signal.3.rst[signal] +


[[sigprocmask]]
sigprocmask::

  _int sigprocmask(int how, const sigset_t *set, sigset_t *oldset)_ + 
 *Defines:* rt_sigprocmask + 
 *examine and change blocked signals*
Size: ~130B link:../src/process/sigaction.c[../src/process/sigaction.c] l.61 manpage: link:manpages/sys/sigprocmask.2.rst[sigprocmask] +


[[wait]]
wait::

  _pid_t wait(int *wstatus)_ + 
 *Defines:* wait4 + 
 *wait for a child process to stop or terminate*
Size: ~122B link:../src/process/wait.c[../src/process/wait.c] l.8 manpage: link:manpages/sys/wait.2.rst[wait] +


[[wait4]]
wait4::

  _int wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)_ + 
 *wait for process to change state, BSD style*
Size: ~133B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.167 manpage: link:manpages/sys/wait.2.rst[wait4] +


[[waitpid]]
waitpid::

  _pid_t waitpid(pid_t pid, int *wstatus, int options)_ + 
 *Defines:* wait4 + 
 *wait for a child process to stop or terminate*
Size: ~138B link:../src/process/wait.c[../src/process/wait.c] l.16 manpage: link:manpages/sys/wait.2.rst[waitpid] +




---

== math



[[abs]]
abs::

  _int abs(int i)_ + 
 *return an integer absolute value*
link:../include/math.h[../include/math.h] l.25 manpage: link:manpages/stdlib/abs.3.rst[abs] +


[[div]]
div::

  _div_t div(int numerator, int denominator)_ + 
 *compute the quotient and remainder of an integer division*
Size: ~84B link:../include/math.h[../include/math.h] l.8 manpage: link:manpages/stdlib/div.3.rst[div] +


[[djb2_hash]]
djb2_hash::

  _unsigned long djb2_hash(const unsigned char *str)_ + 
-----
hashes, from d.j.Bernstein
 (http://www.cse.yorku.ca/~oz/hash.html)
 I've tested djb2_hash, and it gives quite good results.
 I'm sure, Bernstein did think and test his algorithm sincerely.
 When combining djb2_hash and sdbm_hash, the probability of collisions
 might tend to zero.
 Me I'm going this way. I guess. I might check djb2_hash for collisions within a space of around 8 digits.
 The hash functions compute the hashes of a c string with a 0 at the end.
 The cksum functions do work with a pointer and a given len.
-----
Size: ~86B link:../src/math/hashes.c[../src/math/hashes.c] l.12 

[[labs]]
labs::

  _long int labs(long int i)_ + 
 *return a long integer absolute value*
Size: ~46B link:../include/math.h[../include/math.h] l.30 manpage: link:manpages/stdlib/labs.3.rst[labs] +


[[ldiv]]
ldiv::

  _ldiv_t ldiv(long int numerator, long int denominator)_ + 
 *compute quotient and remainder of a long division*
Size: ~82B link:../include/math.h[../include/math.h] l.16 manpage: link:manpages/stdlib/ldiv.3.rst[ldiv] +


[[rand]]
rand::

  _unsigned int rand()_ + 
Size: ~118B link:../src/math/rand.c[../src/math/rand.c] l.15 manpage: link:manpages/stdlib/rand.3.rst[rand] +


[[sdbm_hash]]
sdbm_hash::

  _unsigned long sdbm_hash(const unsigned char *str)_ + 
Size: ~80B link:../src/math/sdbm_hash.c[../src/math/sdbm_hash.c] l.3 

[[srand]]
srand::

  _void srand( unsigned int i )_ + 
 *pseudo-random number generator*
Size: ~48B link:../src/math/rand.c[../src/math/rand.c] l.7 manpage: link:manpages/stdlib/rand.3.rst[srand] +




---

== memory



[[brk]]
brk::

  _int brk( const void* addr )_ + 
 *Defines:* sys_brk + 
 *change data segment size*
-----
set the brk to addr
 return 0 on success.
 conformant brk, when mini_errno is defined return -1 and set errno.
 if errno isn't available,
 returns the negative errno value on error
-----
Size: ~66B link:../src/memory/brk.c[../src/memory/brk.c] l.8 manpage: link:manpages/sys/brk.2.rst[brk] +


[[free]]
free::

  _void free(void *p)_ + 
 *Defines:* getbrk sys_brk + 
 *free allocated memory*
Size: ~32B link:../src/memory/malloc.c[../src/memory/malloc.c] l.145 manpage: link:manpages/stdlib/memory.3.rst[free] +


[[free_brk]]
free_brk::

  _int free_brk()_ + 
-----
free all memory,
 which has been allocated with malloc_brk.
 Returns 0, if memory has been freed;
 1, when there hasn't been any memory allocations with
 malloc_brk before.
 Then brk() gives an error, return the return value of brk
-----
link:../src/memory/freebrk.c[../src/memory/freebrk.c] l.9 

[[getbrk]]
getbrk::

  _long getbrk()_ + 
-----
get the current brk
 does either a syscall to brk,
 or returns the globally saved var
-----
link:../src/memory/getbrk.c[../src/memory/getbrk.c] l.6 

[[malloc]]
malloc::

  _void* malloc(int size)_ + 
 *a memory allocator*
-----
0
 Here we go.. with the .. well. 
 Fastes and smallest malloc/free combi ever. 
 Not the smartest.
 Since it isn't exactly a memory allocation,
 instead it (mis)uses the minilib buf.
 Which is allocated by the kernel, and uses
 either the bss section, or is allocated on the stack.
 (option "globals_on_stack")

 This is basically a linked list,
 optimized for fast access, allocation of new elements, 
 and small memory overhead.
 Albite the list structure might be hard to recognize.
 It is not the right malloc, if you expect
 many de- or reallocations.
 And it obviously is not the right choose, when
 expecting medium to big sized allocations. (> 1 page, here 4kB, as medium sized)
 
 Here we use mbuf from top to bottom as stack.
 64 Bytes are left at the bottom as reserve.
 Possibly we'd like to complain
 about the lack of memory, before we exit.

 ATM, the 'free' is really lazy. 
 It free's memory, but a real 'free' is only commited,
 when all memory below a freed area is also freed.
 Since the target of minilib atm are tiny tools, 
 this might be ok.
 ;) but, as I told before - 
 probably you should look out for a proper malloc implementation.
 It depends on your needs.

 I'm not sure yet, 
 whether another implementation of free would be useful at all.
 Overall, I'd really prefer keeping minilib tiny.

 Reusing sparse freed memory areas also leads 
 to a whole bunch of complications.
 cache misses, searching complexity,
 storage overhead, potentially page faults,
 just to name a few.

 I'm not sure whether it's worth it.

 And the existing malloc implementations 
 out there are countless.

 ;) It's sometimes smarter to stay special,
 albite in this case this means the opposite.
 /misc

 The memory layout looks like this:
 mlgl->ibuf and mlgl->mbuf do point to the same address range.
 mlgl->ibuf is provided for alignment and faster access to the int values.

 flag prev free is the first bit in size. (0x8000, eq 1000 0000 0000 0000 binary when free), 
 (mbufsize)
 ```
      size  data  size    mini_buf size
      8008dataxxxx0004data8000
-----
Size: ~173B link:../src/memory/malloc.c[../src/memory/malloc.c] l.125 manpage: link:manpages/stdlib/memory.3.rst[malloc] +


[[malloc_brk]]
malloc_brk::

  _void* malloc_brk(int size)_ + 
 *Defines:* sys_brk getbrk + 
-----
allocate via setting the brk
 free and realloc can be used normally.
 The intention of malloc_brk is for subsequent calls to realloc.
 The saved data has not to be copied,
 instead realloc just writes the new size and sets 
 the brk accordingly.
 if the break is saved before one or more calls to malloc_brk,
 the allocated memory can also be free'd by setting the brk to the saved value
 with brk(saved_brk)
 free_brk() free's all memory, which has been allocated with malloc_brk
-----
link:../src/memory/malloc_brk.c[../src/memory/malloc_brk.c] l.16 

[[map_protected]]
map_protected::

  _void* map_protected(int len)_ + 
 *Defines:* mmap mprotect + 
-----
allocate a buffer, which is surrounded by protected pages. 
 mprotect(PROT_NONE)
 When there is a buffer overflow,
 neither the stack, nor other structures can be overwritten.
 Instead the overflow (or underflow) touches the next protected page,
 what results in a segfault.
 Most probably you'd like to catch the segfault signal.
 (By installing a segfault signal handler)

 The size is always a multiple of the systems pagesize, 4kB here.
 The len of the mapped memory area is rounded up to the next pagesize.
 The mapped area can only be freed by call(s) to munmap,
 neither realloc nor free are allowed.
 There is one page before, and one page after the mapped area
 protected with PROT_NONE, and len rounded up to the next
 pagebreak. So this is the overhead. 
 If an error occures, errno is set (when defined by the switch mini_errno), 
 and -1 returned, or the negative errno value, when errno isn't defined.
-----
link:../src/memory/map_protected.c[../src/memory/map_protected.c] l.22 

[[memcmp]]
memcmp::

  _int memcmp(const void* c1,const void* c2,int len)_ + 
 *compare bytes in memory*
Size: ~44B link:../src/memory/memcmp.c[../src/memory/memcmp.c] l.3 manpage: link:manpages/string/memcmp.3.rst[memcmp] +


[[memcpy]]
memcpy::

  _void* memcpy( void*d, const void *s, int n )_ + 
 *copy bytes in memory*
Size: ~84B link:../src/memory/memcpy.c[../src/memory/memcpy.c] l.4 manpage: link:manpages/string/memcpy.3.rst[memcpy] +


[[memfd_create]]
memfd_create::

  _int memfd_create( const char  *uname_ptr,  unsigned int flags)_ + 
 *create an anonymous file*
Size: ~59B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.182 

[[memfrob]]
memfrob::

  _void* memfrob(void* s, unsigned int len)_ + 
 *frobnicate (encrypt) a memory area*
-----
frob string; xor every char with 42
-----
Size: ~78B link:../src/memory/memfrob.c[../src/memory/memfrob.c] l.4 

[[memmove]]
memmove::

  _void* memmove(void *dest, const void *src, int n)_ + 
 *copy bytes in memory with overlapping areas*
Size: ~88B link:../src/memory/memmove.c[../src/memory/memmove.c] l.3 manpage: link:manpages/string/memmove.3.rst[memmove] +


[[memset]]
memset::

  _void *memset( void *s, int c, int n)_ + 
 *set bytes in memory*
Size: ~90B link:../src/memory/memset.c[../src/memory/memset.c] l.3 manpage: link:manpages/string/memset.3.rst[memset] +


[[mmap]]
mmap::

  _void* ATTR_OPT("O0") mmap(void* addr,  size_t len,  int prot,  int flags,  int fd,  off_t off)_ + 
 *map pages of memory*
-----
mmap wrapper
 address length is rounded up to a multiple of pagesize (4096 Bytes here)
 for the description, please look up the according manpage
 errno is only set, when mini_errno is defined
 if not, on error the negative errno value is returned.
 (e.g. -22 for "invalid argument")
-----
Size: ~197B link:../src/memory/mmap.c[../src/memory/mmap.c] l.8 manpage: link:manpages/sys/mmap.2.rst[mmap] +


[[mprotect]]
mprotect::

  _int mprotect( POINTER *a1, POINTER a2, int a3 )_ + 
 *set protection of memory mapping*
Size: ~146B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.237 manpage: link:manpages/sys/mprotect.2.rst[mprotect] +


[[mremap]]
mremap::

  _void* volatile ATTR_OPT("O0") mremap(void* addr, size_t old_len, size_t new_len, int flags, void* new_addr)_ + 
 *remap a virtual memory address*
Size: ~162B link:../include/mremap.h[../include/mremap.h] l.4 

[[munmap]]
munmap::

  _int munmap( void* addr,  size_t len)_ + 
 *unmap pages of memory*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.244 manpage: link:manpages/sys/munmap.2.rst[munmap] +


[[realloc]]
realloc::

  _void* realloc(void *p, int size)_ + 
 *Defines:* 0 getbrk sys_brk + 
 *memory reallocator*
Size: ~636B link:../src/memory/malloc.c[../src/memory/malloc.c] l.209 manpage: link:manpages/stdlib/memory.3.rst[realloc] +


[[sbrk]]
sbrk::

  _void* sbrk(long incr)_ + 
 *Defines:* sys_brk + 
 *change data segment size*
-----
Set the new brk, increment/decrement by incr bytes.
 return the old brk on success.
 conformant sbrk, when mini_errno is defined
 if no errno is available,
 returns the negative errno value on error
-----
Size: ~108B link:../src/memory/sbrk.c[../src/memory/sbrk.c] l.9 manpage: link:manpages/sys/brk.2.rst[sbrk] +


[[splice]]
splice::

  _int splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)_ + 
 *splice data to/from a pipe*
Size: ~178B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.187 

[[swap]]
swap::

  _void swap(void* a, void* b,int size)_ + 
-----
swap a with b, with 'size' bytes
 swaps integers and longs at once, when size eq sizeof(int/long)
-----
link:../src/sort/swap.c[../src/sort/swap.c] l.5 

[[unmap_protected]]
unmap_protected::

  _int unmap_protected(void *p, int len)_ + 
 *Defines:* munmap mprotect + 
-----
free an area, allocated before with map_protected
 (len must be the same, when at the invocation of map_protected)
 returns the value of munmap, when an error occures.
 errno is set, when defined.
 return 0 on success.
-----
link:../src/memory/map_protected.c[../src/memory/map_protected.c] l.44 



---

== output



[[_mprints]]
_mprints::

  _#define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)_ + 
 *Defines:* write + 
link:../include/prints.h[../include/prints.h] l.10 

[[ansicolors]]
ansicolors::

  __ + 
-----
defines for ansicolors at the console, 16 color mode
the names are:
 AC_NORM ( white text on black background)
 AC_BLACK 
 AC_RED 
 AC_GREEN 
 AC_BROWN 
 AC_BLUE 
 AC_MAGENTA 
 AC_MARINE (= AC_CYAN)
 AC_LGREY 
 AC_WHITE 
 AC_GREY 
 AC_LRED 
 AC_LGREEN 
 AC_YELLOW 
 AC_LBLUE 
 AC_LMAGENTA 
 AC_LMARINE (= AC_LCYAN)
 AC_LWHITE 
 AC_BGBLACK 
 AC_BGRED 
 AC_BGGREEN 
 AC_BGBROWN 
 AC_BGBLUE 
 AC_BGMAGENTA 
 AC_BGMARINE 
 AC_BGLGREY 
 AC_BGWHITE 

 AC_BOLD
 AC_FAINT
 AC_CURSIVE
 AC_UNDERLINE
 AC_LIGHTBG
 AC_BLINK
 AC_INVERTED
 AC_INVERSE

 ( Faint to inverse are not available at every terminal )
-----
link:../include/ansicolors.h[../include/ansicolors.h] l.45 

[[dprintf]]
dprintf::

  _int dprintf( int fd, const char *fmt, ... )_ + 
 *Defines:* strlen kill write getpid + 
 *print formatted output*
Size: ~818B link:../src/output/dprintf.c[../src/output/dprintf.c] l.5 manpage: link:manpages/stdio/printf.3.rst[dprintf] +


[[dprints]]
dprints::

  _int dprints(int fd, const char *msg,...)_ + 
 *Defines:* write + 
link:../src/output/dprints.c[../src/output/dprints.c] l.14 

[[eprint]]
eprint::

  _#define eprint(str) write(STDERR_FILENO,str,strlen(str))_ + 
 *Defines:* strlen write + 
-----
write str to stderr. Needs strlen
-----
link:../include/prints.h[../include/prints.h] l.57 

[[eprintfs]]
eprintfs::

  _#define eprintfs(fmt,...) fprintfs(stderr, fmt, __VA_ARGS__)_ + 
 *Defines:* write fileno strlen + 
-----
write fmt and arguments to stderr. 
 only format %s and %c are recognized
-----
link:../include/prints.h[../include/prints.h] l.128 

[[eprintl]]
eprintl::

  _#define eprintl() write(STDERR_FILENO,"\n",1)_ + 
 *Defines:* write + 
-----
write a newline to stderr
-----
link:../include/prints.h[../include/prints.h] l.66 

[[eprints]]
eprints::

  _#define eprints(...) dprints(STDERR_FILENO,__VA_ARGS__,0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) to stdout
 this macro has an variable argument count.
-----
link:../include/prints.h[../include/prints.h] l.26 

[[eprintsl]]
eprintsl::

  _#define eprintsl(...) dprints(STDERR_FILENO,__VA_ARGS__,"\n",0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) and newline to stderr
-----
link:../include/prints.h[../include/prints.h] l.48 

[[eputs]]
eputs::

  _#define eputs(msg) ( eprint(msg) + eprintl() )_ + 
 *Defines:* write strlen + 
-----
write msg to stderr, append a newline. Needs strlen.
-----
link:../include/prints.h[../include/prints.h] l.76 

[[ewrites]]
ewrites::

  _#define ewrites(str) write(STDERR_FILENO,str,sizeof(str))_ + 
 *Defines:* write + 
-----
write the constant str to stderr. Computes length with sizeof(str) at compile time.
-----
link:../include/prints.h[../include/prints.h] l.87 

[[fprint]]
fprint::

  _#define fprint(...) fprintf(__VA_ARGS__)_ + 
 *Defines:* fileno strlen kill getpid globals write + 
link:../include/mini_fstream.h[../include/mini_fstream.h] l.84 

[[fprintf]]
fprintf::

  _#define fprintf(stream,...)	write(fileno(stream),mlgl->mbuf,snprintf(mlgl->mbuf,mlgl->mbufsize,__VA_ARGS__))_ + 
 *Defines:* globals write getpid strlen kill fileno + 
-----
fprintf, formatted output
 conversions implemented:
 %d: signed int (mini_itodec)
 %u: unsigned int (mini_uitodec)
 %f: double (max precision 8 digits, highest possible number: 2^31 (mini_dtodec)
 %l (modify a following d,u to long) (mini_ltodec,mini_ultodec)
 %s: string
 %c: char
 binary and hex output print the numbers, 
 as they are internally stored(!).
 Negative numbers are represented with the first sign bit set.
 (e.g. -1 = 0xFFFFFFFF at x64)
 %b : binary output  (mini_itobin)
 %o : octal output (mini_itooct)
 %x/X : hex output (small/big capitals) (mini_itohex,mini_itoHEX
 %(: grouping (mini_atoi)

 warning - most possibly you'd like to define besides fprintf, or family,
 mini_itodec (%d conversion) 
 
 For squeezing a few more bytes, and saving some checking;
 writes(constant string) and print (variable string), 
 prints (formatted output of one or several strings) are provided.

 
-----
link:../src/output/fprintf.c[../src/output/fprintf.c] l.32 manpage: link:manpages/stdio/printf.3.rst[fprintf] +


[[fprintfs]]
fprintfs::

  _int fprintfs( FILE* F, char *fmt, ...)_ + 
 *Defines:* fileno strlen write + 
-----
prints formatted and unbuffered output to the stream F.
 only %s and %c are recognized.
 no mini_buf or globals are used, so using fprintfs instead of fprintf can save some sections / bytes.
-----
Size: ~427B link:../src/output/fprintfs.c[../src/output/fprintfs.c] l.8 

[[fprints]]
fprints::

  _#define fprints(F,...) dprints(fileno(F),__VA_ARGS__,0)_ + 
 *Defines:* fileno strlen write + 
-----
print the string(s) supplied as arg(s) to stream
 this macro has an variable argument count.
-----
link:../include/prints.h[../include/prints.h] l.34 

[[fputc]]
fputc::

  _int volatile fputc(int c, FILE* F)_ + 
 *Defines:* write fileno + 
 *put a byte on a stream*
Size: ~64B link:../include/fputc.h[../include/fputc.h] l.9 manpage: link:manpages/stdio/putc.3.rst[fputc] +


[[fwrite]]
fwrite::

  _size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f)_ + 
 *Defines:* write + 
 *binary output*
Size: ~117B link:../include/mini_fstream.h[../include/mini_fstream.h] l.95 manpage: link:manpages/stdio/fread.3.rst[fwrite] +


[[fwrites]]
fwrites::

  _#define fwrites(fd,str) write(fd,str,sizeof(str))_ + 
 *Defines:* write + 
-----
write the constant str to fd. Computes length with sizeof(str) at compile time.
-----
link:../include/prints.h[../include/prints.h] l.107 

[[group_print]]
group_print::

  __ + 
 *Defines:* getpid write globals fileno strlen kill + 
-----
enable print and related functions
 This switch enables strlen;
 but neither globals nor the mini_buf are used.
-----
link:../macros/defgroups.h[../macros/defgroups.h] l.13 

[[group_write]]
group_write::

  __ + 
 *Defines:* write ewrite + 
-----
write, and related functions
 these functions do not depend on strlen, 
 or any globals.
-----
link:../macros/defgroups.h[../macros/defgroups.h] l.23 

[[print]]
print::

  _#define print(str) write(STDOUT_FILENO,str,strlen(str))_ + 
 *Defines:* strlen write + 
-----
write str to stdout. Needs strlen
-----
link:../include/prints.h[../include/prints.h] l.53 

[[printf]]
printf::

  _#define printf(...) fprintf(stdout,__VA_ARGS__)_ + 
 *Defines:* getpid write globals fileno strlen kill + 
 *print formatted output*
link:../include/mini_fstream.h[../include/mini_fstream.h] l.80 manpage: link:manpages/stdio/printf.3.rst[printf] +


[[printfs]]
printfs::

  _#define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)_ + 
 *Defines:* write fileno strlen + 
-----
write fmt and arguments to stdout. 
 only format %s and %c are recognized
-----
link:../include/prints.h[../include/prints.h] l.122 

[[printl]]
printl::

  _#define printl() write(STDOUT_FILENO,"\n",1)_ + 
 *Defines:* write + 
-----
write a newline to stdout
-----
link:../include/prints.h[../include/prints.h] l.62 

[[prints]]
prints::

  _#define prints(...) _mprints(__VA_ARGS__,0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) to stdout,
 this macro has an variable argument count.
-----
link:../include/prints.h[../include/prints.h] l.18 

[[printsl]]
printsl::

  _#define printsl(...) _mprints(__VA_ARGS__,"\n",0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) and newline to stdout
-----
link:../include/prints.h[../include/prints.h] l.42 

[[putc]]
putc::

  _#define putc(c,stream) fputc(c,stream)_ + 
 *Defines:* fileno write + 
 *put a byte on a stream*
link:../include/fputc.h[../include/fputc.h] l.18 manpage: link:manpages/stdio/putc.3.rst[putc] +


[[putchar]]
putchar::

  _#define putchar(c) fputc(c,stdout)_ + 
 *Defines:* fileno write + 
 *put a byte on a stdout stream*
link:../include/fputc.h[../include/fputc.h] l.15 manpage: link:manpages/stdio/putc.3.rst[putchar] +


[[puts]]
puts::

  _#define puts(msg) ( print(msg) + printl() )_ + 
 *Defines:* fileno kill strlen getpid globals write + 
 *put a string on standard output*
-----
write msg to stdout, append a newline. Needs strlen.
-----
link:../include/prints.h[../include/prints.h] l.72 manpage: link:manpages/stdio/fputs.3.rst[puts] +


[[shortcolornames]]
shortcolornames::

  __ + 
-----
short ansi color names
 all colornames, without the praefix "AC_"
-----
link:../include/ansicolors.h[../include/ansicolors.h] l.103 

[[snprintf]]
snprintf::

  _int snprintf( char *buf, size_t size, const char *fmt, ... )_ + 
 *Defines:* strlen kill write getpid + 
 *print formatted output*
Size: ~738B link:../src/output/snprintf.c[../src/output/snprintf.c] l.5 manpage: link:manpages/stdio/printf.3.rst[snprintf] +


[[vfprintf]]
vfprintf::

  _#define vfprintf(...) fprintf(__VA_ARGS__)_ + 
 *Defines:* strlen kill fileno globals write getpid + 
link:../include/mini_fstream.h[../include/mini_fstream.h] l.89 manpage: link:manpages/stdio/printf.3.rst[vfprintf] +


[[vsnprintf]]
vsnprintf::

  _int vsnprintf(char *buf, size_t size, const char* fmt, va_list args )_ + 
 *Defines:* kill strlen getpid write + 
 *format output of a stdarg argument list*
-----
the function, translating the fmt of printf.
 warning - most possibly you'd like to define besides fprintf, or family,
 mini_itodec (%d conversion) 
 mini_atoi is needed for grouping numbers
-----
Size: ~590B link:../src/output/vsnprintf.c[../src/output/vsnprintf.c] l.18 manpage: link:manpages/stdio/printf.3.rst[vsnprintf] +


[[vsprintf]]
vsprintf::

  _int vsprintf( char *buf, const char *fmt, ... )_ + 
-----
write fmt and arguments into buf
 calls vsnprintf, 
 the size is limited to 4096 by default and assumes
 a buf len of 4096.
-----
link:../src/output/vsprintf.c[../src/output/vsprintf.c] l.10 manpage: link:manpages/stdio/printf.3.rst[vsprintf] +


[[write]]
write::

  _int write(int fd,const void *buf, int len )_ + 
 *write on a file*
Size: ~65B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.104 manpage: link:manpages/sys/write.2.rst[write] +


[[writes]]
writes::

  _#define writes(str) write(STDOUT_FILENO,str,sizeof(str))_ + 
 *Defines:* write + 
-----
write the constant str to stdout. Computes length with sizeof(str) at compile time.
-----
link:../include/prints.h[../include/prints.h] l.83 



---

== process



[[abort]]
abort::

  _void abort()_ + 
 *Defines:* write rt_sigaction getpid kill memcpy + 
link:../src/process/abort.c[../src/process/abort.c] l.3 manpage: link:manpages/stdlib/abort.3.rst[abort] +


[[atexit]]
atexit::

  _int atexit( functionp* func )_ + 
 *Defines:* globals + 
-----
register functions, which are callen on exit in reverse order
 the switch mini_atexit takes a optional number,
 which defines the maximum numbers of functions to be registered.
 (defaults to 8)
-----
link:../src/process/atexit.c[../src/process/atexit.c] l.7 manpage: link:manpages/stdlib/atexit.3.rst[atexit] +


[[clone]]
clone::

  _int clone( int clone_flags,  unsigned long stack,  void *parent_tid,  void *child_tid)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.211 

[[clone_t]]
clone_t::

  _int clone_t(int flags)_ + 
link:../src/process/clone.c[../src/process/clone.c] l.7 

[[execl]]
execl::

  _int execl(const char *pathname, const char* arg0,... )_ + 
 *Defines:* environ execve + 
link:../src/exec/execl.c[../src/exec/execl.c] l.6 manpage: link:manpages/gen/exec.3.rst[execl] +


[[execv]]
execv::

  _int execv(const char *pathname, char *const argv[])_ + 
 *Defines:* environ execve + 
 *execute a file*
Size: ~300B link:../src/exec/_execv.c[../src/exec/_execv.c] l.4 manpage: link:manpages/gen/exec.3.rst[execv] +


[[execve]]
execve::

  _int execve( const char *filename,  char* const* argv, char* const* envp)_ + 
 *execute program*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.133 manpage: link:manpages/sys/execve.2.rst[execve] +


[[execveat]]
execveat::

  _int execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)_ + 
 *execute program relative to a directory file descriptor*
Size: ~158B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.164 

[[execvp]]
execvp::

  _int execvp(const char *file, char *const argv[])_ + 
 *Defines:* execve access environ + 
 *execute a file*
Size: ~556B link:../src/exec/_execvp.c[../src/exec/_execvp.c] l.4 manpage: link:manpages/gen/exec.3.rst[execvp] +


[[execvpe]]
execvpe::

  _int execvpe(const char *file, char *const argv[], char *const envp[])_ + 
 *Defines:* environ access execve + 
 *execute a file*
-----
When invoked with a filename, starting with "." or "/",
 interprets this as absolute path. (calls execve with the pathname)
 Looks for file in the PATH environment, othwerise.
-----
Size: ~556B link:../src/exec/execvp.c[../src/exec/execvp.c] l.11 

[[fexecve]]
fexecve::

  _int fexecve(int fd, char *const argv[], char *const envp[])_ + 
 *execute a file*
Size: ~151B link:../include/fexecve.h[../include/fexecve.h] l.3 manpage: link:manpages/sys/execve.2.rst[fexecve] +


[[fexecveat]]
fexecveat::

  _int fexecveat(int fd, char *const argv[], char *const envp[])_ + 
Size: ~151B link:../include/fexecveat.h[../include/fexecveat.h] l.3 

[[fork]]
fork::

  _int DEF_syscall(fork,0)_ + 
 *create a new process*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.137 manpage: link:manpages/sys/fork.2.rst[fork] +


[[getenv]]
getenv::

  _char* getenv(const char* name)_ + 
 *Defines:* environ + 
 *get value of an environment variable*
Size: ~106B link:../src/system/getenv.c[../src/system/getenv.c] l.5 manpage: link:manpages/stdlib/getenv.3.rst[getenv] +


[[getpgrp]]
getpgrp::

  _int DEF_syscall(getpgrp,0)_ + 
 *get the process group ID of the calling process*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.198 manpage: link:manpages/sys/getpgrp.2.rst[getpgrp] +


[[getpid]]
getpid::

  _int DEF_syscall(getpid,0 )_ + 
 *get the process ID*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.151 manpage: link:manpages/sys/getpid.2.rst[getpid] +


[[getppid]]
getppid::

  _int DEF_syscall(getppid,0)_ + 
 *get the parent process ID*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.195 manpage: link:manpages/sys/getpid.2.rst[getppid] +


[[setpgid]]
setpgid::

  _int setpgid( pid_t pid, pid_t pgid)_ + 
 *set process group ID for job control*
Size: ~63B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.196 manpage: link:manpages/sys/setpgid.2.rst[setpgid] +


[[setsid]]
setsid::

  _int DEF_syscall(setsid,0 )_ + 
 *create session and set process group ID*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.152 manpage: link:manpages/sys/setsid.2.rst[setsid] +


[[system]]
system::

  _int system( const char* command )_ + 
 *Defines:* execve vfork environ write wait4 + 
 *issue a command*
Size: ~326B link:../src/exec/system.c[../src/exec/system.c] l.4 manpage: link:manpages/stdlib/system.3.rst[system] +


[[vexec]]
vexec::

  _int vexec( const char* path, char* const* argv, char* const* envp )_ + 
 *Defines:* vfork execve exit seterrno wait4 + 
-----
execute a path, wait until the executed file exits.
 Deviating of system() an absolute pathname is taken.
 sets errno on error.
-----
link:../src/exec/vexec.c[../src/exec/vexec.c] l.6 

[[vexec_q]]
vexec_q::

  _int vexec_q( const char* path, char* const* argv, char* const* envp )_ + 
 *Defines:* exit seterrno execve vfork wait4 + 
-----
execute a path, wait until the executed file exits, 
 do not write any output of the process. (close stdout)
 Deviating of system() an absolute pathname is taken.
-----
link:../src/exec/vexec_q.c[../src/exec/vexec_q.c] l.6 

[[vfork]]
vfork::

  _int DEF_syscall(vfork,0)_ + 
 *create a child process and block parent*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.138 manpage: link:manpages/sys/vfork.2.rst[vfork] +




---

== regex



[[ext_match]]
ext_match::

  _int ext_match(char *text, const char *re, void(*p_match)(int number, char *pos,int len), int(*p_match_char)(int number, char *match_char), regex_match *st_match)_ + 


[[match]]
match::

  _int match(char *text, const char *re, text_match *st_match)_ + 
-----
text matching engine

 little bit simpler version than match_ext.
 Consciusly named 'text matching', since the inherent logic
 is quite different to a regular expression machine.

 The engine matches nongreedy straight from left to right,
 so backtracking is minimized.
 It is a compromise between performance, size
 and capabilities.


 matches: 
 
 * for every count of any char (nongreedy(!))
 + for 1 or more chars
 % for 1 or more chars, and fills in arg 3 (text_match)
 ? for 1 char
 @ matches the beginning of the text or endofline (\n) 
   -> beginning of a line
 # for space, endofline, \t, \n, \f, \r, \v  or end of text (0)
 $ match end of text
 backslash: escape *,?,%,!,+,#,$ and backslash itself.
 ! : invert the matching of the next character or character class
  
 [xyz]: character classes, here x,y or z 
   the characters are matched literally, also \,*,?,+,..
   it is not possible to match the closing bracket (])
   within a character class


 % : matches like a '+', and fills in argument 3,
 the text_match struct, when the pointer is non null.
 The matching is 'nongreedy'.


 returns: 1 on match, 0 on no match
 ( RE_MATCH / RE_NOMATCH )

 if the pointer (argument 3) st_match is nonnull,
 the supplied struct text_match will be set to the first matching '%' location;
 if there is no match, text_match.len will be set to 0.

 The struct is defined as: 
 typedef struct _text_match { char* pos; int len; } text_match;

 examples: 
 "*word*"  matches "words are true" or "true words are rare"
 "word*"   matches "words are true" and not "true words are rare"
 "word"    matches none of the above two texts (!)
 "*words%" extracts with % " are true" and " are rare"
           into text_match
 
 "Some\ntext\nwith\nlinebreaks\n\n"
 "*@%#*" matches with % "Some"
 "*@line%#*" matches % = "breaks"
 "*text\n%"  % = "with linebreaks\n\n"


 (memo) When the regex ist defined within C/cpp source code,
 a backslash has to be defined as double backslash.

 (note) - be careful when negating a following *, or ?.
  somehow - it is logical, but seems to me I overshoot a bit,
  and tapped into a logical paradox.
  Negating EVERYTHING translates to true.
  However, since truth is negated as,... well, there's a problem.

  (I'm not kidding here. Just don't do a regex with !* or !?.,
  or you might experience the meaning of full featured. 
  Maybe I should say, it's not allowed?)

  A "!+" will translate into nongreedy matching of any char, however;
  "%!+" will match with % everything but the last char;
  while "%+" matches with % only the first char.
  !+ basically sets the greedyness of the left * or % higher.
-----
link:../src/match/match.c[../src/match/match.c] l.83 



---

== streams



[[clearerr]]
clearerr::

  _void clearerr(FILE *f)_ + 
 *clear indicators on a stream*
Size: ~36B link:../include/mini_fstream.h[../include/mini_fstream.h] l.189 manpage: link:manpages/stdio/ferror.3.rst[clearerr] +


[[clearerror]]
clearerror::

  _void clearerror(FILE *f)_ + 
Size: ~36B link:../include/mini_fstream.h[../include/mini_fstream.h] l.194 

[[fclose]]
fclose::

  _int  fclose( FILE* f )_ + 
 *Defines:* close + 
 *close a stream*
Size: ~40B link:../include/mini_fstream.h[../include/mini_fstream.h] l.66 manpage: link:manpages/stdio/fclose.3.rst[fclose] +


[[fdopen]]
fdopen::

  _FILE *fdopen(int fd, const char* mode)_ + 
 *Defines:* close open fileno + 
 *associate a stream with a file descriptor*
-----
modes implemented: r, r+, w, w+, a, a+
-----
Size: ~323B link:../src/streams/fopen.c[../src/streams/fopen.c] l.21 manpage: link:manpages/stdio/fopen.3.rst[fdopen] +


[[feof]]
feof::

  _int feof(FILE *f)_ + 
 *test end-of-file indicator on a stream*
link:../include/mini_fstream.h[../include/mini_fstream.h] l.175 manpage: link:manpages/stdio/ferror.3.rst[feof] +


[[ferror]]
ferror::

  _int ferror(FILE *f)_ + 
 *test error indicator on a stream*
Size: ~32B link:../include/mini_fstream.h[../include/mini_fstream.h] l.182 manpage: link:manpages/stdio/ferror.3.rst[ferror] +


[[fflush]]
fflush::

  _int  fflush( FILE *F )_ + 
 *flush a stream*
-----
This does nothing, since minilib doesn't provide buffered streams yet.In order to sync data to disc, please use fsync
-----
Size: ~32B link:../include/mini_fstream.h[../include/mini_fstream.h] l.28 manpage: link:manpages/stdio/fflush.3.rst[fflush] +


[[fgetpos]]
fgetpos::

  _void fgetpos(FILE *f, long *pos )_ + 
 *Defines:* lseek + 
 *get current file position information*
Size: ~62B link:../include/mini_fstream.h[../include/mini_fstream.h] l.117 manpage: link:manpages/stdio/fseek.3.rst[fgetpos] +


[[fileno]]
fileno::

  _int fileno( FILE *f )_ + 
 *map a stream pointer to a file descriptor*
-----
Return the fd nummber of stdin,-out,-err. 
-----
Size: ~32B link:../include/mini_fstream.h[../include/mini_fstream.h] l.56 manpage: link:manpages/stdio/ferror.3.rst[fileno] +


[[fopen]]
fopen::

  _FILE *fopen(const char* filename, const char* mode)_ + 
 *Defines:* close fileno open + 
 *open a stream*
-----
modes implemented: r, r+, w, w+, a, a+
-----
Size: ~324B link:../src/streams/fopen.c[../src/streams/fopen.c] l.11 manpage: link:manpages/stdio/fopen.3.rst[fopen] +


[[fputs]]
fputs::

  _int volatile fputs(const char *c, FILE *F)_ + 
 *Defines:* strlen fileno write + 
 *put a string on a stream*
Size: ~90B link:../include/fputs.h[../include/fputs.h] l.18 manpage: link:manpages/stdio/fputs.3.rst[fputs] +


[[fread]]
fread::

  _size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f)_ + 
 *Defines:* read + 
 *binary input*
Size: ~110B link:../include/mini_fstream.h[../include/mini_fstream.h] l.152 manpage: link:manpages/stdio/fread.3.rst[fread] +


[[freopen]]
freopen::

  _FILE *freopen(const char* filename, const char* mode, FILE *F)_ + 
 *Defines:* fileno open close + 
 *open a stream*
-----
modes implemented: r, r+, w, w+, a, a+
-----
Size: ~320B link:../src/streams/fopen.c[../src/streams/fopen.c] l.31 manpage: link:manpages/stdio/fopen.3.rst[freopen] +


[[fseek]]
fseek::

  _int fseek(FILE *f, long offset, int whence )_ + 
 *Defines:* lseek + 
 *reposition a file-position indicator in a stream*
Size: ~80B link:../include/mini_fstream.h[../include/mini_fstream.h] l.134 manpage: link:manpages/stdio/fseek.3.rst[fseek] +


[[fsetpos]]
fsetpos::

  _int fsetpos(FILE *f, int pos )_ + 
 *Defines:* lseek + 
 *set current file position*
Size: ~78B link:../include/mini_fstream.h[../include/mini_fstream.h] l.123 manpage: link:manpages/stdio/fseek.3.rst[fsetpos] +


[[ftell]]
ftell::

  _long ftell(FILE *f)_ + 
 *Defines:* lseek + 
 *return a file offset in a stream*
Size: ~53B link:../include/mini_fstream.h[../include/mini_fstream.h] l.111 manpage: link:manpages/stdio/fseek.3.rst[ftell] +


[[rewind]]
rewind::

  _void rewind( FILE *f )_ + 
 *Defines:* lseek + 
 *reset the file position indicator in a stream*
Size: ~58B link:../include/mini_fstream.h[../include/mini_fstream.h] l.143 manpage: link:manpages/stdio/fseek.3.rst[rewind] +


[[setbuf]]
setbuf::

  _void setbuf(FILE *stream, char *buf)_ + 
 *assign buffering to a stream*
-----
dummy function.
 There is no buffering implemented for the streams yet.
-----
Size: ~32B link:../include/mini_fstream.h[../include/mini_fstream.h] l.202 manpage: link:manpages/stdio/setbuf.3.rst[setbuf] +


[[setvbuf]]
setvbuf::

  _int setvbuf(FILE *stream, char *buf, int mode, size_t size)_ + 
 *assign buffering to a stream*
-----
dummy function
-----
Size: ~58B link:../include/mini_fstream.h[../include/mini_fstream.h] l.207 manpage: link:manpages/stdio/setbuf.3.rst[setvbuf] +




---

== strings



[[_strcasecmp]]
_strcasecmp::

  _int _strcasecmp(const char*c1,const char*c2,int len)_ + 
 *Defines:* tolower + 
Size: ~44B link:../src/string/strcmp.c[../src/string/strcmp.c] l.27 

[[_strcmp]]
_strcmp::

  _int _strcmp(const char*c1,const char*c2,int len)_ + 
Size: ~44B link:../src/string/strcmp.c[../src/string/strcmp.c] l.10 

[[sprintf]]
sprintf::

  _#define sprintf(str,...) snprintf( str, mini_buf,  __VA_ARGS__)_ + 
 *Defines:* write getpid strlen kill + 
 *print formatted output*
-----
I'm really uncertain about the size arg here, amongst others
 these are just misdefined functions, inhaerent insecure. :/
 If possible, do not use sprintf. Use snprintf instead. 
-----
link:../src/output/sprintf.c[../src/output/sprintf.c] l.9 manpage: link:manpages/stdio/printf.3.rst[sprintf] +


[[strcasecmp]]
strcasecmp::

  _int strcasecmp(const char*c1,const char*c2)_ + 
link:../src/string/strcmp.c[../src/string/strcmp.c] l.48 manpage: link:manpages/string/string.3.rst[strcasecmp] +


[[strcat]]
strcat::

  _char *strcat(char *dest, const char *src )_ + 
 *Defines:* strlen + 
 *concatenate two strings*
Size: ~126B link:../src/string/strcat.c[../src/string/strcat.c] l.5 manpage: link:manpages/string/string.3.rst[strcat] +


[[strchr]]
strchr::

  _char *strchr(const char *s, int c)_ + 
 *Defines:* strchrnul + 
 *string scanning operation*
Size: ~104B link:../src/string/strchr.c[../src/string/strchr.c] l.6 manpage: link:manpages/string/string.3.rst[strchr] +


[[strchrnul]]
strchrnul::

  _char *strchrnul(const char *s, int c)_ + 
 *locate character in string*
Size: ~87B link:../src/string/strchrnul.c[../src/string/strchrnul.c] l.3 manpage: link:manpages/string/strchr.3.rst[strchrnul] +


[[strcmp]]
strcmp::

  _int strcmp(const char*c1,const char*c2)_ + 
 *compare two strings*
Size: ~32B link:../src/string/strcmp.c[../src/string/strcmp.c] l.67 manpage: link:manpages/string/string.3.rst[strcmp] +


[[strcpy]]
strcpy::

  _char *strcpy(char *dest, const char *src)_ + 
 *copy a string and return a pointer to the end of the result*
Size: ~84B link:../src/string/strcpy.c[../src/string/strcpy.c] l.3 manpage: link:manpages/string/string.3.rst[strcpy] +


[[strdup]]
strdup::

  _char *strdup(const char *source)_ + 
 *Defines:* strlen strcpy 0 + 
 *duplicate a specific number of bytes from a string*
Size: ~258B link:../src/string/strdup.c[../src/string/strdup.c] l.7 manpage: link:manpages/string/strdup.3.rst[strdup] +


[[strlen]]
strlen::

  _int strlen(const char*str)_ + 
 *get length of fixed size string*
Size: ~32B link:../src/string/strlen.c[../src/string/strlen.c] l.4 manpage: link:manpages/string/strlen.3.rst[strlen] +


[[strncasecmp]]
strncasecmp::

  _int strncasecmp(const char*c1,const char*c2,int len)_ + 
 *case-insensitive string comparisons*
link:../src/string/strcmp.c[../src/string/strcmp.c] l.56 manpage: link:manpages/string/string.3.rst[strncasecmp] +


[[strncmp]]
strncmp::

  _int strncmp(const char*c1,const char*c2,int len)_ + 
 *compare part of two strings*
Size: ~44B link:../src/string/strcmp.c[../src/string/strcmp.c] l.75 manpage: link:manpages/string/string.3.rst[strncmp] +


[[strncpy]]
strncpy::

  _char *strncpy(char *dest, const char *src, int n)_ + 
 *copy fixed length string, returning a pointer to the array end*
-----
copy max n chars from src to dest, 
 write 0's up to src[n] when len of dest < n
 Please note strlcpy (borrowed from freebsd), 
 which does the same,
 but doesn't pad dest with 0's.
-----
Size: ~96B link:../src/string/strncpy.c[../src/string/strncpy.c] l.7 manpage: link:manpages/string/string.3.rst[strncpy] +


[[strrchr]]
strrchr::

  _char *strrchr(const char *s, int c)_ + 
 *Defines:* strchrnul + 
 *string scanning operation*
Size: ~122B link:../src/string/strrchr.c[../src/string/strrchr.c] l.4 manpage: link:manpages/string/string.3.rst[strrchr] +


[[strstr]]
strstr::

  _char* strstr(const char *big, const char *little)_ + 
 *find a substring*
Size: ~104B link:../src/string/strstr.c[../src/string/strstr.c] l.3 manpage: link:manpages/string/strstr.3.rst[strstr] +




---

== system



[[chroot]]
chroot::

  _int chroot( const char *filename)_ + 
 *change root directory*
Size: ~47B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.147 manpage: link:manpages/sys/chroot.2.rst[chroot] +


[[getgid]]
getgid::

  _int DEF_syscall(getgid,0)_ + 
 *get the real group ID*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.197 manpage: link:manpages/sys/getgid.2.rst[getgid] +


[[getuid]]
getuid::

  _int DEF_syscall(getuid,0)_ + 
 *get a real user ID*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.199 manpage: link:manpages/sys/getuid.2.rst[getuid] +


[[ioctl]]
ioctl::

  _int volatile  ATTR_OPT("O0") ioctl( int fd, unsigned long int request, ... )_ + 
 *control a STREAMS device (\fBSTREAMS\fP)*
Size: ~319B link:../src/system/ioctl.c[../src/system/ioctl.c] l.9 manpage: link:manpages/sys/ioctl.2.rst[ioctl] +


[[macro]]
macro::

  _void  optimization_fence(void*p){}_ + 
Size: ~32B 

[[mknod]]
mknod::

  _int mknod( const char *filename,  umode_t mode,  unsigned dev)_ + 
 *make directory, special file, or regular file*
Size: ~73B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.242 manpage: link:manpages/sys/mknod.2.rst[mknod] +


[[mount]]
mount::

  _int mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_ + 
 *mount filesystem*
Size: ~151B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.175 manpage: link:manpages/sys/mount.2.rst[mount] +


[[pivot_root]]
pivot_root::

  _int pivot_root( const char *new_root,  const char *put_old)_ + 
 *change the root mount*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.148 

[[putenv]]
putenv::

  _int putenv( char *string )_ + 
 *Defines:* environ ret_errno + 
-----
put a string into the environmental vars
 the supplied string's pointer is put into the environmental array of pointers.
 Subsequent changes of the string therefore will change the environment,
 and the supplied string may not be deallocated.
 Returns: 
 - 0 on success, 
 - EINVAL: string was 0, didn't contain a '=', some other error
-----
link:../src/system/putenv.c[../src/system/putenv.c] l.10 manpage: link:manpages/stdlib/getenv.3.rst[putenv] +


[[reboot]]
reboot::

  _int reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_ + 
 *reboot or enable/disable Ctrl-Alt-Del*
Size: ~139B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.173 manpage: link:manpages/sys/reboot.2.rst[reboot] +


[[setgid]]
setgid::

  _int setgid( gid_t gid)_ + 
 *set-group-ID*
Size: ~51B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.153 manpage: link:manpages/sys/setuid.2.rst[setgid] +


[[setgroups]]
setgroups::

  _int setgroups( int gidsetsize,  gid_t *grouplist)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.190 manpage: link:manpages/sys/setgroups.2.rst[setgroups] +


[[setuid]]
setuid::

  _int setuid( uid_t uid)_ + 
 *set user ID*
Size: ~51B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.154 manpage: link:manpages/sys/setuid.2.rst[setuid] +


[[sync]]
sync::

  _int DEF_syscall(sync,0)_ + 
 *schedule file system updates*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.127 manpage: link:manpages/sys/sync.2.rst[sync] +


[[umount2]]
umount2::

  _int umount2( const char *mountpoint, int flags)_ + 
 *unmount filesystem*
Size: ~59B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.171 

[[uname]]
uname::

  _int uname(struct new_utsname *name )_ + 
 *get the name of the current system*
Size: ~41B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.159 manpage: link:manpages/gen/uname.3.rst[uname] +




---

== terminal



[[grantpt]]
grantpt::

  _int grantpt(int fd)_ + 
 *Defines:* write fstat uitodec ioctl strlen open termio getpid kill + 
 *grant access to the slave pseudo-terminal device*
Size: ~44B link:../src/termios/pty.c[../src/termios/pty.c] l.49 manpage: link:manpages/stdlib/ptsname.3.rst[grantpt] +


[[isatty]]
isatty::

  _int isatty(int fd)_ + 
 *Defines:* termio ioctl + 
 *test for a terminal device*
Size: ~325B link:../src/termios/isatty.c[../src/termios/isatty.c] l.5 manpage: link:manpages/gen/ttyname.3.rst[isatty] +


[[nanosleep]]
nanosleep::

  _int nanosleep( struct timespec *rqtp, struct timespec *rmtp)_ + 
 *high resolution sleep*
Size: ~47B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.141 manpage: link:manpages/sys/nanosleep.2.rst[nanosleep] +


[[posix_openpt]]
posix_openpt::

  _int posix_openpt(int flags)_ + 
 *Defines:* termio open + 
 *open a pseudo-terminal device*
Size: ~140B link:../src/termios/pty.c[../src/termios/pty.c] l.8 manpage: link:manpages/sys/posix_openpt.2.rst[posix_openpt] +


[[ptsname]]
ptsname::

  _char *ptsname(int fd)_ + 
 *Defines:* write open uitodec ioctl strlen getpid termio kill + 
 *get name of the slave pseudo-terminal device*
Size: ~1767B link:../src/termios/pty.c[../src/termios/pty.c] l.34 manpage: link:manpages/stdlib/ptsname.3.rst[ptsname] +


[[ptsname_r]]
ptsname_r::

  _int ptsname_r(int fd, char *buf, size_t len)_ + 
 *Defines:* kill termio getpid strlen uitodec ioctl open write + 
 *get the name of the slave pseudoterminal*
Size: ~1748B link:../src/termios/pty.c[../src/termios/pty.c] l.21 

[[tcgetattr]]
tcgetattr::

  _int tcgetattr(int fd, struct termios *io)_ + 
 *Defines:* termio ioctl + 
 *get the parameters associated with the terminal*
Size: ~300B link:../src/termios/tcgetattr.c[../src/termios/tcgetattr.c] l.12 manpage: link:manpages/gen/tcsetattr.3.rst[tcgetattr] +


[[tcsetattr]]
tcsetattr::

  _int tcsetattr(int fd, int opt, const struct termios *io)_ + 
 *Defines:* ioctl termio + 
 *set the parameters associated with the terminal*
Size: ~316B link:../src/termios/tcsetattr.c[../src/termios/tcsetattr.c] l.12 manpage: link:manpages/gen/tcsetattr.3.rst[tcsetattr] +


[[unlockpt]]
unlockpt::

  _int unlockpt(int fd)_ + 
 *Defines:* termio ioctl + 
 *unlock a pseudo-terminal master/slave pair*
Size: ~325B link:../src/termios/pty.c[../src/termios/pty.c] l.14 manpage: link:manpages/stdlib/ptsname.3.rst[unlockpt] +


[[vhangup]]
vhangup::

  _int DEF_syscall(vhangup,0 )_ + 
 *virtually hangup the current terminal*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.157 



---

== time



[[getitimer]]
getitimer::

  _int getitimer( int which,  struct itimerval *value)_ + 
 *get and set value of interval timer*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.248 manpage: link:manpages/sys/getitimer.2.rst[getitimer] +


[[gettimeofday]]
gettimeofday::

  _int gettimeofday( struct timeval *a1, struct timezone *a2)_ + 
 *get the date and time*
Size: ~47B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.142 manpage: link:manpages/sys/gettimeofday.2.rst[gettimeofday] +


[[setitimer]]
setitimer::

  _int setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_ + 
 *set the value of an interval timer*
Size: ~56B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.247 manpage: link:manpages/sys/getitimer.2.rst[setitimer] +


[[sleep]]
sleep::

  _unsigned int volatile sleep(unsigned int seconds)_ + 
 *Defines:* nanosleep + 
 *suspend execution for an interval of time*
-----
nonconformant sleep
 TODO: ignore blocked signals, sigchld
-----
Size: ~123B link:../src/process/sleep.c[../src/process/sleep.c] l.10 manpage: link:manpages/gen/sleep.3.rst[sleep] +


[[time]]
time::

  _int time(unsigned int *a1 )_ + 
 *get time*
Size: ~41B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.260 manpage: link:manpages/gen/time.3.rst[time] +


[[usleep]]
usleep::

  _unsigned int volatile usleep(unsigned int useconds)_ + 
 *Defines:* nanosleep + 
 *suspend execution for microsecond intervals*
-----
nonconformant usleep. 
 Sleep useconds.
 I just hope, noone relies on an exact sleep time.
 which isn't possible without a real time os, anyways.
 When for whatever reason you'd need nanoseconds exact times,
 best shot might be a spinloop, and looking for cpu ticks.

 TODO: ignore blocked signals, sigchld
-----
Size: ~147B link:../src/process/sleep.c[../src/process/sleep.c] l.31 manpage: link:manpages/gen/usleep.3.rst[usleep] +


[[utime]]
utime::

  _int utime( const char *filename, struct utimbuf *times)_ + 
 *set file access and modification times*
Size: ~49B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.194 manpage: link:manpages/gen/utime.3.rst[utime] +




---

== unsorted



[[ALIGN]]
ALIGN::

  __ + 
-----
macros for alignment.
 They take a number or pointer, and align upwards to 2,4,8,..256
 There are the macros ALIGN_2 ALIGN_4 ALIGN_8 ...,
 and ALIGN_P, which aligns to the size of a pointer. (8 for amd64)
-----
link:../macros/alignment.h[../macros/alignment.h] l.9 

[[OPTFENCE]]
OPTFENCE::

  _#ifndef __clang___ + 
-----
prevent gcc to optimize away registers and variables
 the macro OPTFENCE(...) can be invoked with any parameter.
 The parameters will get calculated, even if gcc doesn't recognize
 the use of the parameters, e.g. cause they are needed for an inlined asm syscall.

 The macro translates to an asm jmp and a function call to the function 
 opt_fence, which is defined with the attribute "noipa" -
 (the compiler "forgets" the function body, so gcc is forced
 to generate all arguments for the function)
 The generated asm jump hops over the call to the function,
 but this gcc doesn't recognize.

 This generates some overhead, 
 (a few (never reached) bytes for setting up the function call, and the jmp)
 but I didn't find any other solution,
 which gcc wouldn't cut for optimizations from time to time.
 (volatile, volatile asm, optimize attributes, 
 andsoon have all shown up to be unreliable - sometimes(!)).

 Had some fun debugging these bugs, which naturally showed up only sometimes.
 (Many syscalls also work with scrambled arguments..)
 And, I believe it IS a compiler bug. 
 Volatile should be volatile for sure, not only sometimes.
 I mean, why the heck do I write volatile?? 
-----
link:../include/syscall.h[../include/syscall.h] l.65 

[[OPTIMIZATIONS]]
OPTIMIZATIONS::

  __ + 
-----
enable some optimizations,
 with a slitghtly bigger memory footprint.
 defaults to off
 (yet only calloc is optimized. todo)
-----
link:../include/config.h[../include/config.h] l.33 

[[_die]]
_die::

  _void _die()_ + 
-----
internal implementation of die
-----
link:../src/process/die.c[../src/process/die.c] l.36 

[[_match]]
_match::

  _int _match(char *text, const char *re, text_match *st_match)_ + 
link:../src/match/match.c[../src/match/match.c] l.96 

[[_match_ext2]]
_match_ext2::

  _char* _match_ext2(char *text, char *re, void(*p_matched_cb)(int number, char *pos,int len), int(*p_wildcard_cb)(int number, char *match_char), text_match *st_match)_ + 
-----
internal implementation of match_ext
-----
link:../src/match/match_ext2.c[../src/match/match_ext2.c] l.326 

[[accept]]
accept::

  _int accept( int fd,  struct sockaddr *upeersockaddr,  int *upeeraddrlen)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.230 manpage: link:manpages/sys/accept.2.rst[accept] +


[[bind]]
bind::

  _int bind( int fd,  struct sockaddr *umyaddr,  int addrlen)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.224 manpage: link:manpages/sys/bind.2.rst[bind] +


[[bsd_cksum]]
bsd_cksum::

  _unsigned int bsd_cksum( const char* p, unsigned int len )_ + 
-----
bsd checksum
-----
link:../src/file/cksum.c[../src/file/cksum.c] l.31 

[[bsd_cksumblock]]
bsd_cksumblock::

  _unsigned int bsd_cksumblock( unsigned int hash, const char* p, unsigned int len )_ + 
-----
bsd checksum, called by bsd_cksum,
 with initial hash value
-----
link:../src/file/cksum.c[../src/file/cksum.c] l.20 

[[calloc]]
calloc::

  _void* calloc(int nmemb, int size)_ + 
link:../src/memory/calloc.c[../src/memory/calloc.c] l.2 manpage: link:manpages/stdlib/memory.3.rst[calloc] +


[[cfmakeraw]]
cfmakeraw::

  _void cfmakeraw(struct termios *tp)_ + 
 *Defines:* termio + 
link:../src/termios/cfmakeraw.c[../src/termios/cfmakeraw.c] l.3 manpage: link:manpages/gen/tcsetattr.3.rst[cfmakeraw] +


[[config]]
config::

  __ + 
-----
configuration settings, to be compiled statically.
 System specific paths, maximums, etc go here.
 Other values are within globaldefs.h;
 architecture specific values are within the folder headers.
-----
link:../include/config.h[../include/config.h] l.6 

[[def]]
def::

  _#define SETOPT_short( opts, option ) (_ + 
-----
Set a option flag(s) (bit(s))  manually.
		param options: e.g. just a, or ( a+h+l) to check for several flags at once
-----
link:../macros/getoptm.h[../macros/getoptm.h] l.52 

[[die]]
die::

  _#define die(errnum,msg) {ewritesl(msg);exit_errno(errnum);}_ + 
 *Defines:* write errno_str exit execve + 
-----
write msg to stderr and exit with failure
 if errno is defined and set, /bin/errno is executed to give a verbose error 
 message
 if errno is either not defined or not set,
 exit with -1
 
-----
link:../src/process/die.c[../src/process/die.c] l.11 

[[die_if]]
die_if::

  _#define die_if( when, errnum, msg ) if( when ) die( errnum, msg )_ + 
 *Defines:* errno_str write exit execve + 
-----
when arg1 is true, write msg to stderr and exit with failure
 if errno is defined and set, /bin/errno is executed to give a verbose error 
 message
 if errno is either not defined or not set,
 exit with -1
 
-----
link:../src/process/die.c[../src/process/die.c] l.59 

[[dief]]
dief::

  _#define dief(errnum,fmt,...) {fprintf(stderr,fmt,__VA_ARGS__);exit_errno(errnum);}_ + 
 *Defines:* strlen exit write globals fileno execve kill getpid errno_str + 
-----
write fmt andargs via fprintf to stderr and exit with failure
 if errno is defined and set, /bin/errno is executed to give a verbose error 
 message
 if errno is either not defined or not set,
 exit with -1
 
-----
link:../src/process/die.c[../src/process/die.c] l.20 

[[dief_if]]
dief_if::

  _#define dief_if( when, errnum, fmt,... ) if( when ) dief( errnum, fmt, __VA_ARGS__ )_ + 
 *Defines:* exit execve errno_str write + 
-----
when arg1 is true, vall dief(errnum,fmt)
 if errno is defined and set, /bin/errno is executed to give a verbose error 
 message
 if errno is either not defined or not set,
 exit with -1
 
-----
link:../src/process/die.c[../src/process/die.c] l.69 

[[dies]]
dies::

  _#define dies(errnum,...) {eprintsl(__VA_ARGS__);exit_errno(errnum);}_ + 
 *Defines:* errno_str write exit execve + 
-----
write variable string list to stderr and exit with failure
 if errno is defined and set, /bin/errno is executed to give a verbose error 
 message
 if errno is either not defined or not set,
 exit with -1
 
-----
link:../src/process/die.c[../src/process/die.c] l.30 

[[dies_if]]
dies_if::

  _#define dies_if( when, errnum, ... ) if( when ) dies( errnum, __VA_ARGS__ )_ + 
 *Defines:* exit execve errno_str write + 
-----
when arg1 is true, vall dies(errnum, ... )
 if errno is defined and set, /bin/errno is executed to give a verbose error 
 message
 if errno is either not defined or not set,
 exit with -1
 
-----
link:../src/process/die.c[../src/process/die.c] l.80 

[[dirbuf_malloc]]
dirbuf_malloc::

  _#ifndef mini_dirbuf_malloc_ + 
-----
which malloc to use for allocating the dir handles
 malloc : use malloc, therefore the minibuf
 malloc_brk : use malloc_brk 
 defaults to malloc
-----
link:../include/dirent.h[../include/dirent.h] l.31 

[[eprintf]]
eprintf::

  _#define eprintf(fmt,...) fprintf(stderr, fmt, __VA_ARGS__)_ + 
 *Defines:* strlen fileno write + 
-----
write fmt and arguments to stderr. 
-----
link:../include/prints.h[../include/prints.h] l.133 

[[err]]
err::

  _#define err( status, fmt ... ) { fprintf(stderr,fmt ); fprints(stderr,":",strerror(errno)); exit(status); }_ + 
 *Defines:* kill fileno strerror getpid strlen exit errno globals write + 
-----
print an error message to stderr,
 print an error message dependend on errno ( strerror(errno) ),
 exit with status
-----
link:../src/process/error.c[../src/process/error.c] l.20 manpage: link:manpages/gen/err.3.rst[err] +


[[error]]
error::

  _#define error( status, errnum, fmt ... ) { fprintf(stderr,fmt ); if (errnum) fprints(stderr,":",strerror(errnum)); if ( status ) exit(status); }_ + 
 *Defines:* globals write strlen exit getpid strerror fileno kill + 
-----
print an error message to stderr
 when errnum is not 0, print either the number,
  or a verbose error message (with strerror), 
  when mini_verbose_errstr is defined.
  (verbose error messages add aboyut 4kB)

 when status is non null, terminate with status
-----
link:../src/process/error.c[../src/process/error.c] l.13 

[[errx]]
errx::

  _#define errx( status, fmt ... ) { fprintf(stderr,fmt); exit(status); }_ + 
 *Defines:* fileno exit kill strlen getpid globals write + 
-----
print an error message to stderr,
 exit with status
-----
link:../src/process/error.c[../src/process/error.c] l.27 manpage: link:manpages/gen/err.3.rst[errx] +


[[ewritesl]]
ewritesl::

  _#define ewritesl(str) write(STDERR_FILENO,str"\n",sizeof(str)+1)_ + 
 *Defines:* write + 
-----
write the constant str to stderr, followed by a newline. 
 Computes length with sizeof(str) at compile time.
-----
link:../include/prints.h[../include/prints.h] l.100 

[[fgetsn]]
fgetsn::

  _int fgetsn(char *buf, int size, FILE* F)_ + 
 *Defines:* read fileno + 
-----
get a line like fgets, but return the len of the read string.
-----
link:../src/streams/fgetsn.c[../src/streams/fgetsn.c] l.4 

[[fgetsp]]
fgetsp::

  _char* fgetsp(char *buf, int size, FILE* F)_ + 
 *Defines:* fileno read + 
-----
read a line from F into buf with max chars size.
 Return a pointer to the terminating '0' byte.
 A terminating linebreak is not written to buf.
-----
link:../src/streams/fgetsp.c[../src/streams/fgetsp.c] l.7 

[[fgetud]]
fgetud::

  _unsigned int fgetud(FILE* F)_ + 
 *Defines:* read fileno + 
-----
read an unsigned integer from the stream F
 reads all digits until a nondigit is read.
-----
link:../src/streams/fgetud.c[../src/streams/fgetud.c] l.5 

[[fgetul]]
fgetul::

  _unsigned long int fgetul(FILE* F)_ + 
 *Defines:* fileno read + 
-----
read an unsigned long integer from the stream F
 reads all digits until a nondigit is read.
-----
link:../src/streams/fgetul.c[../src/streams/fgetul.c] l.5 

[[flock]]
flock::

  _int flock( unsigned int fd,  unsigned int cmd)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.129 manpage: link:manpages/sys/flock.2.rst[flock] +


[[fwritesl]]
fwritesl::

  _#define fwritesl(fd,str) write(fd,str"\n",sizeof(str)+1)_ + 
 *Defines:* write + 
-----
write the constant str to fd,followed by a newline. 
 Computes length with sizeof(str) at compile time.
-----
link:../include/prints.h[../include/prints.h] l.114 

[[getgrouplist]]
getgrouplist::

  _int getgrouplist(const char* user, gid_t group, gid_t *groups, int *ngroups)_ + 
 *Defines:* grent mmap setpwent setgrent passwdfile_open token_s open token_i write pwent + 
-----
needs rewrite.
 now nonstandard.
-----
link:../src/userdb/getgrouplist.c[../src/userdb/getgrouplist.c] l.5 manpage: link:manpages/gen/getgrouplist.3.rst[getgrouplist] +


[[getgroups]]
getgroups::

  _int getgroups(int maxgroups, int *list)_ + 
 *Defines:* write open token_s passwdfile_open mmap grent pwent token_i getuid setgrent setpwent + 
-----
get the groups of the calling process
 does not necessarily contain the primary group,
 which is given in the passwd entry.
 This function calls internally setgrent() and getgrent();
 therefore any iteration with getgrent will be resetted.
-----
link:../src/userdb/getgroups.c[../src/userdb/getgroups.c] l.8 manpage: link:manpages/sys/getgroups.2.rst[getgroups] +


[[gethostname]]
gethostname::

  _int gethostname(char *name,int len)_ + 
 *Defines:* network + 
-----
gethostname
-----
link:../src/network/gethostname.c[../src/network/gethostname.c] l.4 manpage: link:manpages/gen/gethostname.3.rst[gethostname] +


[[getresuid]]
getresuid::

  _int getresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.201 manpage: link:manpages/sys/setresuid.2.rst[getresuid] +


[[getsockopt]]
getsockopt::

  _int getsockopt( int fd,  int level,  int optname,  char *optval,  int *optlen)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.228 manpage: link:manpages/sys/getsockopt.2.rst[getsockopt] +


[[getusergroups]]
getusergroups::

  _int getusergroups(const char* user, int maxgroups, int *list)_ + 
 *Defines:* open token_i write pwent grent mmap setpwent passwdfile_open setgrent token_s + 
-----
get the supplementary groups for the user uid.
 does not necessarily contain the primary group,
 which is given in the passwd entry.
 This function calls internally setgrent() and getgrent();
 therefore any iteration with getgrent will be resetted.
-----
link:../src/userdb/getusergroups.c[../src/userdb/getusergroups.c] l.8 

[[group_printf]]
group_printf::

  _//_ + 
 *Defines:* uitoHEX uitohex write globals itooct kill ltodec uitodec strlen atoi fileno getpid + 
-----
printf, eprintf, fprintf, itodec, ltodec, itohex, anprintf, sprintf (conversions %d %l %x %ud %ul %ux ), 
-----
link:../macros/defgroups.h[../macros/defgroups.h] l.29 

[[htonl]]
htonl::

  _uint32_t htonl(uint32_t i)_ + 
 *Defines:* network + 
link:../src/network/htonl.c[../src/network/htonl.c] l.8 manpage: link:manpages/net/byteorder.3.rst[htonl] +


[[htons]]
htons::

  _uint16_t htons(uint16_t i)_ + 
 *Defines:* network + 
link:../src/network/htons.c[../src/network/htons.c] l.3 manpage: link:manpages/net/byteorder.3.rst[htons] +


[[inet_aton]]
inet_aton::

  _int inet_aton(const char* s, struct in_addr *addr)_ + 
 *Defines:* network + 
link:../src/network/inet_aton.c[../src/network/inet_aton.c] l.3 manpage: link:manpages/net/inet.3.rst[inet_aton] +


[[inet_ntoa]]
inet_ntoa::

  _char* inet_ntoa( struct in_addr in)_ + 
 *Defines:* network + 
-----
convert a address
 This returns a pointer to a string in the globals,
 therefore the routine isn't reentrant.
 (whoever thought this might be a good idea..)
-----
link:../src/network/inet_ntoa.c[../src/network/inet_ntoa.c] l.7 manpage: link:manpages/net/inet.3.rst[inet_ntoa] +


[[initgroups]]
initgroups::

  _int initgroups(const char* user, gid_t group)_ + 
link:../src/userdb/initgroups.c[../src/userdb/initgroups.c] l.2 manpage: link:manpages/gen/initgroups.3.rst[initgroups] +


[[listen]]
listen::

  _int listen( int fd,  int backlog)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.231 manpage: link:manpages/sys/listen.2.rst[listen] +


[[lstat]]
lstat::

  _int lstat(const char* filename,struct stat* statbuf)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.113 manpage: link:manpages/sys/stat.2.rst[lstat] +


[[match_ext]]
match_ext::

  _int match_ext(char *text, const char *re, void(*p_match)(int number, char *pos,int len, void *userdata), int(*p_match_char)(int number, char *match_char, void *userdata), tmatch_ext *st_match, void *userdata)_ + 
-----
text matching engine

 This is somewhere between a fully fledged expression machine,
 and a simplicistic solution.
 Consciusly named 'text matching', since the inherent logic
 is quite different to a regular expression machine.

 The engine matches from left to right,
 backtracking is done as less as possible.
 Since the matching is nongreedy in general,
 many tries can be spared. Opposed to another route,
 where most patterns are per default greedy, and therfore
 not the first matching next char is seeked for, but the first
 solution while matching the most chars.
 (I do not want to make this a hard statement, and it 
 depends onto each pattern. But it is the way, the solution
 of the pattern is searched for, in most patterns.)
 This shows up in the logic of the patterns, which is more natural to me.

 It is a compromise between performance, size
 and capabilities.
 The logic is different of a "regular" regular expression
 machine, but has advantages (and disadvantages).
 I'd say, the main advantage is the easiness of adding callbacks,
 and defining your own matching/logic within these. 
 Performance might be better as well overall,
 but this depends also on the expressions.

 A few nonextensive benchmarks show,
 this engine is a bit faster than perl's regular expression machine,
 slower than gnu grep (around factor2), and has the same speed as sed.
 This might however vary with each usecase.
 In favor of codesize I'm not going to optimize match_ext,
 but there would be several possibilities, if you'd need a faster engine.
 (Albite I'd like to emphasise, sed (and match_ext), also perl, are quite fast.
 About 10 times faster than most expression engines.)

 matches: 
 
 * for every count of any char
 + for 1 or more chars
 ? for 1 char
 # for space or end of text (0)
 $ match end of text

 backslash: escape *,?,%,$,!,+,#,& and backslash itself.
 !: invert the matching of the next character or character class
 ,: separator. e.g. %,1 matches like ?*1. 
   ( without the commata, the '1' would be part of the % match)
  

 predefined character classes:
 \d - digit
 \D - nondigit
 \s - space
 \S - nonspace
 \w - word character ( defined as ascii 32-126,160-255 )
 \W - nonword character ( defined as ascii 0-31,127-159 )


 [xyz]: character classes, here x,y or z 
   the characters are matched literally, also \,*,?,+,..
   it is not possible to match the closing bracket (])
   within a character class

 {nX}: counted match
  Match n times X.
  For X, all expressions are allowed.
  If you need to match a number at the first char of 'X',
  separate X by a commata. E.g. {5,0} matches 5 times '0'.

 %[1]..%[9]: matches like a '+',
  and calls the callback supplied as 3rd argument (when not null).
  the number past the %, e.g. %1, is optional,
  p_match will be callen with this number
  as first parameter.
  When not supplied, p_matched will be callen with 
  the parameter 'number' set to 0.

  The matching is 'nongreedy'.
  It is possible to rewrite the string to match
  from within the p_matched callback.
  This will not have an effect onto the current matching,
  even if text is e.g. deleted by writing 0's.
  The matched positions are called in reverse order.
  (The last matched % in the regex calls p_match first, 
  the first % in the regex from the left will be callen last)

 supply 0 for p_matched, when you do not need to extract matches.
 This will treat % in the regex like a *, 
 a following digit (0..9) in the regex is ignored.
 if the 5th argument, a pointer to a tmatch_ext struct, 
 is supplied, it will be filled with the first match.
 (counting from left)


 &[1] .. &[9]
  "match" like a '?' and call p_match_char
  p_match_char has to return either RE_MATCH, RE_NOMATCH, RE_MATCHEND
  or a number of the count of chars, which have been matched.

  Therefore it is possible to e.g. rule your own
  character classes, defined at runtime, 
  or do further tricks like changing the matched chars,
  match several chars, andsoon.
  When returning RE_NOMATCH,
  it is possible, the p_match and p_match_char callbacks are callen several times,
  but with different pos or len parameters.

  The matching works straight from left to right.
  So, a "*&*" will call the callback & for the first char.
  When returning RE_NOMATCH, the second char will be matched.
  Until either RE_MATCH is returned from the callback,
  or the last char has been matched.

  Matching several characters is also posssible from within the callback,
  the position within the text will be incremented by that number,
  you return from the callback.

  When returning RE_MATCHEND from the callback, 
  the whole regular expression is aborted, and returns with matched;
  no matter, if there are chars left in the expression.


  The difference between % and & is the logic.
  % matches nongreedy, and has to check therefore the right side of the star
  for its matching.
  Possibly this has to be repeated, when following chars do not match.

  & is matched straight from left to right.
  Whatever number you return, the textpointer will be incremented by that value.
  However, a & isn't expanded on it's own. ( what a % is ).
  e.g. "x%x" will match 'aa' in xaax, x&x will match the whole expression
  only, when you return '2' from the callback.

  Performancewise, matching with & is faster,
  since the % has on its right side to be matched
  with recursing calls of match_ext.

 When using closures for the callbacks, you will possibly have to
 enable an executable stack for the trampoline code
 of gcc. Here, gcc complains about that. 
 For setting this bit, have a look into the ldscripts in the folder
 with the same name.

 supply 0 for p_match_char, when you don't need it.
 This will treat & in the regex like ?, 
 and match a following digit (0..9) in the text,
 a following digit (0..9) in the regex is ignored.
 
 -----
 In general, you have to somehow invert the logic of regular expressions
 when using match_ext.
 e.g. when matching the parameter 'runlevel=default' at the kernel's
 commandline, a working regular expression would be
 "runlevel=(\S*)". This could be written here as "*runlevel=%#".
 For matching e.g. numbers, you'd most possibly best of
 with writing your own & callback.

 returns: 1 on match, 0 on no match
 ( RE_MATCH / RE_NOMATCH )

 if the pointer (argument 5) st_match is nonnull,
 the supplied struct tmatch_ext will be set to the first matching '%' location;
 if there is no match, tmatch_ext.len will be set to 0.
 The struct is defined as: 
 typedef struct _tmatch_ext { char* pos; int len; } tmatch_ext;


 (memo) When the regex ist defined within C/cpp source code,
 a backslash has to be defined as double backslash.

 (note) - be careful when negating a following *, or ?.
  somehow - it is logical, but seems to me I overshoot a bit,
  tragically hit my own foot, and stumbled into a logical paradox.

  Negating EVERYTHING translates to true.
  However, since truth is negated as well, there's a problem,
  cause it's now 'false', but 'false' is true. This is very close
  to proving 42 is the answer. What is the escape velocity
  in km/s out of the solar system, btw.

  (I'm not kidding here. Just don't do a regex with !* or !?..
  And, please, do not ask me what is going to happen when the impossible
  gets possibilized. I have to point at the according sentences of the BSD license;//  there is NO WARRANTY for CONSEQUENTIAL DAMAGE, LOSS OF PROFIT, etc pp.)

  A "!+" will translate into nongreedy matching of any char, however;
  "%!+" will match with % everything but the last char;
  while "%+" matches with % only the first char.
  !+ basically sets the greedyness of the left * or % higher.
-----
link:../src/match/match_ext.c[../src/match/match_ext.c] l.193 

[[match_ext2]]
match_ext2::

  _int match_ext2(char *text, char *re, void(*p_matched_cb)(int number, char *pos,int len), int(*p_wildcard_cb)(int number, char *match_char),text_match *st_match)_ + 
-----
text matching engine

 WORK IN PROGRESS, please use ext_match
 Atm, please nested brackets are featureful.
 nesting {} within () seems to work.
 Nesting round brackets within {} gives sometimes
 trouble, when wildcards are used within the brackets.
 I'm leaving this at it is for now. 
 Possibly I'm going to hardcode an error message for nested brackets,
 or nested brackets with wildcards.

 This is somewhere between a fully fledged expression machine,
 and a simplicistic solution.
 Consciusly named 'text matching', since the inherent logic
 is quite different to a regular expression machine;
 "natural expressions" might fit better for the name.

 The engine matches from left to right,
 backtracking is done as less as possible.
 Since the matching is nongreedy in general,
 many tries can be spared. Opposed to another route,
 where most patterns are per default greedy, and therfore
 not the first matching next char is seeked for, but the first
 solution while matching the most chars.
 (I do not want to make this a hard statement, and it 
 depends onto each pattern. But it is the way, the solution
 of the pattern is searched for, in most patterns.)
 This shows up in the logic of the patterns, which is more natural to me.
 Your mileage might vary.


 It is a compromise between performance, size
 and capabilities.
 The logic is different of a "regular" regular expression
 machine, but has advantages (and disadvantages).
 I'd say, the main advantage is the easiness of adding callbacks,
 and defining your own matching/logic within these. 
 Performance might be better as well overall,
 but this depends on the expressions and usecases as well.

 Yet I for myself have to get a grip of the possibilities of this engine.
 However, I have the feeling, the logic is much more natural.
 With regular regexes you always have to think kind of 'backwards',
 e.g., match ".*" -> match "." (any char) x times. 
 gets to a simple "*"
 or, to match all group and user id's of /etc/passwd,
 a regular expression would be: "(\d*):(\d*)"
 This is here: "*(\d*):(\d*)*"
 The content in the brackets looks the same,
 but it's matched quite different.
 The regular expression (the first) matches x times \d, for x>=0.
 In the second expressin, the ext_match expression,
 the first digit is matched, and then nongreedy any chars, until
 the first occurence of ':'. 
 It is another logic. Whether it suits you, you have to decide.

 The callbacks have shown up to be a mighty tool, while
 at the same time having a good performance. 
 

 A few nonextensive benchmarks show,
 this engine is a bit faster than perl's regular expression machine,
 slower than gnu grep (around factor2), and has the same speed as sed.
 This might vary with each usecase, but the callbacks for extracting matches
 have some advantage, as well as the strict left to right and nongreedy parsing.

 In favor of codesize I'm not going to optimize ext_match,
 but there would be several possibilities, if you'd need a faster engine.
 (Albite I'd like to emphasise, sed (and ext_match), also perl, are quite fast.
 About 5 to 10 times faster than most expression engines.)

 matches: 
 
 * for every count of any char
 + for 1 or more chars
 ? for 1 char
 # for space, end of text (\0), linebreak, tab ( \t \n \f \r \v )
 @ matches the beginning of the text or endofline (\n) 
 $ match end of text (\0) or linebreak

 backslash: escape *,?,%,@,$,!,+,#,& and backslash itself.
 !: invert the matching of the next character or character class
 ,: separator. e.g. %,1 matches like ?*1. 
   ( without the commata, the '1' would be part of the % match)
  

 predefined character classes:
 \d - digit
 \D - nondigit
 \s - space
 \S - nonspace
 \w - word character ( defined as ascii 32-126,160-255 )
 \W - nonword character ( defined as ascii 0-31,127-159 )
 \x - hexadecimal digit (0-9,a-f,A-F)


 [xyz]: character classes, here x,y or z 
   the characters are matched literally, also \,*,?,+,..
   it is not possible to match the closing bracket (])
   within a character class

 {nX}: counted match
  Match n times X.
  For X, all expressions are allowed.
  If you need to match a number at the first char of 'X',
  separate X by a commata. E.g. {5,0} matches 5 times '0'.
  n can be a number, * or +. 
  ('*' matches 0 or more, '+' 1 or more times)

 (X): match the subexpression X. atm, no nesting of round () and {} brackets allowed

 %[1]..%[9]: matches like a '+',
  and calls the callback supplied as 3rd argument (when not null).
  the number past the %, e.g. %1, is optional,
  p_matched_cb will be callen with this number
  as first parameter.
  When not supplied, p_matched_cb will be callen with 
  the parameter 'number' set to 0.

  The matching is 'nongreedy'.
  It is possible to rewrite the string to match
  from within the p_matched_cb callback.
  This will not have an effect onto the current matching,
  even if text is e.g. deleted by writing 0's.

  The matched positions are called in reverse order.

  (The last matched % in the regex calls p_matched_cb first, 
  the first % in the regex from the left will be callen last)
  / The regex is first matched; when the regex has matched,
  the %'s are filled/ the callbacks executed.
  (x) bracketed patterns are matched the same way.

  (Not like &, which callbacks are invoked, while matching)

 supply 0 for p_matched_cb, when you do not need to extract matches.
 This will treat % in the regex like a *, 
 a following digit (0..9) in the regex is ignored.
 if the 5th argument, a pointer to a text_match struct, 
 is supplied, it will be filled with the first match.
 (counting from left)


 &[1] .. &[9]
  "match" like a '?' and call p_wildcard_cb
  p_wildcard_cb has to return either RE_MATCH, RE_NOMATCH, RE_MATCHEND
  or the number of the count of chars, which have been matched.

  Therefore it is possible to e.g. rule your own
  character classes, defined at runtime, 
  or do further tricks like changing the matched chars,
  match several chars, andsoon.
  When returning RE_NOMATCH,
  it is possible, the p_wildcard_cb callback is callen several times,
  but with different pos or len parameters, since p_wildcard_cb is
  invoked while matching.

  The matching works straight from left to right.
  So, a "*&*" will call the callback & for the first char.
  When returning RE_NOMATCH, the second char will be tried to match.
  Until either RE_MATCH is returned from the callback,
  or the last char of the text has been tried to match.

  Matching several characters is also posssible from within the callback,
  the position within the text will be incremented by that number,
  you return from the callback.

  When returning RE_MATCHEND from the callback, 
  the whole expression is aborted, and returns with matched;
  no matter, if there are chars left in the expression.


  The difference between % and & is the logic.
  % matches nongreedy, and has to check therefore the right side of the star
  for its matching.
  Possibly this has to be repeated, when following chars do not match.

  & is matched straight from left to right.
  Whatever number you return, the textpointer will be incremented by that value.
  However, a & isn't expanded on it's own. ( what a % is ).
  e.g. "x%x" will match 'aa' in xaax, x&x will match the whole expression
  only, when you return '2' from the callback.

  Performancewise, matching with & is faster,
  since the % has on its right side to be matched
  with recursing calls of ext_match.

 When using closures for the callbacks, you will possibly have to
 enable an executable stack for the trampoline code
 of gcc. Here, gcc complains about that. 
 For setting this bit, please have a look into the ldscripts in the folder
 with the same name.

 supply 0 for p_wildcard_cb, when you don't need it.
 This will treat & in the regex like ?, 
 and match a following digit (0..9) in the text,
 a following digit (0..9) in the regex is ignored.
 
 -----
 In general, you have to somehow invert the logic of regular expressions
 when using ext_match.
 Regular expressions could be regarded as "polish rpn notation",
 first the char to be matched, then the count.
 This expression machine could be described as "natural expression" machine.
 First you define the number, then the chars or expression to be matched.
 
 Furthermore, *,% and + match as less as possible.
 You have to think about what needs to follow the wildcards.

 e.g. when matching the parameter 'runlevel=default' at the kernel's
 commandline, a working regular expression would be
 "runlevel=(\S*)". This could be written here as "*runlevel=%#".
 For matching e.g. numbers, you'd most possibly best of
 with writing your own & callback.

 returns: 1 on match, 0 on no match
 ( RE_MATCH / RE_NOMATCH )

 if the pointer (argument 5) st_match is nonnull,
 the supplied struct text_match will be set to the first matching '%' location;
 if there is no match, text_match.len will be set to 0.
 The struct is defined as: 
 typedef struct _text_match { char* pos; int len; } text_match;


 (memo) When the regex ist defined within C/cpp source code,
 a backslash has to be defined as double backslash.

 (note) - be careful when negating a following *, or ?.
  somehow - it is logical, but seems to me I overshoot a bit,
  tragically hit my own foot, and stumbled into a logical paradox.

  Negating EVERYTHING translates to true.
  However, since truth is negated as well, there's a problem,
  cause it's now 'false', but 'false' is true. This is very close
  to proving 42 is the answer. What is the escape velocity
  in km/s out of the solar system, btw.

  (I'm not kidding here. Just don't do a regex with !* or !?..
  And, please, do not ask me what is going to happen when the impossible
  gets possibilized. I have to point at the according sentences of the BSD license;
  there is NO WARRANTY for CONSEQUENTIAL DAMAGE, LOSS OF PROFIT, etc pp.)

  A "!+" will translate into nongreedy matching of any char, however;
  "%!+" will match with % everything but the last char;
  while "%+" matches with % only the first char.
  !+ basically sets the greedyness of the left * or % higher.

 (work in progress here) please use ext_match
 return 0 for nomatch, the current textpos ( >0 ) for a match
 With the exception of an empty text, matched by e.g. "*".
 This will return 0, albite the regex formally matches, with 0 chars.

 (todo)
 bracket matching () and {} needs debugging. (test/extmatch2 for testing)
 Add a callback for bracket matches, and add a matchlist
 (linked list, allocated with malloc_brk)
 Trouble: e.g. *:(*) doesn't match, albite it should
  .. better. Now: # matches the end, after a bracket. Like it should
   $ doesn't. But should as well.
 change '+' to greedy matching of any char
 for {n,X} let n be * or + as well.
  (this would be closer to regular regulars again.?.)


 note. About a tokenizer:
 matching quoted string is really easy with the callback structure:
  just match with &. When a quote is matched, look forward to the next quote,
  and return that many chars. Same time, the quoted string is matched.
  That's so easy, it is hard to believe.
  When using closures for that, it is same time easy to collect all tokens.

  It is even easier. just a "*("*")*" is enough.

  ->There is something needed for partial matching. Possibly spare the last *, and return,
  as soon the pattern is at it's end (and not the text?)
  Already works this way. 

  Should start to define the language for the init scripts.
  Or better, start thinking abut that, but follow my other obligations the next time.

  Have to think thouroughly about what points would make such a language useful.
  The reason to think about that is clear - performance squeezing, faster startup time.
  And writing the startup scripts in C is. Well. little bit painful.
  However, together with minilib, there is nearly no difference between having a C program compiled
  and run, or working with scripts. To not have the overhead of linking the external libraries in,
  is of quite some advance.
  The only difference, the compiled binaries are "cached".
  have just to sort something sensible out for the systematic.
  Implement an own loader? possibly easy. Since the loading address is fixed.
  This could possibly also be the solution for the yet unclear question of the line between parsing
  arguments and calling the main function of the small core tools, andsoon.
  
 ..yet I've to fiddle out the possibilities (and quirks) of this machine.
 seems, this expression language did overpower it's creator.

 Bugs (features): 
 matching e.g. *matches*@*doesn't match*
 potentiates the *@* to many possibilities.
 One for every linebreak following 'matches'.
-----
link:../src/match/match_ext2.c[../src/match/match_ext2.c] l.306 

[[msync]]
msync::

  _int msync( void* addr,  size_t len, int flags)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.245 manpage: link:manpages/sys/msync.2.rst[msync] +


[[network]]
network::

  __ + 
-----
network definitions
-----
link:../include/network.h[../include/network.h] l.4 

[[ntohl]]
ntohl::

  _#define ntohl(i) htonl(i)_ + 
link:../src/network/htonl.c[../src/network/htonl.c] l.20 manpage: link:manpages/net/byteorder.3.rst[ntohl] +


[[ntohs]]
ntohs::

  _#define ntohs(i) htons(i)_ + 
 *Defines:* network + 
link:../src/network/macros.h[../src/network/macros.h] l.2 manpage: link:manpages/net/byteorder.3.rst[ntohs] +


[[optimization_fence]]
optimization_fence::

  _void  optimization_fence(void*p)_ + 
-----
prevent optimizations.
 cast a var to void*, and calling this,
 leaves the compiler unknown on what he can strip.
 The function attribute noipa means,
 the compiler doesn't know, what the function itself does.
 (the function does nothing, but don't tell that gcc, please..)
 therefore, everything used as parameter to this function,
 will be calculated, defined, and so on before.
 It's used for the globals, 
 shich are pushed within _start onto the stack.
 since _start itself only provides a global pointer,
 and initialitzes some of the globals,
 but doesn't use them again,
 this construction is needed.
 more funnily, the function will never be called.
 It's past the asm inline syscall to exit.
 But again, luckily gcc doesn't know.
 All other options, like having the globals volatile, 
 setting the optimization flag of _start to 0, 
 having a volatile asm call with the globals as param, and so on,
 have been useless. All after all, seems to me, ai has it's restrictions.

 With less overhead the macro OPTFENCE(...) goes.
 There the call to the "ipa" function is jumped over,
 via asm inline instructions. 
 Doesn't work with clang.
 But yet I also didn't it with clang.
-----
link:../include/minilib_global.h[../include/minilib_global.h] l.215 

[[poll]]
poll::

  _int poll(struct pollfd *fds, nfds_t cnt, int timeout)_ + 
link:../include/poll.h[../include/poll.h] l.25 manpage: link:manpages/sys/poll.2.rst[poll] +


[[prctl]]
prctl::

  _int prctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.257 

[[pwent]]
pwent::

  __ + 
-----
define passwd and group structures
-----
link:../include/pwent.h[../include/pwent.h] l.7 

[[qsort]]
qsort::

  _void qsort(void  *base,	size_t nel,	size_t width,	int (*comp)(const void *, const void *))_ + 
 *Defines:* swap + 
-----
(quick) shell sort routine
 following the tradition, this isn't exactly a quicksort algorithm,
 albite named quicksort.
 It is a shell sort implementation, originally done by Ray Gardner, 5/90;
 which in turn I did find within musl.
-----
link:../src/sort/qsort.c[../src/sort/qsort.c] l.35 manpage: link:manpages/stdlib/qsort.3.rst[qsort] +


[[recv]]
recv::

  _int recv(int sockfd, void *buf, size_t len, int flags)_ + 
 *Defines:* recvfrom + 
link:../src/network/recv.c[../src/network/recv.c] l.3 manpage: link:manpages/sys/recv.2.rst[recv] +


[[recvfrom]]
recvfrom::

  _int recvfrom( int fd,  void *ubuf,  size_t size,  unsigned flags,  struct sockaddr *addr,  unsigned int *addr_len)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.219 manpage: link:manpages/sys/recv.2.rst[recvfrom] +


[[rt_sigsuspend]]
rt_sigsuspend::

  _int rt_sigsuspend( const sigset_t *mask, size_t sigsetsize)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.179 

[[sendto]]
sendto::

  _int sendto( int fd,  void *buff,  size_t len,  unsigned flags,  struct sockaddr *addr,  int addr_len)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.222 manpage: link:manpages/sys/send.2.rst[sendto] +


[[setbrk]]
setbrk::

  _int setbrk(long addr)_ + 
 *Defines:* sys_brk + 
-----
set the current brk
 wrapper for brk(), with type of brk changed to long
-----
link:../src/memory/setbrk.c[../src/memory/setbrk.c] l.6 

[[setenv]]
setenv::

  _int setenv( const char *name, const char *value, int overwrite )_ + 
 *Defines:* environ strlen ret_errno strcpy 0 + 
-----
put a string into the environmental vars
 UNTESTED (!) TODO
 the supplied string's pointer is put into the environmental array of pointers.
 The supplied strings are copied into memory.
 If overwrite is zero, an existing environmental variable is not overritten.
 If overwrite is 1, the environmental variable is overwritten,
 but not(!) freed from memory.
 The supplied value is not checked for e.g. an '='

 Returns: 
 - 0 on success
 - EINVAL on error
-----
link:../src/system/setenv.c[../src/system/setenv.c] l.15 manpage: link:manpages/stdlib/getenv.3.rst[setenv] +


[[setresuid]]
setresuid::

  _int setresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.202 manpage: link:manpages/sys/setresuid.2.rst[setresuid] +


[[setreuid]]
setreuid::

  _int setreuid( uid_t ruid,  uid_t euid)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.155 manpage: link:manpages/sys/setreuid.2.rst[setreuid] +


[[setsockopt]]
setsockopt::

  _int setsockopt( int fd,  int level,  int optname,  const void *optval,  int optlen)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.226 manpage: link:manpages/sys/getsockopt.2.rst[setsockopt] +


[[short_errstr]]
short_errstr::

  _const char* short_errstr(int num)_ + 
-----
short error (errno) string. 
 this adds about 2kB to the compiled binary(!)
-----
link:../include/errstrshort.h[../include/errstrshort.h] l.10 

[[sigsuspend]]
sigsuspend::

  _int sigsuspend( const sigset_t *mask )_ + 
 *Defines:* rt_sigsuspend + 
link:../src/process/sigaction.c[../src/process/sigaction.c] l.53 manpage: link:manpages/sys/sigsuspend.2.rst[sigsuspend] +


[[snprintfs]]
snprintfs::

  _int snprintfs( char* buf, int size, char *fmt, ...)_ + 
-----
prints formatted and unbuffered output into buf.
 only %s and %c are recognized.
 snprintfs instead of snprintf can save some bytes.
 untested
-----
link:../src/output/snprintfs.c[../src/output/snprintfs.c] l.8 

[[socket]]
socket::

  _int socket( int family,  int type,  int protocol)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.215 manpage: link:manpages/sys/socket.2.rst[socket] +


[[stpcpy]]
stpcpy::

  _char *stpcpy(char *dest, const char *src)_ + 
-----
copy src to dest, return a pointer to the last char +1 ( ending '0' )
-----
link:../src/string/stpcpy.c[../src/string/stpcpy.c] l.3 manpage: link:manpages/string/string.3.rst[stpcpy] +


[[stplcpy]]
stplcpy::

  _char *stplcpy(char *dest, const char *src, int size)_ + 
-----
copy src to dest, return a pointer to the last char +1 ( ending '0' )
 doesn't pad dest with 0, when size<src;
-----
link:../src/string/stplcpy.c[../src/string/stplcpy.c] l.4 

[[stpncpy]]
stpncpy::

  _char *stpncpy(char *dest, const char *src, int size)_ + 
-----
copy src to dest, return a pointer to the last char +1 ( ending '0' )
 Please note stplcpy (terminology borrowed from freebsd), 
 which does the same,
 but doesn't pad dest with 0's.
-----
link:../src/string/stpncpy.c[../src/string/stpncpy.c] l.6 manpage: link:manpages/string/strcpy.3.rst[stpncpy] +


[[strlcpy]]
strlcpy::

  _char *strlcpy(char *dest, const char *src, int n)_ + 
-----
copy max n chars from src to dest, 
 when src is longer than dest, 
 end dest[n-1] with '\0'.
-----
link:../src/string/strlcpy.c[../src/string/strlcpy.c] l.5 manpage: link:manpages/string/strlcpy.3.rst[strlcpy] +


[[strpbrk]]
strpbrk::

  _char* strpbrk(const char* s, const char* charset)_ + 
link:../src/string/strpbrk.c[../src/string/strpbrk.c] l.2 manpage: link:manpages/string/string.3.rst[strpbrk] +


[[strtok]]
strtok::

  _char* strtok(char *s, const char *delim)_ + 
 *Defines:* strtok_r + 
link:../src/string/strtok.c[../src/string/strtok.c] l.3 manpage: link:manpages/string/strtok.3.rst[strtok] +


[[strtok_r]]
strtok_r::

  _char* strtok_r(char *s, const char *delim, char **last)_ + 
link:../src/string/strtok_r.c[../src/string/strtok_r.c] l.2 manpage: link:manpages/string/strtok.3.rst[strtok_r] +


[[strtoll]]
strtoll::

  _long long int strtoll(const char *c, const char **endp, int base)_ + 
-----
conversion
 doesn't check for overflow(!)
 For linux x64, long long and long both have 64 bit.
 Therefore, strtoll just calls strtol
-----
link:../src/string/strtoll.c[../src/string/strtoll.c] l.7 manpage: link:manpages/stdlib/strtol.3.rst[strtoll] +


[[term_width]]
term_width::

  _int term_width()_ + 
 *Defines:* termio environ + 
-----
get the terminal width
 reads the environmental var COLS,
 if not present, returns 80.
 Doesn't check for the existence of a terminal.
-----
link:../src/termios/term_width.c[../src/termios/term_width.c] l.7 

[[termio]]
termio::

  __ + 
-----
termios structures and definitions
-----
link:../include/termio.h[../include/termio.h] l.5 

[[timerfd_create]]
timerfd_create::

  _int timerfd_create( int clockid,  int flags)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.251 

[[timerfd_gettime]]
timerfd_gettime::

  _int timerfd_gettime( int ufd,  struct itimerspec *otmr)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.255 

[[timerfd_settime]]
timerfd_settime::

  _int timerfd_settime( int ufd,  int flags,  const struct itimerspec *utmr,  struct itimerspec *otmr)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.253 

[[token_i]]
token_i::

  _int token_i( userdb* udb, char **p )_ + 
link:../src/userdb/userdb.c[../src/userdb/userdb.c] l.33 

[[token_s]]
token_s::

  _char *token_s( userdb *udb, char **p )_ + 
-----
tokenizer for the passwd/group files.
 used by the group/user pwentry access functions.
 performance of subsequent calls could be improved by replacing all ':' and '\n'
 by 0's when loading the db file.
 it would be possible as well, testing not only single bytes, but
 integers of longs at once. However, in most cases, e.g.
 for big directories with many small files, in most cases 
 all files do have the same owner and group. Since the last result to calls
 of the access functions is cached,
 there wouldn't be an improvement by optimizing the tokenizing functions.
 So I'm leaving this for now, as it is.
 And most possibly it would be better to implement bsd's cached versions 
 of the user db access functions instead. 
-----
link:../src/userdb/userdb.c[../src/userdb/userdb.c] l.19 

[[userdb_open]]
userdb_open::

  _int userdb_open(userdb *udb, const char* file)_ + 
 *Defines:* fstat globals write close + 
link:../src/userdb/userdb_open.c[../src/userdb/userdb_open.c] l.3 

[[warn]]
warn::

  _#define warn( fmt ... ) { fprintf(stderr,fmt ); }_ + 
 *Defines:* strlen kill fileno write globals getpid + 
-----
print an error message to stderr
-----
link:../src/process/error.c[../src/process/error.c] l.33 manpage: link:manpages/gen/err.3.rst[warn] +


[[where]]
where::

  _int where(const char *file,char *buf)_ + 
 *Defines:* access environ + 
-----
locate an executable in PATH
-----
link:../src/exec/where.c[../src/exec/where.c] l.4 

[[writesl]]
writesl::

  _#define writesl(str) write(STDOUT_FILENO,str "\n",sizeof(str)+1)_ + 
 *Defines:* write + 
-----
write the constant str to stdout, followed by a newline. 
 Computes length with sizeof(str) at compile time.
-----
link:../include/prints.h[../include/prints.h] l.93 



---

== userdb



[[endgrent]]
endgrent::

  _void endgrent()_ + 
 *Defines:* pwent munmap + 
link:../src/userdb/endgrent.c[../src/userdb/endgrent.c] l.4 manpage: link:manpages/gen/getgrent.3.rst[endgrent] +


[[endpwent]]
endpwent::

  _void endpwent()_ + 
 *Defines:* munmap pwent + 
link:../src/userdb/endpwent.c[../src/userdb/endpwent.c] l.4 manpage: link:manpages/gen/getpwent.3.rst[endpwent] +


[[getgrent]]
getgrent::

  _struct group* getgrent()_ + 
 *Defines:* pwent userdb open + 
link:../src/userdb/getgrent.c[../src/userdb/getgrent.c] l.4 manpage: link:manpages/gen/getgrent.3.rst[getgrent] +


[[getgrgid]]
getgrgid::

  _struct group *getgrgid(gid_t gid)_ + 
 *Defines:* open token_i pwent write fstat globals mmap grent close userdb setgrent token_s + 
-----
get the group entry of the group "gid".
 the last result is cached, multiple calls with the same
 name will return the cached result.
-----
link:../src/userdb/getgrgid.c[../src/userdb/getgrgid.c] l.7 manpage: link:manpages/gen/getgrent.3.rst[getgrgid] +


[[getgrnam]]
getgrnam::

  _struct group *getgrnam(const char* name)_ + 
 *Defines:* write pwent fstat globals token_i open token_s userdb setgrent close grent mmap + 
-----
get the group entry of the group "name".
 the last result is cached, multiple calls with the same
 name will return the cached result.
-----
link:../src/userdb/getgrnam.c[../src/userdb/getgrnam.c] l.7 manpage: link:manpages/gen/getgrent.3.rst[getgrnam] +


[[getpwent]]
getpwent::

  _struct passwd* getpwent()_ + 
 *Defines:* userdb open + 
link:../src/userdb/getpwent.c[../src/userdb/getpwent.c] l.4 manpage: link:manpages/gen/getpwent.3.rst[getpwent] +


[[getpwnam]]
getpwnam::

  _struct passwd *getpwnam(const char* name)_ + 
 *Defines:* open fstat globals pwent write token_i close mmap token_s + 
-----
get the passwd entry of the user "name".
 the last result is cached, multiple calls with the same
 name will return the cached result.
-----
link:../src/userdb/getpwnam.c[../src/userdb/getpwnam.c] l.7 manpage: link:manpages/gen/getpwent.3.rst[getpwnam] +


[[getpwuid]]
getpwuid::

  _struct passwd *getpwuid(uid_t uid)_ + 
 *Defines:* mmap open setpwent passwdfile_open token_i write pwent token_s + 
-----
get the passwd entry of the user with uid.
 the last result is cached, multiple calls with the same
 uid will return the cached result.
-----
link:../src/userdb/getpwuid.c[../src/userdb/getpwuid.c] l.7 manpage: link:manpages/gen/getpwent.3.rst[getpwuid] +


[[max_groupmembers]]
max_groupmembers::

  _#ifndef mini_max_groupmembers_ + 
-----
The maximum number of users, 
 which are within a group.
 used for the allocation of the array gr_mem.
 default: 64
-----
link:../include/globaldefs.h[../include/globaldefs.h] l.96 

[[setgrent]]
setgrent::

  _void setgrent()_ + 
link:../src/userdb/setgrent.c[../src/userdb/setgrent.c] l.3 manpage: link:manpages/gen/getgrent.3.rst[setgrent] +


[[setpwent]]
setpwent::

  _void setpwent()_ + 
link:../src/userdb/setpwent.c[../src/userdb/setpwent.c] l.3 manpage: link:manpages/gen/getpwent.3.rst[setpwent] +




---

== x64-syscalls



[[sys__sysctl]]
sys__sysctl::

  _sys__sysctl( struct __sysctl_args *args)_ + 
 *read/write system parameters*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.316 

[[sys_accept]]
sys_accept::

  _sys_accept( int fd,  struct sockaddr *upeersockaddr,  int *upeeraddrlen)_ + 
 *accept a new connection on a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.91 

[[sys_accept4]]
sys_accept4::

  _sys_accept4( int fd,  struct sockaddr *upeer_sockaddr,  int *upeer_addrlen,  int flags)_ + 
 *accept a connection on a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.552 

[[sys_access]]
sys_access::

  _sys_access( const char *filename,  int mode)_ + 
 *determine accessibility of a file relative to directory file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.47 

[[sys_acct]]
sys_acct::

  _sys_acct( const char *name)_ + 
 *switch process accounting on or off*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.330 

[[sys_add_key]]
sys_add_key::

  _sys_add_key( const char *_type,  const char *_description,  const void *_payload,  size_t plen)_ + 
 *add a key to the kernel's key management facility*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.472 

[[sys_adjtimex]]
sys_adjtimex::

  _sys_adjtimex( struct timex *txc_p)_ + 
 *tune kernel clock*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.322 

[[sys_alarm]]
sys_alarm::

  _sys_alarm( unsigned int seconds)_ + 
 *schedule an alarm signal*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.79 

[[sys_arch_prctl]]
sys_arch_prctl::

  _sys_arch_prctl( struct task_struct *task,  int code,  unsigned long *addr)_ + 
 *set architecture-specific thread state*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.320 

[[sys_bind]]
sys_bind::

  _sys_bind( int fd,  struct sockaddr *umyaddr,  int addrlen)_ + 
 *bind a name to a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.103 

[[sys_brk]]
sys_brk::

  _long sys_brk(unsigned long addr)_ + 
 *change data segment size*
-----
the kernel syscall brk.
-----
link:../src/memory/sys_brk.c[../src/memory/sys_brk.c] l.4 

[[sys_capget]]
sys_capget::

  _sys_capget( cap_user_header_t header,  cap_user_data_t dataptr)_ + 
 *set/get capabilities of thread(s)*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.256 

[[sys_capset]]
sys_capset::

  _sys_capset( cap_user_header_t header,  const cap_user_data_t data)_ + 
 *set/get capabilities of thread(s)*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.258 

[[sys_chdir]]
sys_chdir::

  _sys_chdir( const char *filename)_ + 
 *change working directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.166 

[[sys_chmod]]
sys_chmod::

  _sys_chmod( const char *filename,  mode_t mode)_ + 
 *change mode of a file relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.186 

[[sys_chown]]
sys_chown::

  _sys_chown( const char *filename,  uid_t user,  gid_t group)_ + 
 *change owner and group of a file relative to directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.190 

[[sys_chroot]]
sys_chroot::

  _sys_chroot( const char *filename)_ + 
 *change root directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.326 

[[sys_clock_adjtime]]
sys_clock_adjtime::

  _sys_clock_adjtime( clockid_t which_clock,  struct timex *tx)_ + 
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.586 

[[sys_clock_getres]]
sys_clock_getres::

  _sys_clock_getres( const clockid_t which_clock,  struct timespec *tp)_ + 
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.436 

[[sys_clock_gettime]]
sys_clock_gettime::

  _sys_clock_gettime( const clockid_t which_clock,  struct timespec *tp)_ + 
 *clock and time functions*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.434 

[[sys_clock_nanosleep]]
sys_clock_nanosleep::

  _sys_clock_nanosleep( const clockid_t which_clock,  int flags,  const struct timespec *rqtp,  struct timespec *rmtp)_ + 
 *high resolution sleep with specifiable clock*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.438 

[[sys_clock_settime]]
sys_clock_settime::

  _sys_clock_settime( const clockid_t which_clock,  const struct timespec *tp)_ + 
 *clock and timer functions*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.432 

[[sys_clone]]
sys_clone::

  _sys_clone( unsigned long clone_flags,  unsigned long newsp,  void *parent_tid,  void *child_tid)_ + 
 *create a child process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.117 

[[sys_close]]
sys_close::

  _sys_close( unsigned int fd)_ + 
 *close a file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.11 

[[sys_connect]]
sys_connect::

  _sys_connect( int fd,  struct sockaddr *uservaddr,  int addrlen)_ + 
 *connect a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.89 

[[sys_creat]]
sys_creat::

  _sys_creat( const char *pathname,  int mode)_ + 
 *create a new file or rewrite an existing one*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.176 

[[sys_delete_module]]
sys_delete_module::

  _sys_delete_module( const char *name_user,  unsigned int flags)_ + 
 *unload a kernel module*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.354 

[[sys_dup]]
sys_dup::

  _sys_dup( unsigned int fildes)_ + 
 *duplicate an open file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.69 

[[sys_dup2]]
sys_dup2::

  _sys_dup2( unsigned int oldfd,  unsigned int newfd)_ + 
 *duplicate a file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.71 

[[sys_dup3]]
sys_dup3::

  _sys_dup3( unsigned int oldfd,  unsigned int newfd,  int flags)_ + 
 *duplicate a file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.560 

[[sys_epoll_create]]
sys_epoll_create::

  _sys_epoll_create( int size)_ + 
 *open an epoll file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.408 

[[sys_epoll_create1]]
sys_epoll_create1::

  _sys_epoll_create1( int flags)_ + 
 *open an epoll file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.558 

[[sys_epoll_ctl]]
sys_epoll_ctl::

  _sys_epoll_ctl( int epfd,  int op,  int fd,  struct epoll_event *event)_ + 
 *control interface for an epoll file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.444 

[[sys_epoll_pwait]]
sys_epoll_pwait::

  _sys_epoll_pwait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout,  const sigset_t *sigmask,  size_t sigsetsize)_ + 
 *wait for an I/O event on an epoll file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.538 

[[sys_epoll_wait]]
sys_epoll_wait::

  _sys_epoll_wait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout)_ + 
 *wait for an I/O event on an epoll file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.442 

[[sys_eventfd]]
sys_eventfd::

  _sys_eventfd( unsigned int count)_ + 
 *create a file descriptor for event notification*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.544 

[[sys_eventfd2]]
sys_eventfd2::

  _sys_eventfd2( unsigned int count,  int flags)_ + 
 *create a file descriptor for event notification*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.556 

[[sys_execve]]
sys_execve::

  _sys_execve( const char *filename,  const char *const argv[],  const char *const envp[])_ + 
 *execute program*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.123 

[[sys_exit]]
sys_exit::

  _sys_exit( int error_code)_ + 
 *terminate a process*


[[sys_exit_group]]
sys_exit_group::

  _sys_exit_group( int error_code)_ + 
 *exit all threads in a process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.440 

[[sys_faccessat]]
sys_faccessat::

  _sys_faccessat( int dfd,  const char *filename,  int mode)_ + 
 *determine accessibility of a file relative to directory file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.514 

[[sys_fadvise64]]
sys_fadvise64::

  _sys_fadvise64( int fd,  loff_t offset,  size_t len,  int advice)_ + 
 *predeclare an access pattern for file data*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.420 

[[sys_fallocate]]
sys_fallocate::

  _sys_fallocate( long fd,  long mode,  loff_t offset,  loff_t len)_ + 
 *manipulate file space*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.546 

[[sys_fanotify_init]]
sys_fanotify_init::

  _sys_fanotify_init( unsigned int flags,  unsigned int event_f_flags)_ + 
 *create and initialize fanotify group*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.576 

[[sys_fanotify_mark]]
sys_fanotify_mark::

  _sys_fanotify_mark( long fanotify_fd,  long flags,  __u64 mask,  long dfd, long pathname)_ + 
 *add, remove, or modify an fanotify mark on a filesystem*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.578 

[[sys_fchdir]]
sys_fchdir::

  _sys_fchdir( unsigned int fd)_ + 
 *change working directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.168 

[[sys_fchmod]]
sys_fchmod::

  _sys_fchmod( unsigned int fd,  mode_t mode)_ + 
 *change mode of a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.188 

[[sys_fchmodat]]
sys_fchmodat::

  _sys_fchmodat( int dfd,  const char *filename,  mode_t mode)_ + 
 *change mode of a file relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.512 

[[sys_fchown]]
sys_fchown::

  _sys_fchown( unsigned int fd,  uid_t user,  gid_t group)_ + 
 *change owner and group of a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.192 

[[sys_fchownat]]
sys_fchownat::

  _sys_fchownat( int dfd,  const char *filename,  uid_t user,  gid_t group,  int flag)_ + 
 *change owner and group of a file relative to directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.496 

[[sys_fcntl]]
sys_fcntl::

  _sys_fcntl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_ + 
 *file control*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.150 

[[sys_fdatasync]]
sys_fdatasync::

  _sys_fdatasync( unsigned int fd)_ + 
 *synchronize the data of a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.156 

[[sys_fgetxattr]]
sys_fgetxattr::

  _sys_fgetxattr( int fd,  const char *name,  void *value,  size_t size)_ + 
 *retrieve an extended attribute value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.372 

[[sys_finit_module]]
sys_finit_module::

  _sys_finit_module( int fd,  const char  *uargs,  int flags)_ + 
 *load a kernel module*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.602 

[[sys_flistxattr]]
sys_flistxattr::

  _sys_flistxattr( int fd,  char *list,  size_t size)_ + 
 *list extended attribute names*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.378 

[[sys_flock]]
sys_flock::

  _sys_flock( unsigned int fd,  unsigned int cmd)_ + 
 *apply or remove an advisory lock on an open file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.152 

[[sys_fork]]
sys_fork::

  _sysSYSDEF_syscall(_fork,0)_ + 
 *create a new process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.119 

[[sys_fremovexattr]]
sys_fremovexattr::

  _sys_fremovexattr( int fd,  const char *name)_ + 
 *remove an extended attribute*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.384 

[[sys_fsetxattr]]
sys_fsetxattr::

  _sys_fsetxattr( int fd,  const char *name,  const void *value,  size_t size, int flags)_ + 
 *set an extended attribute value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.366 

[[sys_fstat]]
sys_fstat::

  _sys_fstat( unsigned int fd,  struct stat *statbuf)_ + 
 *get file status*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.15 

[[sys_fstatfs]]
sys_fstatfs::

  _sys_fstatfs( unsigned int fd,  struct statfs *buf)_ + 
 *get filesystem statistics*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.280 

[[sys_fsync]]
sys_fsync::

  _sys_fsync( unsigned int fd)_ + 
 *synchronize changes to a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.154 

[[sys_ftruncate]]
sys_ftruncate::

  _sys_ftruncate( unsigned int fd,  unsigned long length)_ + 
 *truncate a file to a specified length*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.160 

[[sys_futex]]
sys_futex::

  _sys_futex( u32 *uaddr,  int op,  u32 val,  struct timespec *utime,  u32 *uaddr2,  u32 val3)_ + 
 *fast user-space locking*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.390 

[[sys_futimesat]]
sys_futimesat::

  _sys_futimesat( int dfd,  const char *filename,  struct timeval *utimes)_ + 
 *change timestamps of a file relative to a directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.498 

[[sys_get_mempolicy]]
sys_get_mempolicy::

  _sys_get_mempolicy( int *policy,  unsigned long *nmask,  unsigned long maxnode,  unsigned long addr,  unsigned long flags)_ + 
 *retrieve NUMA memory policy for a thread*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.454 

[[sys_get_robust_list]]
sys_get_robust_list::

  _sys_get_robust_list( int pid,  struct robust_list_head **head_ptr,  size_t *len_ptr)_ + 
 *get/set list of robust futexes*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.524 

[[sys_getcpu]]
sys_getcpu::

  _sys_getcpu( unsigned *cpup,  unsigned *nodep,  struct getcpu_cache *unused)_ + 
 *determine CPU and NUMA node on which the calling thread is running*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.594 

[[sys_getcwd]]
sys_getcwd::

  _sys_getcwd( char *buf,  unsigned long size)_ + 
 *get the pathname of the current working directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.164 

[[sys_getdents]]
sys_getdents::

  _sys_getdents( unsigned int fd,  struct linux_dirent *dirent,  unsigned int count)_ + 
 *get directory entries*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.162 

[[sys_getdents64]]
sys_getdents64::

  _sys_getdents64( unsigned int fd,  struct linux_dirent64 *dirent,  unsigned int count)_ + 
 *get directory entries*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.412 

[[sys_getegid]]
sys_getegid::

  _sysSYSDEF_syscall(_getegid,0)_ + 
 *get the effective group ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.222 

[[sys_geteuid]]
sys_geteuid::

  _sysSYSDEF_syscall(_geteuid,0)_ + 
 *get the effective user ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.220 

[[sys_getgid]]
sys_getgid::

  _sysSYSDEF_syscall(_getgid,0)_ + 
 *get the real group ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.214 

[[sys_getgroups]]
sys_getgroups::

  _sys_getgroups( int gidsetsize,  gid_t *grouplist)_ + 
 *get supplementary group IDs*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.236 

[[sys_getitimer]]
sys_getitimer::

  _sys_getitimer( int which,  struct itimerval *value)_ + 
 *get and set value of interval timer*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.77 

[[sys_getpeername]]
sys_getpeername::

  _sys_getpeername( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_ + 
 *get the name of the peer socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.109 

[[sys_getpgid]]
sys_getpgid::

  _sys_getpgid( pid_t pid)_ + 
 *get the process group ID for a process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.248 

[[sys_getpgrp]]
sys_getpgrp::

  _sysSYSDEF_syscall(_getpgrp,0)_ + 
 *get the process group ID of the calling process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.228 

[[sys_getpid]]
sys_getpid::

  _sysSYSDEF_syscall(_getpid,0)_ + 
 *get the process ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.83 

[[sys_getppid]]
sys_getppid::

  _sysSYSDEF_syscall(_getppid,0)_ + 
 *get the parent process ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.226 

[[sys_getpriority]]
sys_getpriority::

  _sys_getpriority( int which,  int who)_ + 
 *get and set the nice value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.284 

[[sys_getrandom]]
sys_getrandom::

  _sys_getrandom( char  *buf,  size_t count,  unsigned int flags)_ + 
 *obtain a series of random bytes*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.612 

[[sys_getresgid]]
sys_getresgid::

  _sys_getresgid( gid_t *rgid,  gid_t *egid,  gid_t *sgid)_ + 
 *get real, effective and saved user/group IDs*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.246 

[[sys_getresuid]]
sys_getresuid::

  _sys_getresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_ + 
 *get real, effective and saved user/group IDs*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.242 

[[sys_getrlimit]]
sys_getrlimit::

  _sys_getrlimit( unsigned int resource,  struct rlimit *rlim)_ + 
 *control maximum resource consumption*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.200 

[[sys_getrusage]]
sys_getrusage::

  _sys_getrusage( int who,  struct rusage *ru)_ + 
 *get information about resource utilization*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.202 

[[sys_getsid]]
sys_getsid::

  _sys_getsid( pid_t pid)_ + 
 *get the process group ID of a session leader*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.254 

[[sys_getsockname]]
sys_getsockname::

  _sys_getsockname( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_ + 
 *get the socket name*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.107 

[[sys_getsockopt]]
sys_getsockopt::

  _sys_getsockopt( int fd,  int level,  int optname,  char *optval,  int *optlen)_ + 
 *get the socket options*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.115 

[[sys_gettid]]
sys_gettid::

  _sysSYSDEF_syscall(_gettid,0)_ + 
 *get thread identification*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.358 

[[sys_gettimeofday]]
sys_gettimeofday::

  _sys_gettimeofday( struct timeval *tv,  struct timezone *tz)_ + 
 *get the date and time*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.198 

[[sys_getuid]]
sys_getuid::

  _sysSYSDEF_syscall(_getuid,0)_ + 
 *get a real user ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.210 

[[sys_getxattr]]
sys_getxattr::

  _sys_getxattr( const char *pathname,  const char *name,  void *value,  size_t size)_ + 
 *retrieve an extended attribute value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.368 

[[sys_init_module]]
sys_init_module::

  _sys_init_module( void *umod,  unsigned long len,  const char *uargs)_ + 
 *load a kernel module*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.352 

[[sys_inotify_add_watch]]
sys_inotify_add_watch::

  _sys_inotify_add_watch( int fd,  const char *pathname,  u32 mask)_ + 
 *add a watch to an initialized inotify instance*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.484 

[[sys_inotify_init]]
sys_inotify_init::

  _sysSYSDEF_syscall(_inotify_init,0)_ + 
 *initialize an inotify instance*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.482 

[[sys_inotify_init1]]
sys_inotify_init1::

  _sys_inotify_init1( int flags)_ + 
 *initialize an inotify instance*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.564 

[[sys_inotify_rm_watch]]
sys_inotify_rm_watch::

  _sys_inotify_rm_watch( int fd,  __s32 wd)_ + 
 *remove an existing watch from an inotify instance*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.486 

[[sys_io_cancel]]
sys_io_cancel::

  _sys_io_cancel( aio_context_t ctx_id,  struct iocb *iocb,  struct io_event *result)_ + 
 *cancel an outstanding asynchronous I/O operation*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.404 

[[sys_io_destroy]]
sys_io_destroy::

  _sys_io_destroy( aio_context_t ctx)_ + 
 *destroy an asynchronous I/O context*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.398 

[[sys_io_getevents]]
sys_io_getevents::

  _sys_io_getevents( aio_context_t ctx_id,  long min_nr,  long nr,  struct io_event *events)_ + 
 *read asynchronous I/O events from the completion queue*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.400 

[[sys_io_setup]]
sys_io_setup::

  _sys_io_setup( unsigned nr_events,  aio_context_t *ctxp)_ + 
 *create an asynchronous I/O context*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.396 

[[sys_io_submit]]
sys_io_submit::

  _sys_io_submit( aio_context_t ctx_id,  long nr,  struct iocb **iocbpp)_ + 
 *submit asynchronous I/O blocks for processing*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.402 

[[sys_ioctl]]
sys_ioctl::

  _sys_ioctl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_ + 
 *control a STREAMS device (\fBSTREAMS\fP)*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.37 

[[sys_ioperm]]
sys_ioperm::

  _sys_ioperm( unsigned long from,  unsigned long num,  int turn_on)_ + 
 *set port input/output permissions*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.350 

[[sys_iopl]]
sys_iopl::

  _sys_iopl( unsigned int level,  struct pt_regs *regs)_ + 
 *change I/O privilege level*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.348 

[[sys_ioprio_get]]
sys_ioprio_get::

  _sys_ioprio_get( int which,  int who)_ + 
 *get/set I/O scheduling class and priority*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.480 

[[sys_ioprio_set]]
sys_ioprio_set::

  _sys_ioprio_set( int which,  int who,  int ioprio)_ + 
 *get/set I/O scheduling class and priority*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.478 

[[sys_kcmp]]
sys_kcmp::

  _sys_kcmp( pid_t pid1,  pid_t pid2,  int type,  unsigned long idx1,  unsigned long idx2)_ + 
 *compare two processes to determine if they share a kernel resource*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.600 

[[sys_kexec_file_load]]
sys_kexec_file_load::

  _sys_kexec_file_load( int kernel_fd,  int initrd_fd,  unsigned long cmdline_len,  const char  *cmdline_ptr,  unsigned long flags)_ + 
 *load a new kernel for later execution*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.616 

[[sys_kexec_load]]
sys_kexec_load::

  _sys_kexec_load( unsigned long entry,  unsigned long nr_segments,  struct kexec_segment *segments,  unsigned long flags)_ + 
 *load a new kernel for later execution*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.468 

[[sys_keyctl]]
sys_keyctl::

  _sys_keyctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_ + 
 *key management function wrappers*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.476 

[[sys_kill]]
sys_kill::

  _sys_kill( pid_t pid,  int sig)_ + 
 *send a signal to a process or a group of processes*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.130 

[[sys_lchown]]
sys_lchown::

  _sys_lchown( const char *filename,  uid_t user,  gid_t group)_ + 
 *change the owner and group of a symbolic link*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.194 

[[sys_lgetxattr]]
sys_lgetxattr::

  _sys_lgetxattr( const char *pathname,  const char *name,  void *value,  size_t size)_ + 
 *retrieve an extended attribute value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.370 

[[sys_link]]
sys_link::

  _sys_link( const char *oldname,  const char *newname)_ + 
 *link one file to another file relative to two directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.178 

[[sys_linkat]]
sys_linkat::

  _sys_linkat( int oldfd,  const char *oldname,  int newfd,  const char *newname,  int flags)_ + 
 *make a new name for a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.506 

[[sys_listen]]
sys_listen::

  _sys_listen( int fd,  int backlog)_ + 
 *listen for socket connections and limit the queue of incoming*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.105 

[[sys_listxattr]]
sys_listxattr::

  _sys_listxattr( const char *pathname,  char *list,  size_t size)_ + 
 *list extended attribute names*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.374 

[[sys_llistxattr]]
sys_llistxattr::

  _sys_llistxattr( const char *pathname,  char *list,  size_t size)_ + 
 *list extended attribute names*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.376 

[[sys_lookup_dcookie]]
sys_lookup_dcookie::

  _sys_lookup_dcookie( u64 cookie64,  long buf,  long len)_ + 
 *return a directory entry's path*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.406 

[[sys_lremovexattr]]
sys_lremovexattr::

  _sys_lremovexattr( const char *pathname,  const char *name)_ + 
 *remove an extended attribute*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.382 

[[sys_lseek]]
sys_lseek::

  _sys_lseek( unsigned int fd,  off_t offset,  unsigned int origin)_ + 
 *move the read/write file offset*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.21 

[[sys_lsetxattr]]
sys_lsetxattr::

  _sys_lsetxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_ + 
 *set an extended attribute value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.364 

[[sys_lstat]]
sys_lstat::

  _sys_lstat( const char *filename,  struct stat *statbuf)_ + 
 *get file status*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.17 

[[sys_madvise]]
sys_madvise::

  _sys_madvise( unsigned long start,  size_t len_in,  int behavior)_ + 
 *give advice about use of memory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.61 

[[sys_mbind]]
sys_mbind::

  _sys_mbind( unsigned long start,  unsigned long len,  unsigned long mode,  unsigned long *nmask,  unsigned long maxnode,  unsigned flags)_ + 
 *set memory policy for a memory range*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.450 

[[sys_memfd_create]]
sys_memfd_create::

  _sys_memfd_create( const char  *uname_ptr,  unsigned int flags)_ + 
 *create an anonymous file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.614 

[[sys_migrate_pages]]
sys_migrate_pages::

  _sys_migrate_pages( pid_t pid,  unsigned long maxnode,  const unsigned long *old_nodes,  const unsigned long *new_nodes)_ + 
 *move all pages in a process to another set of nodes*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.488 

[[sys_mincore]]
sys_mincore::

  _sys_mincore( unsigned long start,  size_t len,  unsigned char *vec)_ + 
 *determine whether pages are resident in memory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.59 

[[sys_mkdir]]
sys_mkdir::

  _sys_mkdir( const char *pathname,  int mode)_ + 
 *make a directory relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.172 

[[sys_mkdirat]]
sys_mkdirat::

  _sys_mkdirat( int dfd,  const char *pathname,  int mode)_ + 
 *create a directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.492 

[[sys_mknod]]
sys_mknod::

  _sys_mknod( const char *filename,  umode_t mode,  unsigned dev)_ + 
 *make directory, special file, or regular file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.272 

[[sys_mknodat]]
sys_mknodat::

  _sys_mknodat( int dfd,  const char *filename,  int mode,  unsigned dev)_ + 
 *create a special or ordinary file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.494 

[[sys_mlock]]
sys_mlock::

  _sys_mlock( unsigned long start,  size_t len)_ + 
 *lock or unlock a range of process address space*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.302 

[[sys_mlockall]]
sys_mlockall::

  _sys_mlockall( int flags)_ + 
 *lock/unlock the address space of a process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.306 

[[sys_mmap]]
sys_mmap::

  _sys_mmap( unsigned long addr,  unsigned long len,  unsigned long prot,  unsigned long flags,  unsigned long fd,  unsigned long off)_ + 
 *map pages of memory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.23 

[[sys_modify_ldt]]
sys_modify_ldt::

  _sys_modify_ldt( int func,  void *ptr,  unsigned long bytecount)_ + 
 *get or set a per-process LDT entry*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.312 

[[sys_mount]]
sys_mount::

  _sys_mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_ + 
 *mount filesystem*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.334 

[[sys_move_pages]]
sys_move_pages::

  _sys_move_pages( pid_t pid,  unsigned long nr_pages,  const void *pages[], const int *nodes,  int *status,  int flags)_ + 
 *move individual pages of a process to another node*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.534 

[[sys_mprotect]]
sys_mprotect::

  _sys_mprotect( unsigned long start,  size_t len,  unsigned long prot)_ + 
 *set protection of memory mapping*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.25 

[[sys_mq_getsetattr]]
sys_mq_getsetattr::

  _sys_mq_getsetattr( mqd_t mqdes,  const struct mq_attr *u_mqstat,  struct mq_attr *u_omqstat)_ + 
 *get/set message queue attributes*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.466 

[[sys_mq_notify]]
sys_mq_notify::

  _sys_mq_notify( mqd_t mqdes,  const struct sigevent *u_notification)_ + 
 *notify process that a message is available*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.464 

[[sys_mq_open]]
sys_mq_open::

  _sys_mq_open( const char *u_name,  int oflag,  mode_t mode,  struct mq_attr *u_attr)_ + 
 *open a message queue*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.456 

[[sys_mq_timedreceive]]
sys_mq_timedreceive::

  _sys_mq_timedreceive( mqd_t mqdes,  char *u_msg_ptr,  size_t msg_len,  unsigned int *u_msg_prio,  const struct timespec *u_abs_timeout)_ + 
 *receive a message from a message queue*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.462 

[[sys_mq_timedsend]]
sys_mq_timedsend::

  _sys_mq_timedsend( mqd_t mqdes,  const char *u_msg_ptr,  size_t msg_len,  unsigned int msg_prio,  const struct timespec *u_abs_timeout)_ + 
 *send a message to a message queue*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.460 

[[sys_mq_unlink]]
sys_mq_unlink::

  _sys_mq_unlink( const char *u_name)_ + 
 *remove a message queue*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.458 

[[sys_mremap]]
sys_mremap::

  _sys_mremap( unsigned long addr,  unsigned long old_len,  unsigned long new_len,  unsigned long flags,  unsigned long new_addr)_ + 
 *remap a virtual memory address*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.55 

[[sys_msgctl]]
sys_msgctl::

  _sys_msgctl( int msqid,  int cmd,  struct msqid_ds *buf)_ + 
 *XSI message control operations*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.148 

[[sys_msgget]]
sys_msgget::

  _sys_msgget( key_t key,  int msgflg)_ + 
 *get the XSI message queue identifier*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.142 

[[sys_msgrcv]]
sys_msgrcv::

  _sys_msgrcv( int msqid,  struct msgbuf *msgp,  size_t msgsz,  long msgtyp,  int msgflg)_ + 
 *XSI message receive operation*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.146 

[[sys_msgsnd]]
sys_msgsnd::

  _sys_msgsnd( int msqid,  struct msgbuf *msgp,  size_t msgsz,  int msgflg)_ + 
 *XSI message send operation*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.144 

[[sys_msync]]
sys_msync::

  _sys_msync( unsigned long start,  size_t len,  int flags)_ + 
 *synchronize memory with physical storage*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.57 

[[sys_munlock]]
sys_munlock::

  _sys_munlock( unsigned long start,  size_t len)_ + 
 *unlock a range of process address space*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.304 

[[sys_munlockall]]
sys_munlockall::

  _sysSYSDEF_syscall(_munlockall,0)_ + 
 *unlock the address space of a process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.308 

[[sys_munmap]]
sys_munmap::

  _sys_munmap( unsigned long addr,  size_t len)_ + 
 *unmap pages of memory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.27 

[[sys_name_to_handle_at]]
sys_name_to_handle_at::

  _sys_name_to_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flag)_ + 
 *obtain handle*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.582 

[[sys_nanosleep]]
sys_nanosleep::

  _sys_nanosleep( struct timespec *rqtp,  struct timespec *rmtp)_ + 
 *high resolution sleep*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.75 

[[sys_newfstatat]]
sys_newfstatat::

  _sys_newfstatat( int dfd,  const char *filename,  struct stat *statbuf,  int flag)_ + 
 *get file status*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.500 

[[sys_open]]
sys_open::

  _sys_open( const char *filename,  int flags,  int mode)_ + 
 *open file relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.9 

[[sys_open_by_handle_at]]
sys_open_by_handle_at::

  _sys_open_by_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flags)_ + 
 *obtain handle*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.584 

[[sys_openat]]
sys_openat::

  _sys_openat( int dfd,  const char *filename,  int flags,  int mode)_ + 
 *open file relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.490 

[[sys_pause]]
sys_pause::

  _sysSYSDEF_syscall(_pause,0)_ + 
 *suspend the thread until a signal is received*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.73 

[[sys_perf_event_open]]
sys_perf_event_open::

  _sys_perf_event_open( struct perf_event_attr *attr_uptr,  pid_t pid,  int cpu,  int group_fd,  unsigned long flags)_ + 
 *set up performance monitoring*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.572 

[[sys_personality]]
sys_personality::

  _sys_personality( unsigned int personality)_ + 
 *set the process execution domain*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.274 

[[sys_pipe]]
sys_pipe::

  _sys_pipe( int *filedes)_ + 
 *create an interprocess channel*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.49 

[[sys_pipe2]]
sys_pipe2::

  _sys_pipe2( int *filedes,  int flags)_ + 
 *create pipe*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.562 

[[sys_pivot_root]]
sys_pivot_root::

  _sys_pivot_root( const char *new_root,  const char *put_old)_ + 
 *change the root mount*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.314 

[[sys_poll]]
sys_poll::

  _sys_poll( struct poll_fd *ufds,  unsigned int nfds,  long timeout_msecs)_ + 
 *input/output multiplexing*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.19 

[[sys_ppoll]]
sys_ppoll::

  _sys_ppoll( struct pollfd *ufds,  unsigned int nfds,  struct timespec *tsp,  const sigset_t *sigmask,  size_t sigsetsize)_ + 
 *wait for some event on a file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.518 

[[sys_prctl]]
sys_prctl::

  _sys_prctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_ + 
 *operations on a process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.318 

[[sys_pread64]]
sys_pread64::

  _sys_pread64( unsigned long fd,  char *buf,  size_t count,  loff_t pos)_ + 
 *read from or write to a file descriptor at a given offset*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.39 

[[sys_preadv]]
sys_preadv::

  _sys_preadv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_ + 
 *read or write data into multiple buffers*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.566 

[[sys_prlimit64]]
sys_prlimit64::

  _sys_prlimit64( pid_t pid,  unsigned int resource,  const struct rlimit64 *new_rlim,  struct rlimit64 *old_rlim)_ + 
 *get/set resource limits*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.580 

[[sys_process_vm_readv]]
sys_process_vm_readv::

  _sys_process_vm_readv( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovec *rvec,  unsigned long riovcnt,  unsigned long flags)_ + 
 *transfer data between process address spaces*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.596 

[[sys_process_vm_writev]]
sys_process_vm_writev::

  _sys_process_vm_writev( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovcc *rvec,  unsigned long riovcnt,  unsigned long flags)_ + 
 *transfer data between process address spaces*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.598 

[[sys_pselect6]]
sys_pselect6::

  _sys_pselect6( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timespec *tsp,  void *sig)_ + 
 *select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \-*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.516 

[[sys_ptrace]]
sys_ptrace::

  _sys_ptrace( long request,  long pid,  unsigned long addr,  unsigned long data)_ + 
 *process trace*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.208 

[[sys_pwrite64]]
sys_pwrite64::

  _sys_pwrite64( unsigned int fd,  const char *buf,  size_t count,  loff_t pos)_ + 
 *read from or write to a file descriptor at a given offset*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.41 

[[sys_pwritev]]
sys_pwritev::

  _sys_pwritev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_ + 
 *read or write data into multiple buffers*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.568 

[[sys_quotactl]]
sys_quotactl::

  _sys_quotactl( unsigned int cmd,  const char *special,  qid_t id,  void *addr)_ + 
 *manipulate disk quotas*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.356 

[[sys_read]]
sys_read::

  _sys_read( unsigned int fd,  char *buf,  size_t count)_ + 
 *read from a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.5 

[[sys_readahead]]
sys_readahead::

  _sys_readahead( int fd,  loff_t offset,  size_t count)_ + 
 *initiate file readahead into page cache*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.360 

[[sys_readlink]]
sys_readlink::

  _sys_readlink( const char *path,  char *buf,  int bufsiz)_ + 
 *read the contents of a symbolic link*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.184 

[[sys_readlinkat]]
sys_readlinkat::

  _sys_readlinkat( int dfd,  const char *pathname,  char *buf,  int bufsiz)_ + 
 *read value of a symbolic link*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.510 

[[sys_readv]]
sys_readv::

  _sys_readv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_ + 
 *read a vector*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.43 

[[sys_reboot]]
sys_reboot::

  _sys_reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_ + 
 *reboot or enable/disable Ctrl-Alt-Del*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.342 

[[sys_recvfrom]]
sys_recvfrom::

  _sys_recvfrom( int fd,  void *ubuf,  size_t size,  unsigned flags,  struct sockaddr *addr,  int *addr_len)_ + 
 *receive a message from a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.95 

[[sys_recvmmsg]]
sys_recvmmsg::

  _sys_recvmmsg( int fd,  struct msghdr *mmsg,  unsigned int vlen,  unsigned int flags,  struct timespec *timeout)_ + 
 *receive multiple messages on a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.574 

[[sys_recvmsg]]
sys_recvmsg::

  _sys_recvmsg( int fd,  struct msghdr *msg,  unsigned int flags)_ + 
 *receive a message from a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.99 

[[sys_remap_file_pages]]
sys_remap_file_pages::

  _sys_remap_file_pages( unsigned long start,  unsigned long size,  unsigned long prot,  unsigned long pgoff,  unsigned long flags)_ + 
 *create a nonlinear file mapping*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.410 

[[sys_removexattr]]
sys_removexattr::

  _sys_removexattr( const char *pathname,  const char *name)_ + 
 *remove an extended attribute*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.380 

[[sys_rename]]
sys_rename::

  _sys_rename( const char *oldname,  const char *newname)_ + 
 *rename file relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.170 

[[sys_renameat]]
sys_renameat::

  _sys_renameat( int oldfd,  const char *oldname,  int newfd,  const char *newname)_ + 
 *change the name or location of a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.504 

[[sys_renameat2]]
sys_renameat2::

  _sys_renameat2( int olddfd,  const char  *oldname,  int newdfd,  const char  *newname,  unsigned int flags)_ + 
 *change the name or location of a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.608 

[[sys_request_key]]
sys_request_key::

  _sys_request_key( const char *_type,  const char *_description,  const char *_callout_info,  key_serial_t destringid)_ + 
 *request a key from the kernel's key management facility*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.474 

[[sys_restart_syscall]]
sys_restart_syscall::

  _sysSYSDEF_syscall(_restart_syscall,0)_ + 
 *restart a system call after interruption by a stop signal*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.416 

[[sys_rmdir]]
sys_rmdir::

  _sys_rmdir( const char *pathname)_ + 
 *remove a directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.174 

[[sys_rt_sigaction]]
sys_rt_sigaction::

  _sys_rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)_ + 
 *examine and change a signal action*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.31 

[[sys_rt_sigpending]]
sys_rt_sigpending::

  _sys_rt_sigpending( sigset_t *set,  size_t sigsetsize)_ + 
 *examine pending signals*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.260 

[[sys_rt_sigprocmask]]
sys_rt_sigprocmask::

  _sys_rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)_ + 
 *examine and change blocked signals*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.33 

[[sys_rt_sigqueueinfo]]
sys_rt_sigqueueinfo::

  _sys_rt_sigqueueinfo( pid_t pid,  int sig,  siginfo_t *uinfo)_ + 
 *queue a signal and data*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.264 

[[sys_rt_sigreturn]]
sys_rt_sigreturn::

  _sys_rt_sigreturn( unsigned long __unused)_ + 
 *return from signal handler and cleanup stack frame*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.35 

[[sys_rt_sigsuspend]]
sys_rt_sigsuspend::

  _sys_rt_sigsuspend( sigset_t *unewset,  size_t sigsetsize)_ + 
 *wait for a signal*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.266 

[[sys_rt_sigtimedwait]]
sys_rt_sigtimedwait::

  _sys_rt_sigtimedwait( const sigset_t *uthese,  siginfo_t *uinfo,  const struct timespec *uts,  size_t sigsetsize)_ + 
 *synchronously wait*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.262 

[[sys_rt_tgsigqueueinfo]]
sys_rt_tgsigqueueinfo::

  _sys_rt_tgsigqueueinfo( pid_t tgid,  pid_t pid,  int sig,  siginfo_t *uinfo)_ + 
 *queue a signal and data*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.570 

[[sys_sched_get_priority_max]]
sys_sched_get_priority_max::

  _sys_sched_get_priority_max( int policy)_ + 
 *get priority limits*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.296 

[[sys_sched_get_priority_min]]
sys_sched_get_priority_min::

  _sys_sched_get_priority_min( int policy)_ + 
 *get static priority range*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.298 

[[sys_sched_getaffinity]]
sys_sched_getaffinity::

  _sys_sched_getaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_ + 
 *set and get a thread's CPU affinity mask*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.394 

[[sys_sched_getattr]]
sys_sched_getattr::

  _sys_sched_getattr( pid_t pid,  struct sched_attr  *attr,  unsigned int size,  unsigned int flags)_ + 
 *sched_setattr, sched_getattr \-*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.606 

[[sys_sched_getparam]]
sys_sched_getparam::

  _sys_sched_getparam( pid_t pid,  struct sched_param *param)_ + 
 *get scheduling parameters*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.290 

[[sys_sched_getscheduler]]
sys_sched_getscheduler::

  _sys_sched_getscheduler( pid_t pid)_ + 
 *get scheduling policy*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.294 

[[sys_sched_rr_get_interval]]
sys_sched_rr_get_interval::

  _sys_sched_rr_get_interval( pid_t pid,  struct timespec *interval)_ + 
 *get execution time limits*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.300 

[[sys_sched_setaffinity]]
sys_sched_setaffinity::

  _sys_sched_setaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_ + 
 *set and get a thread's CPU affinity mask*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.392 

[[sys_sched_setattr]]
sys_sched_setattr::

  _sys_sched_setattr( pid_t pid,  struct sched_attr  *attr,  unsigned int flags)_ + 
 *sched_setattr, sched_getattr \-*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.604 

[[sys_sched_setparam]]
sys_sched_setparam::

  _sys_sched_setparam( pid_t pid,  struct sched_param *param)_ + 
 *set scheduling parameters*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.288 

[[sys_sched_setscheduler]]
sys_sched_setscheduler::

  _sys_sched_setscheduler( pid_t pid,  int policy,  struct sched_param *param)_ + 
 *set scheduling policy and parameters*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.292 

[[sys_sched_yield]]
sys_sched_yield::

  _sysSYSDEF_syscall(_sched_yield,0)_ + 
 *yield the processor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.53 

[[sys_seccomp]]
sys_seccomp::

  _sys_seccomp( unsigned int op,  unsigned int flags,  const char  *uargs)_ + 
 *operate on Secure Computing state of the process*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.610 

[[sys_select]]
sys_select::

  _sys_select( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timeval *tvp)_ + 
 *synchronous I/O multiplexing*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.51 

[[sys_semctl]]
sys_semctl::

  _sys_semctl( int semid,  int semnum,  int cmd,  semun_u arg)_ + 
 *XSI semaphore control operations*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.138 

[[sys_semget]]
sys_semget::

  _sys_semget( key_t key,  int nsems,  int semflg)_ + 
 *get set of XSI semaphores*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.134 

[[sys_semop]]
sys_semop::

  _sys_semop( int semid,  struct sembuf *tsops,  unsigned nsops)_ + 
 *XSI semaphore operations*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.136 

[[sys_semtimedop]]
sys_semtimedop::

  _sys_semtimedop( int semid,  struct sembuf *tsops,  unsigned nsops,  const struct timespec *timeout)_ + 
 *System V semaphore operations*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.418 

[[sys_sendfile]]
sys_sendfile::

  _sys_sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_ + 
 *transfer data between file descriptors*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.85 

[[sys_sendmmsg]]
sys_sendmmsg::

  _sys_sendmmsg( int fd,  struct mmsghdr *mmsg,  unsigned int vlen,  unsigned int flags)_ + 
 *send multiple messages on a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.590 

[[sys_sendmsg]]
sys_sendmsg::

  _sys_sendmsg( int fd,  struct msghdr *msg,  unsigned flags)_ + 
 *send a message on a socket using a message structure*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.97 

[[sys_sendto]]
sys_sendto::

  _sys_sendto( int fd,  void *buff,  size_t len,  unsigned flags,  struct sockaddr *addr,  int addr_len)_ + 
 *send a message on a socket*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.93 

[[sys_set_mempolicy]]
sys_set_mempolicy::

  _sys_set_mempolicy( int mode,  unsigned long *nmask,  unsigned long maxnode)_ + 
 *set default NUMA memory policy for a thread and its children*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.452 

[[sys_set_robust_list]]
sys_set_robust_list::

  _sys_set_robust_list( struct robust_list_head *head,  size_t len)_ + 
 *get/set list of robust futexes*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.522 

[[sys_set_tid_address]]
sys_set_tid_address::

  _sys_set_tid_address( int *tidptr)_ + 
 *set pointer to thread ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.414 

[[sys_setdomainname]]
sys_setdomainname::

  _sys_setdomainname( char *name,  int len)_ + 
 *get/set NIS domain name*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.346 

[[sys_setfsgid]]
sys_setfsgid::

  _sys_setfsgid( gid_t gid)_ + 
 *set group identity used for filesystem checks*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.252 

[[sys_setfsuid]]
sys_setfsuid::

  _sys_setfsuid( uid_t uid)_ + 
 *set user identity used for filesystem checks*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.250 

[[sys_setgid]]
sys_setgid::

  _sys_setgid( gid_t gid)_ + 
 *set-group-ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.218 

[[sys_setgroups]]
sys_setgroups::

  _sys_setgroups( int gidsetsize,  gid_t *grouplist)_ + 
 *get/set list of supplementary group IDs*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.238 

[[sys_sethostname]]
sys_sethostname::

  _sys_sethostname( char *name,  int len)_ + 
 *get/set hostname*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.344 

[[sys_setitimer]]
sys_setitimer::

  _sys_setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_ + 
 *set the value of an interval timer*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.81 

[[sys_setns]]
sys_setns::

  _sys_setns( int fd,  int nstype)_ + 
 *reassociate thread with a namespace*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.592 

[[sys_setpgid]]
sys_setpgid::

  _sys_setpgid( pid_t pid,  pid_t pgid)_ + 
 *set process group ID for job control*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.224 

[[sys_setpriority]]
sys_setpriority::

  _sys_setpriority( int which,  int who,  int niceval)_ + 
 *set the nice value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.286 

[[sys_setregid]]
sys_setregid::

  _sys_setregid( gid_t rgid,  gid_t egid)_ + 
 *set real and effective group IDs*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.234 

[[sys_setresgid]]
sys_setresgid::

  _sys_setresgid( gid_t rgid,  gid_t egid,  gid_t sgid)_ + 
 *set real, effective and saved user or group ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.244 

[[sys_setresuid]]
sys_setresuid::

  _sys_setresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_ + 
 *set real, effective and saved user or group ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.240 

[[sys_setreuid]]
sys_setreuid::

  _sys_setreuid( uid_t ruid,  uid_t euid)_ + 
 *set real and effective user IDs*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.232 

[[sys_setrlimit]]
sys_setrlimit::

  _sys_setrlimit( unsigned int resource,  struct rlimit *rlim)_ + 
 *control maximum resource consumption*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.324 

[[sys_setsid]]
sys_setsid::

  _sysSYSDEF_syscall(_setsid,0)_ + 
 *create session and set process group ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.230 

[[sys_setsockopt]]
sys_setsockopt::

  _sys_setsockopt( int fd,  int level,  int optname,  char *optval,  int optlen)_ + 
 *set the socket options*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.113 

[[sys_settimeofday]]
sys_settimeofday::

  _sys_settimeofday( struct timeval *tv,  struct timezone *tz)_ + 
 *get / set time*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.332 

[[sys_setuid]]
sys_setuid::

  _sys_setuid( uid_t uid)_ + 
 *set user ID*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.216 

[[sys_setxattr]]
sys_setxattr::

  _sys_setxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_ + 
 *set an extended attribute value*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.362 

[[sys_shmat]]
sys_shmat::

  _sys_shmat( int shmid,  char *shmaddr,  int shmflg)_ + 
 *XSI shared memory attach operation*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.65 

[[sys_shmctl]]
sys_shmctl::

  _sys_shmctl( int shmid,  int cmd,  struct shmid_ds *buf)_ + 
 *XSI shared memory control operations*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.67 

[[sys_shmdt]]
sys_shmdt::

  _sys_shmdt( char *shmaddr)_ + 
 *XSI shared memory detach operation*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.140 

[[sys_shmget]]
sys_shmget::

  _sys_shmget( key_t key,  size_t size,  int shmflg)_ + 
 *get an XSI shared memory segment*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.63 

[[sys_shutdown]]
sys_shutdown::

  _sys_shutdown( int fd,  int how)_ + 
 *shut down socket send and receive operations*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.101 

[[sys_sigaltstack]]
sys_sigaltstack::

  _sys_sigaltstack( const stack_t *uss,  stack_t *uoss)_ + 
 *set and get signal alternate stack context*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.268 

[[sys_signalfd]]
sys_signalfd::

  _sys_signalfd( int ufd,  sigset_t *user_mask,  size_t sizemask)_ + 
 *create a file descriptor for accepting signals*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.540 

[[sys_signalfd4]]
sys_signalfd4::

  _sys_signalfd4( int ufd,  sigset_t *user_mask,  size_t sizemask,  int flags)_ + 
 *create a file descriptor for accepting signals*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.554 

[[sys_socket]]
sys_socket::

  _sys_socket( int family,  int type,  int protocol)_ + 
 *create an endpoint for communication*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.87 

[[sys_socketpair]]
sys_socketpair::

  _sys_socketpair( int family,  int type,  int protocol,  int *usockvec)_ + 
 *create a pair of connected sockets*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.111 

[[sys_splice]]
sys_splice::

  _sys_splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)_ + 
 *splice data to/from a pipe*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.526 

[[sys_stat]]
sys_stat::

  _sys_stat( const char *filename,  struct stat *statbuf)_ + 
 *get file status*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.13 

[[sys_statfs]]
sys_statfs::

  _sys_statfs( const char *pathname,  struct statfs *buf)_ + 
 *get filesystem statistics*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.278 

[[sys_swapoff]]
sys_swapoff::

  _sys_swapoff( const char *specialfile)_ + 
 *start/stop swapping to file/device*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.340 

[[sys_swapon]]
sys_swapon::

  _sys_swapon( const char *specialfile,  int swap_flags)_ + 
 *start/stop swapping to file/device*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.338 

[[sys_symlink]]
sys_symlink::

  _sys_symlink( const char *oldname,  const char *newname)_ + 
 *make a symbolic link relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.182 

[[sys_symlinkat]]
sys_symlinkat::

  _sys_symlinkat( const char *oldname,  int newfd,  const char *newname)_ + 
 *make a new name for a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.508 

[[sys_sync]]
sys_sync::

  _sysSYSDEF_syscall(_sync,0)_ + 
 *schedule file system updates*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.328 

[[sys_sync_file_range]]
sys_sync_file_range::

  _sys_sync_file_range( long fd,  loff_t offset,  loff_t bytes,  long flags)_ + 
 *sync a file segment with disk*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.530 

[[sys_syncfs]]
sys_syncfs::

  _sys_syncfs( int fd)_ + 
 *commit filesystem caches to disk*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.588 

[[sys_sysfs]]
sys_sysfs::

  _sys_sysfs( int option,  unsigned long arg1,  unsigned long arg2)_ + 
 *get filesystem type information*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.282 

[[sys_sysinfo]]
sys_sysinfo::

  _sys_sysinfo( struct sysinfo *info)_ + 
 *return system information*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.204 

[[sys_syslog]]
sys_syslog::

  _sys_syslog( int type,  char *buf,  int len)_ + 
 *log a message*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.212 

[[sys_tee]]
sys_tee::

  _sys_tee( int fdin,  int fdout,  size_t len,  unsigned int flags)_ + 
 *duplicating pipe content*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.528 

[[sys_tgkill]]
sys_tgkill::

  _sys_tgkill( pid_t tgid,  pid_t pid,  int sig)_ + 
 *send a signal to a thread*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.446 

[[sys_time]]
sys_time::

  _sys_time( time_t *tloc)_ + 
 *get time*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.388 

[[sys_timer_create]]
sys_timer_create::

  _sys_timer_create( const clockid_t which_clock,  struct sigevent *timer_event_spec,  timer_t *created_timer_id)_ + 
 *create a per-process timer*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.422 

[[sys_timer_delete]]
sys_timer_delete::

  _sys_timer_delete( timer_t timer_id)_ + 
 *delete a per-process timer*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.430 

[[sys_timer_getoverrun]]
sys_timer_getoverrun::

  _sys_timer_getoverrun( timer_t timer_id)_ + 
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.428 

[[sys_timer_gettime]]
sys_timer_gettime::

  _sys_timer_gettime( timer_t timer_id,  struct itimerspec *setting)_ + 
 *arm/disarm and fetch*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.426 

[[sys_timer_settime]]
sys_timer_settime::

  _sys_timer_settime( timer_t timer_id,  int flags,  const struct itimerspec *new_setting,  struct itimerspec *old_setting)_ + 
 *arm/disarm and fetch*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.424 

[[sys_timerfd_create]]
sys_timerfd_create::

  _sys_timerfd_create( int clockid,  int flags)_ + 
 *timerfd_create, timerfd_settime, timerfd_gettime \-*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.542 

[[sys_timerfd_gettime]]
sys_timerfd_gettime::

  _sys_timerfd_gettime( int ufd,  struct itimerspec *otmr)_ + 
 *timerfd_create, timerfd_settime, timerfd_gettime \-*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.550 

[[sys_timerfd_settime]]
sys_timerfd_settime::

  _sys_timerfd_settime( int ufd,  int flags,  const struct itimerspec *utmr,  struct itimerspec *otmr)_ + 
 *timerfd_create, timerfd_settime, timerfd_gettime \-*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.548 

[[sys_times]]
sys_times::

  _sys_times( struct sysinfo *info)_ + 
 *get process and waited-for child process times*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.206 

[[sys_tkill]]
sys_tkill::

  _sys_tkill( pid_t pid,  int sig)_ + 
 *send a signal to a thread*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.386 

[[sys_truncate]]
sys_truncate::

  _sys_truncate( const char *path,  long length)_ + 
 *truncate a file to a specified length*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.158 

[[sys_umask]]
sys_umask::

  _sys_umask( int mask)_ + 
 *set and get the file mode creation mask*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.196 

[[sys_umount2]]
sys_umount2::

  _sys_umount2( const char *target,  int flags)_ + 
 *unmount filesystem*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.336 

[[sys_uname]]
sys_uname::

  _sys_uname( struct old_utsname *name)_ + 
 *get the name of the current system*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.132 

[[sys_unlink]]
sys_unlink::

  _sys_unlink( const char *pathname)_ + 
 *remove a directory entry relative to directory file descriptor*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.180 

[[sys_unlinkat]]
sys_unlinkat::

  _sys_unlinkat( int dfd,  const char *pathname,  int flag)_ + 
 *delete a name and possibly the file it refers to*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.502 

[[sys_unshare]]
sys_unshare::

  _sys_unshare( unsigned long unshare_flags)_ + 
 *disassociate parts of the process execution context*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.520 

[[sys_ustat]]
sys_ustat::

  _sys_ustat( unsigned dev,  struct ustat *ubuf)_ + 
 *get filesystem statistics*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.276 

[[sys_utime]]
sys_utime::

  _sys_utime( char *filename,  struct utimbuf *times)_ + 
 *set file access and modification times*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.270 

[[sys_utimensat]]
sys_utimensat::

  _sys_utimensat( int dfd,  const char *filename,  struct timespec *utimes, int flags)_ + 
 *set file access and modification times relative to directory*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.536 

[[sys_utimes]]
sys_utimes::

  _sys_utimes( char *filename,  struct timeval *utimes)_ + 
 *change file last access and modification times*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.448 

[[sys_vfork]]
sys_vfork::

  _sysSYSDEF_syscall(_vfork,0)_ + 
 *create a child process and block parent*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.121 

[[sys_vhangup]]
sys_vhangup::

  _sysSYSDEF_syscall(_vhangup,0)_ + 
 *virtually hangup the current terminal*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.310 

[[sys_vmsplice]]
sys_vmsplice::

  _sys_vmsplice( int fd,  const struct iovec *iov,  unsigned long nr_segs, unsigned int flags)_ + 
 *splice user pages to/from a pipe*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.532 

[[sys_wait4]]
sys_wait4::

  _sys_wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)_ + 
 *wait for process to change state, BSD style*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.128 

[[sys_waitid]]
sys_waitid::

  _sys_waitid( int which,  pid_t upid,  struct siginfo *infop,  int options,  struct rusage *ru)_ + 
 *wait for a child process to change state*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.470 

[[sys_write]]
sys_write::

  _sys_write( unsigned int fd,  const char *buf,  size_t count)_ + 
 *write on a file*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.7 

[[sys_writev]]
sys_writev::

  _sys_writev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_ + 
 *write a vector*
link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.45 