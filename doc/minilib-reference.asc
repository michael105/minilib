 minilib reference
===================




The given sizes are estimations, each function added as single function within
a binary that much bytes to the overall size.

It is however not possible to give exact numbers, these depend on how much the compiler
can optimize for each call. What is different each time, depending on the circumstances.

To complicate things more, some functions will be inlined, others will be reused.

And, the choosen linker script will have it's (sometimes surprising) influence.


 Configuration
---------------

Before the include of minilib.h, the minilib has to be configured.

The proposed way is to use the supplied script mini-gcc, +
which translates config options to define flags, +
and pipes the minilib header to gcc.

The config file is a bash script and can be a separate file, 
or within one of the source files.

An example is given below:

--------------------
#if 0  // has to be the first line

mini_start
mini_puts

INCLUDESRC
# this is a comment.
# INCLUDESRC has to be defined for one sourcefile.
# without it only the defines, and no implementations are parsed.

return  
// return, and the #endif statement are the last lines of the config
#endif

int main(int argc, char *argv[] ){
...
--------------------

Only functions defined are going to be built.

There are several examples given within the folder examples,+
the files within the folder test are there for regression tests,+
but might also be helpful.

To compile a c source file with embedded configuration (as in the example above),+
type 'mini-gcc --config example.c -o example example.c'. +
(Shortcut 'mini-gcc -mlc example.c')

(mini-gcc needs to be in the standard search path)+
If you'd like to "install" the mini-gcc, simply copy the script mini-gcc into /usr/local/bin,+ 
or wherever your executables live and can be found.

The minilib itself, as well as the supllied linker scripts are embedded into mini-gcc,+
and extracted and piped to gcc on demand.

(There are compatibility headers provided, e.g. stdio.h;+
these are however not stable and will most probably not work.+
I'm going to update them, as soon other and more important things are finished.)


In addition to the switches, which are built of the function's name and the prefix 'mini_'; +
e.g. 'mini_puts', these switches are defined for the configuration of minilib:


mini_start:: 
	Built the start routine, which is needed for the execution of the binary.


mini_buf 512::
	the buf size in Bytes (here 512Bytes), which is used by minilib for input/output functions,
	the globals and malloc/free. 
	Uncomment this, if you do not need globals or functions,
	depending on the buffer.


globals_on_stack::
  put the minibuf and all globals onto the stack
	(this enables to omit all sections besides text and stack of the binary,
	when nowhere else globals (ans static variables) are used,
	for aggressive size optimization)
	The address of the globals is going to be stored within a fixed cpu register. (r15 at amd64)
	

mini_syscalls::
	define the syscall wrappers, starting with 'sys_'


HEADERGUARDS::
	define the headerguards, which hopefully prevent the inclusion
	of the standard library headers.


OPTFLAG -Os::
  optimization Flag. Os,O1,O2 should be save. O3 causes sometimes troubles


   e.g. OPTFLAG '-g -O0'
   (compile with debug info)


STRIPFLAG::
  stripflag ( defaults to -s) +
	Leaving 'STRIPFLAG' alone removes the flag parameter from gcc's commandline.


INCLUDESRC::
  Build minilib with source. +
	Without this switch, only defines and declarations are built +
	When building with several object files, most probably you should +
	enable this flag only for one object file. +
	It's also possible to pass the switch via a define flag to gcc. +
	('-DINCLUDESRC')


LDSCRIPT default::
  
	The ldscript to use +
  Can be one of: default, onlytext, textandbss +
  Defines, which executable sections are going to be built. +
  *default*: .text .data .rodata .bss (.stack) +
  *onlytext*: .text (.stack) +
  *textandbss*: .text .bss (.stack)


SHRINKELF::
  Shrink the compiled binary with shrinkelf. +
	Aggressively strip the elf headers.


DEBUG::
  generate debug info (-O0 -g). Overwrites OPTFLAG, STRIPFLAG and SHRINKELF


:toc:





 conversions
-------------


_itobin::

  _int _itobin(int i, char*buf, int prec, int groups )_
 +
  Size: ~188B  link:../src/itobin.c[../src/itobin.c] l.8 

_itohex::

  _int _itohex(int i,char* buf,int padding, int capitals)_
 +
  Size: ~250B  link:../src/itohex.c[../src/itohex.c] l.6 

atoi::

  _int atoi(const char *c)_
 +
  convert a string to an integer +
 Size: ~32B  link:../src/atoi.c[../src/atoi.c] l.6  manpage: link:manpages/stdlib/atoi.3.rst[atoi] +


atol::

  _long atol(const char *c)_
 +
  convert a string to a long integer +
 Size: ~108B  link:../src/atoi.c[../src/atoi.c] l.43  manpage: link:manpages/stdlib/atol.3.rst[atol] +


dtodec::

  _int dtodec(double d, char* buf, int precision)_
 +
  Defines: uitodec +
 Size: ~760B  link:../src/dtodec.c[../src/dtodec.c] l.10 

itoHEX::

  _int itoHEX(int i,char* buf,int padding)_
 +
  Size: ~250B  link:../src/itohex.c[../src/itohex.c] l.56 

itobin::

  _#define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )_
 +
  link:../src/itobin.c[../src/itobin.c] l.41 

itodec::

  _int itodec(int i, char *buf, int prec, char limiter )_
 +
  Defines: uitodec +
 Size: ~555B  link:../src/itodec.c[../src/itodec.c] l.116 

itohex::

  _int itohex(int i,char* buf,int padding)_
 +
  Size: ~247B  link:../src/itohex.c[../src/itohex.c] l.49 

ltodec::

  _int ltodec(long i, char *buf, int prec, char limiter )_
 +
  Size: ~323B  link:../src/ltodec.c[../src/ltodec.c] l.75 

strtol::

  _long int strtol(const char *c, const char **endp, int base)_
 +
  convert a string to a long integer +
 conversion +
  doesn't check for overflow(!) +
  Size: ~252B  link:../src/strtol.c[../src/strtol.c] l.5  manpage: link:manpages/stdlib/strtol.3.rst[strtol] +


uitodec::

  _int uitodec(unsigned int i, char *buf, int prec, char limiter )_
 +
  convert int to string. +
  prec: precision, e.g. 4=> 0087  +
  link:../src/itodec.c[../src/itodec.c] l.8 

ultodec::

  _int ultodec(unsigned long ui, char *buf, int prec, char limiter )_
 +
  Size: ~293B  link:../src/ltodec.c[../src/ltodec.c] l.6 

 directories
-------------


basename::

  _char *basename(char *path)_
 +
  Defines: strlen +
 return the last component of a pathname +
 Size: ~151B  link:../src/basename.c[../src/basename.c] l.29  manpage: link:manpages/gen/basename.3.rst[basename] +


chdir::

  _int chdir(const char* path)_
 +
  change working directory +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.107  manpage: link:manpages/sys/chdir.2.rst[chdir] +


dirbuf::

  __
 +
  the switch for defining the dirbuf. +
  used internally +
  link:../include/dirent.h[../include/dirent.h] l.7 

dirbufsize ::

  _#ifndef mini_dirbufsize_
 +
  the dir stream bufsize +
  The size of the buffer can be changed by setting mini_dirbufsize +
  to it's size in Bytes. (default 2048) +
  The buffer is allocated via malloc, +
  therefore mini_buf must be set to a value greater than dirbufsize +
  link:../include/dirent.h[../include/dirent.h] l.22 

dirfd::

  _int dirfd(DIR *d)_
 +
  extract the file descriptor used by a DIR stream +
 link:../src/dirent/dirfd.c[../src/dirent/dirfd.c] l.2  manpage: link:manpages/gen/directory.3.rst[dirfd] +


dirname::

  _char *dirname(char *s)_
 +
  Defines: strlen +
 report the parent directory name of a file pathname +
 Size: ~179B  link:../src/dirname.c[../src/dirname.c] l.8  manpage: link:manpages/gen/dirname.3.rst[dirname] +


fstat::

  _int fstat(int fd,struct stat* statbuf)_
 +
  get file status +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.105  manpage: link:manpages/sys/stat.2.rst[fstat] +


getcwd::

  _int getcwd( char *buf,  unsigned long size)_
 +
  get the pathname of the current working directory +
 Size: ~61B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.116  manpage: link:manpages/gen/getcwd.3.rst[getcwd] +


getdents::

  _int getdents( unsigned int fd, struct dirent *direntry, unsigned int count )_
 +
  get directory entries +
 Size: ~65B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.100  manpage: link:manpages/sys/getdirentries.2.rst[getdents] +


mkdir::

  _int mkdir( const char *pathname, int mode)_
 +
  make a directory relative to directory file descriptor +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.154  manpage: link:manpages/sys/mkdir.2.rst[mkdir] +


opendir::

  _DIR *opendir(const char *name )_
 +
  Defines: dirbuf open brk close write +
 open directory associated with file descriptor +
 Size: ~281B  link:../src/dirent/opendir.c[../src/dirent/opendir.c] l.24  manpage: link:manpages/gen/directory.3.rst[opendir] +


opendirp::

  _DIR *opendirp(const char *name, DIR *dir)_
 +
  Defines: open brk dirbuf close +
 link:../src/dirent/opendir.c[../src/dirent/opendir.c] l.10 

readdir::

  _struct dirent *readdir(DIR *dir)_
 +
  Defines: getdents dirbuf +
 read a directory +
 read a directory. +
  return the next dirent, or 0, if the end is reached. +
  return 0 on error and set errno, +
  if mini_errno is not defined, return -errno on error +
  Size: ~133B  link:../src/dirent/readdir.c[../src/dirent/readdir.c] l.10  manpage: link:manpages/gen/directory.3.rst[readdir] +


rewinddir::

  _void rewinddir(DIR *dir)_
 +
  reset the position of a directory stream to the beginning +
 Size: ~80B  link:../src/dirent/rewinddir.c[../src/dirent/rewinddir.c] l.2  manpage: link:manpages/gen/directory.3.rst[rewinddir] +


rmdir::

  _int rmdir( const char *pathname)_
 +
  remove a directory +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.155  manpage: link:manpages/sys/rmdir.2.rst[rmdir] +


scandir::

  _int scandir(const char *path, struct dirent **listing[], int (*fp_select)(const struct dirent *),	int (*cmp)(const struct dirent **, const struct dirent **))_
 +
  Defines: write memcpy qsort seterrno getbrk sbrk brk open dirbuf errno +
 scan a directory +
 list files and dirs in a directory +
  +
  This implementation uses malloc_brk() for the dynamic allocation +
  of the listing, and tries to do as less copies as possible. +
  The dynamically allocated space for the result list (**listing[]) +
  is guaranteed to be at one continuous memory location. +
  +
  if the select callback is 0, meaning all entries should be returned, +
  There are no copies done at all,  +
  besides the copying from kernelspace to userspace. +
  +
  To free the space, allocated for the listing, +
  either call free_brk(), +
  when no other allocations via malloc_brk took place. +
  +
  Or save the brk before you call scandir, +
  and restore it after the call. +
  (e.g.) +
  long savebrk=getbrk(); +
  int ret=scandir(...); +
  brk(savebrk); +
  Freeing single list entries might give unexpected results. +
  +
  returns the number of the read entries, +
  or the negative errno on error. +
  link:../src/dirent/scandir.c[../src/dirent/scandir.c] l.35  manpage: link:manpages/gen/scandir.3.rst[scandir] +


scandir_bufsize::

  _//#define mini_scandir_bufsize 4096_
 +
  the increment of the buffer of scandir in bytes for memory allocations +
  (default:4096) +
  link:../src/dirent/scandir.c[../src/dirent/scandir.c] l.4 

seekdir::

  _void seekdir(DIR *dir, long off)_
 +
  set the position of a directory stream +
 Size: ~100B  link:../src/dirent/seekdir.c[../src/dirent/seekdir.c] l.2  manpage: link:manpages/gen/directory.3.rst[seekdir] +


telldir::

  _long telldir(DIR *dir)_
 +
  current location of a named directory stream +
 Size: ~32B  link:../src/dirent/telldir.c[../src/dirent/telldir.c] l.2  manpage: link:manpages/gen/directory.3.rst[telldir] +


 errno
-------


errno::

  _#ifdef mini_errno_
 +
  error return value +
 set errno, but only when errno is defined. +
  link:../include/seterrno.h[../include/seterrno.h] l.3 

errno_str::

  _char *errno_str(int err)_
 +
  convert errno to str, with 3 chars length +
  ending the string (global)  +
  with two \0\0, when errno<100 +
  errnum must be <200. +
  Size: ~123B  link:../src/errno_str.c[../src/errno_str.c] l.7 

exit_errno::

  _void exit_errno( int errnum )_
 +
  Defines: write errno_str execve exit +
 exit, and execute /bin/errno +
  this is intended to give a error message for the  +
  given errno num. +
  Instead of having the error messages compiled  +
  into each binary, they can stay within one executable, "errno" +
  This spares about 4kB, but needs errno installed to /bin/errno +
  It's the drawback of not having a shared library, +
  where all executables would share the same errno messages +
  in memory. +
  On the other hand, a shared library would need to be installed +
  as well. +
  The supplied errno can be negative, +
  the absolute value is supplied to errno. +
  link:../src/exit_errno.c[../src/exit_errno.c] l.17 

perror::

  _void perror(const char *msg)_
 +
  Defines: write errno strerror fileno strlen +
 write error messages to standard error +
 Size: ~329B  link:../src/perror.c[../src/perror.c] l.4  manpage: link:manpages/string/strerror.3.rst[perror] +


strerror::

  _char* strerror( int errnum )_
 +
  link:../src/strerror.c[../src/strerror.c] l.7  manpage: link:manpages/string/string.3.rst[strerror] +


verbose_errstr::

  _const char* verbose_errstr(int num)_
 +
  verbose error (errno) string.  +
  this adds about 3.5kB to the compiled binary(!) +
  link:../include/errstr.h[../include/errstr.h] l.8 

verbose_errstr2::

  _const char* verbose_errstr2(int num)_
 +
  verbose error (errno) string.  +
  this adds about 3.5kB to the compiled binary(!) +
  Trying to shrink that here. +
  link:../include/errstr2.h[../include/errstr2.h] l.11 

 files
-------


_fopen::

  _FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f)_
 +
  Defines: open fileno close +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~316B  link:../src/fopen.c[../src/fopen.c] l.12 

access::

  _int access( const char *filename, int mode)_
 +
  determine accessibility of a file relative to directory file +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.157  manpage: link:manpages/sys/access.2.rst[access] +


chmod::

  _int chmod( const char *filename, mode_t mode)_
 +
  change mode of a file relative to directory file descriptor +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.187  manpage: link:manpages/sys/chmod.2.rst[chmod] +


chown::

  _int chown( const char *filename, uid_t user, gid_t group)_
 +
  change owner and group of a file relative to directory +
 Size: ~71B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.188  manpage: link:manpages/sys/chown.2.rst[chown] +


close::

  _int close( int fd )_
 +
  close a file descriptor +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.96  manpage: link:manpages/sys/close.2.rst[close] +


closedir::

  _int closedir(DIR *dir)_
 +
  Defines: getbrk brk +
 close a directory stream +
 Size: ~323B  link:../src/dirent/closedir.c[../src/dirent/closedir.c] l.6  manpage: link:manpages/gen/directory.3.rst[closedir] +


creat::

  _int volatile creat( const char *s, int mode )_
 +
  Defines: open +
 create a new file or rewrite an existing one +
 Size: ~124B  link:../src/open.c[../src/open.c] l.36  manpage: link:manpages/compat-43/creat.2.rst[creat] +


dup::

  _int dup(int fd)_
 +
  duplicate an open file descriptor +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.112  manpage: link:manpages/sys/dup.2.rst[dup] +


dup2::

  _int dup2(int oldfd, int newfd)_
 +
  duplicate a file descriptor +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.113  manpage: link:manpages/sys/dup.2.rst[dup2] +


dup3::

  _int dup3(int oldfd, int newfd, int flags)_
 +
  duplicate a file descriptor +
 Size: ~75B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.114  manpage: link:manpages/gen/dup3.3.rst[dup3] +


fchmod::

  _int fchmod( unsigned int fd, mode_t mode)_
 +
  change mode of a file +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.110  manpage: link:manpages/sys/chmod.2.rst[fchmod] +


fchown::

  _int fchown( unsigned int fd, uid_t user, gid_t group)_
 +
  change owner and group of a file +
 Size: ~75B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.109  manpage: link:manpages/sys/chown.2.rst[fchown] +


fcntl::

  _int fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)_
 +
  file control +
 Size: ~77B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.158  manpage: link:manpages/sys/fcntl.2.rst[fcntl] +


fsync::

  _int fsync(int a1 )_
 +
  synchronize changes to a file +
 Size: ~51B  link:../include/lseek.h[../include/lseek.h] l.22  manpage: link:manpages/sys/fsync.2.rst[fsync] +


ftruncate::

  _int ftruncate(unsigned int a1, unsigned int a2 )_
 +
  truncate a file to a specified length +
 Size: ~63B  link:../include/lseek.h[../include/lseek.h] l.21  manpage: link:manpages/sys/truncate.2.rst[ftruncate] +


link::

  _int link( const char *oldname, const char *newname)_
 +
  link one file to another file relative to two directory +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.118  manpage: link:manpages/sys/link.2.rst[link] +


lseek::

  _int lseek(unsigned int a1, int a2, int a3 )_
 +
  move the read/write file offset +
 Size: ~75B  link:../include/lseek.h[../include/lseek.h] l.19  manpage: link:manpages/sys/lseek.2.rst[lseek] +


open::

  _int volatile open( const char *s, int flags, ... )_
 +
  open file relative to directory file descriptor +
 open or create a file. +
  warning: when using the flag O_CREAT, +
  file permission flags have to be given +
  as third argument. Otherwise file permission +
  flags will be random. (I still do not know, what  +
  the flag showing up as "-T" means..) +
  Size: ~124B  link:../src/open.c[../src/open.c] l.19  manpage: link:manpages/sys/open.2.rst[open] +


readahead::

  _int readahead( int fd,  loff_t offset,  size_t count)_
 +
  initiate file readahead into page cache +
 Size: ~79B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.194 

rename::

  _int rename( const char* oldpath, const char* newpath )_
 +
  rename file relative to directory file descriptor +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.102  manpage: link:manpages/sys/rename.2.rst[rename] +


select::

  _int volatile  select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait)_
 +
  synchronous I/O multiplexing +
 Size: ~138B  link:../include/select.h[../include/select.h] l.9  manpage: link:manpages/sys/select.2.rst[select] +


sendfile::

  _int sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_
 +
  transfer data between file descriptors +
 Size: ~142B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.161  manpage: link:manpages/sys/sendfile.2.rst[sendfile] +


stat::

  _int stat(const char* filename,struct stat* statbuf)_
 +
  get file status +
 Size: ~49B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.106  manpage: link:manpages/sys/stat.2.rst[stat] +


symlink::

  _int symlink( const char *oldname,  const char *newname)_
 +
  make a symbolic link relative to directory file descriptor +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.119  manpage: link:manpages/sys/symlink.2.rst[symlink] +


umask::

  _int umask( int mask)_
 +
  set and get the file mode creation mask +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.186  manpage: link:manpages/sys/umask.2.rst[umask] +


unlink::

  _int unlink( const char* path)_
 +
  remove a directory entry relative to directory file descriptor +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.103  manpage: link:manpages/sys/unlink.2.rst[unlink] +


 input
-------


fgetc::

  _int fgetc(FILE *F)_
 +
  Defines: read fileno +
 get a byte from a stream +
 Size: ~57B  link:../include/fgetc.h[../include/fgetc.h] l.11  manpage: link:manpages/stdio/getc.3.rst[fgetc] +


fgets::

  _char* fgets(char *buf, int size, FILE* F)_
 +
  Defines: fileno read +
 get a string from a stream +
 link:../src/fgets.c[../src/fgets.c] l.6  manpage: link:manpages/stdio/fgets.3.rst[fgets] +


getc::

  _#define getc(F) fgetc(F)_
 +
  Defines: fileno read +
 get a byte from a stream +
 link:../include/fgetc.h[../include/fgetc.h] l.26  manpage: link:manpages/stdio/getc.3.rst[getc] +


getchar::

  _#define getchar() fgetc(0)_
 +
  Defines: read fileno +
 get a byte from a +
 link:../include/fgetc.h[../include/fgetc.h] l.29  manpage: link:manpages/stdio/getc.3.rst[getchar] +


gets::

  _#define gets(F) fgets(F,0xfffffff,stdin)_
 +
  Defines: read fileno +
 get a string from a +
 link:../src/fgets.c[../src/fgets.c] l.29  manpage: link:manpages/stdio/fgets.3.rst[gets] +


read::

  _int read( int fd, void *buf, int len )_
 +
  read from a file +
 Size: ~62B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.97  manpage: link:manpages/sys/read.2.rst[read] +


ungetc::

  _int ungetc(int c, FILE *F)_
 +
  push byte back into input stream +
 pushes one char back to the stream. +
  Overwrites a previously pushed char +
  (conforming to the posix spec)  +
  Size: ~66B  link:../include/fgetc.h[../include/fgetc.h] l.35  manpage: link:manpages/stdio/ungetc.3.rst[ungetc] +


 ipc
-----


kill::

  _int kill( pid_t pid,  int sig)_
 +
  send a signal to a process or a group of processes +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.125  manpage: link:manpages/sys/kill.2.rst[kill] +


mkfifo::

  _int mkfifo( const char* path, mode_t mode )_
 +
  make a FIFO special file relative to directory file descriptor +
 Size: ~68B  link:../include/mkfifo.h[../include/mkfifo.h] l.4  manpage: link:manpages/sys/mkfifo.2.rst[mkfifo] +


pipe::

  _int pipe( int *filedes)_
 +
  create an interprocess channel +
 Size: ~41B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.185  manpage: link:manpages/sys/pipe.2.rst[pipe] +


raise::

  _int raise(int signr)_
 +
  Defines: getpid +
 send a signal to the executing process +
 Size: ~68B  link:../src/sigaction.c[../src/sigaction.c] l.135  manpage: link:manpages/gen/raise.3.rst[raise] +


rt_sigaction::

  _int rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)_
 +
  examine and change a signal action +
 Size: ~132B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.134 

rt_sigprocmask::

  _int rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)_
 +
  examine and change blocked signals +
 Size: ~132B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.166 

rt_sigreturn::

  _int rt_sigreturn( unsigned long __unused)_
 +
  return from signal handler and cleanup stack frame +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.135 

sigaction::

  _int volatile sigaction(int sig, const struct sigaction *act, struct sigaction *oact)_
 +
  Defines: memcpy +
 examine and change a signal action +
 Size: ~215B  link:../src/sigaction.c[../src/sigaction.c] l.107  manpage: link:manpages/sys/sigaction.2.rst[sigaction] +


sigaddset::

  _int sigaddset(sigset_t *set, int sig)_
 +
  add a signal to a signal set +
 Size: ~85B  link:../src/sigaction.c[../src/sigaction.c] l.34  manpage: link:manpages/gen/sigsetops.3.rst[sigaddset] +


sigdelset::

  _int sigdelset(sigset_t *set, int sig)_
 +
  delete a signal from a signal set +
 Size: ~85B  link:../src/sigaction.c[../src/sigaction.c] l.58  manpage: link:manpages/gen/sigsetops.3.rst[sigdelset] +


sigemptyset::

  _int sigemptyset(sigset_t *set)_
 +
  initialize and empty a signal set +
 Size: ~41B  link:../src/sigaction.c[../src/sigaction.c] l.7  manpage: link:manpages/gen/sigsetops.3.rst[sigemptyset] +


sigfillset::

  _int sigfillset(sigset_t *set)_
 +
  initialize and fill a signal set +
 Size: ~41B  link:../src/sigaction.c[../src/sigaction.c] l.20  manpage: link:manpages/gen/sigsetops.3.rst[sigfillset] +


sigismember::

  _int sigismember(sigset_t *set, int sig)_
 +
  test for a signal in a signal set +
 Size: ~44B  link:../src/sigaction.c[../src/sigaction.c] l.75  manpage: link:manpages/gen/sigsetops.3.rst[sigismember] +


signal::

  _sighandler_t signal(int sig, sighandler_t func )_
 +
  Defines: write memcpy +
 signal management +
 Size: ~337B  link:../src/signal.c[../src/signal.c] l.8  manpage: link:manpages/gen/signal.3.rst[signal] +


sigprocmask::

  _int sigprocmask(int how, const sigset_t *set, sigset_t *oldset)_
 +
  examine and change blocked signals +
 Size: ~130B  link:../src/sigaction.c[../src/sigaction.c] l.52  manpage: link:manpages/sys/sigprocmask.2.rst[sigprocmask] +


wait::

  _pid_t wait(int *wstatus)_
 +
  Defines: wait4 +
 wait for a child process to stop or terminate +
 Size: ~122B  link:../src/wait.c[../src/wait.c] l.8  manpage: link:manpages/sys/wait.2.rst[wait] +


wait4::

  _int wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)_
 +
  wait for process to change state, BSD style +
 Size: ~133B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.156  manpage: link:manpages/sys/wait.2.rst[wait4] +


waitpid::

  _pid_t waitpid(pid_t pid, int *wstatus, int options)_
 +
  Defines: wait4 +
 wait for a child process to stop or terminate +
 Size: ~138B  link:../src/wait.c[../src/wait.c] l.16  manpage: link:manpages/sys/wait.2.rst[waitpid] +


 math
------


abs::

  _int abs(int i)_
 +
  return an integer absolute value +
 link:../include/math.h[../include/math.h] l.25  manpage: link:manpages/stdlib/abs.3.rst[abs] +


div::

  _div_t div(int numerator, int denominator)_
 +
  compute the quotient and remainder of an integer division +
 Size: ~84B  link:../include/math.h[../include/math.h] l.8  manpage: link:manpages/stdlib/div.3.rst[div] +


djb2_hash::

  _unsigned long djb2_hash(const unsigned char *str)_
 +
  hashes, from d.j.Bernstein +
  (http://www.cse.yorku.ca/~oz/hash.html) +
  I've tested djb2_hash, and it gives quite good results. +
  But I'm sure, Bernstein did think and test his algorithm sincerely. +
  When combining djb2_hash and sdbm_hash, the probability of collisions +
  might tend to zero. +
  Me I'm going this way. I guess. I might check djb2_hash for collisions within a space of around 8 digits. +
  Size: ~86B  link:../src/hashes.c[../src/hashes.c] l.10 

labs::

  _long int labs(long int i)_
 +
  return a long integer absolute value +
 Size: ~46B  link:../include/math.h[../include/math.h] l.30  manpage: link:manpages/stdlib/labs.3.rst[labs] +


ldiv::

  _ldiv_t ldiv(long int numerator, long int denominator)_
 +
  compute quotient and remainder of a long division +
 Size: ~82B  link:../include/math.h[../include/math.h] l.16  manpage: link:manpages/stdlib/ldiv.3.rst[ldiv] +


rand::

  _unsigned int rand()_
 +
  Size: ~118B  link:../src/rand.c[../src/rand.c] l.15  manpage: link:manpages/stdlib/rand.3.rst[rand] +


sdbm_hash::

  _unsigned long sdbm_hash(const unsigned char *str)_
 +
  Size: ~80B  link:../src/hashes.c[../src/hashes.c] l.21 

srand::

  _void srand( unsigned int i )_
 +
  pseudo-random number generator +
 Size: ~48B  link:../src/rand.c[../src/rand.c] l.7  manpage: link:manpages/stdlib/rand.3.rst[srand] +


 memory
--------


brk::

  _int brk( const void* addr )_
 +
  change data segment size +
 set the brk to addr +
  return 0 on success. +
  conformant brk, when mini_errno is defined return -1 and set errno. +
  if errno isn't available, +
  returns the negative errno value on error +
  Size: ~66B  link:../src/brk.c[../src/brk.c] l.19  manpage: link:manpages/sys/brk.2.rst[brk] +


free::

  _void free(void *p)_
 +
  Defines: brk getbrk +
 free allocated memory +
 Size: ~32B  link:../src/malloc.c[../src/malloc.c] l.137  manpage: link:manpages/stdlib/memory.3.rst[free] +


free_brk::

  _int free_brk()_
 +
  free all memory, +
  which has been allocated with malloc_brk. +
  Returns 0, if memory has been freed; +
  1, when there hasn't been any memory allocations with +
  malloc_brk before. +
  Then brk() gives an error, return the return value of brk +
  link:../src/malloc.c[../src/malloc.c] l.232 

getbrk::

  _long getbrk()_
 +
  get the current brk +
  does either a syscall to brk, +
  or returns the globally saved var +
  link:../src/brk.c[../src/brk.c] l.39 

malloc::

  _void* malloc(int size)_
 +
  Defines: brk +
 a memory allocator +
 0 +
  Here we go.. with the .. well.  +
  Fastes and smallest malloc/free combi ever.  +
  Not the smartest. +
  Since it isn't exactly a memory allocation, +
  instead it (mis)uses the minilib buf. +
  ;) 1024 Bytes should be enough for everyone. +
   Ok. If you really do need more memory -  +
   rethink your design, increase mini_mbuf, +
   or use a proper malloc implementation. +
  +
  Here we use mbuf from top to bottom as stack. +
  64 Bytes are left at the bottom as reserve. +
  Possibly we'd like to complain +
  about the lack of memory, before we exit.. +
  +
  ATM, the 'free' is really lazy.  +
  It free's memory, but a real 'free' is only commited, +
  when all memory below a freed area is also freed. +
  Since the target of minilib atm are tiny tools,  +
  this might be ok. +
  ;) but, as I told before -  +
  probably you should look out for a proper malloc implementation. +
  It depends on your needs. +
  +
  I'm not sure yet,  +
  whether another implementation of free would be useful at all. +
  Overall, I'd really prefer keeping minilib tiny. +
  +
  Reusing sparse freed memory areas also leads  +
  to a whole bunch of complications. +
  cache misses, searching complexity, +
  storage overhead, potentially page faults, +
  just to name a few. +
  +
  I'm not sure whether it's worth it. +
  +
  And the existing malloc implementations  +
  out there are countless. +
  +
  ;) It's sometimes smarter to stay special, +
  although in this case this means the opposite. +
  /misc +
  +
  The memory layout looks like this: +
  mlgl->ibuf and mlgl->mbuf do point to the same address range. +
  mlgl->ibuf is provided for alignment and faster access to the int values. +
  +
  flag prev free is the first bit in size. (0x8000, eq 1000 0000 0000 0000 binary when free),  +
  (mbufsize) +
       size  data  size    mini_buf size +
       8008dataxxxx0004data8000 +
  Size: ~173B  link:../src/malloc.c[../src/malloc.c] l.117  manpage: link:manpages/stdlib/memory.3.rst[malloc] +


malloc_brk::

  _void* malloc_brk(int size)_
 +
  Defines: sbrk +
 allocate via setting the brk +
  free and realloc can be used normally. +
  The intention of malloc_brk is for subsequent calls to realloc. +
  The saved data has not to be copied, +
  instead realloc just writes the new size and sets  +
  the brk accordingly. +
  if the break is saved before one or more calls to malloc_brk, +
  the allocated memory can also be free'd by setting the brk to the saved value +
  with brk(saved_brk) +
  free_brk() free's all memory, which has been allocated with malloc_brk +
  link:../src/malloc.c[../src/malloc.c] l.204 

memcmp::

  _int memcmp(const void* c1,const void* c2,int len)_
 +
  compare bytes in memory +
 Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.84  manpage: link:manpages/string/memcmp.3.rst[memcmp] +


memcpy::

  _void *memcpy( void *d, const void *s, int n )_
 +
  copy bytes in memory +
 Size: ~84B  link:../src/memcpy.c[../src/memcpy.c] l.6  manpage: link:manpages/string/memcpy.3.rst[memcpy] +


memfd_create::

  _int memfd_create( const char  *uname_ptr,  unsigned int flags)_
 +
  create an anonymous file +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.170 

memfrob::

  _void* memfrob(void* s, unsigned int len)_
 +
  frobnicate (encrypt) a memory area +
 Size: ~78B  link:../src/memfrob.c[../src/memfrob.c] l.3 

memmove::

  _void* memmove(void *dest, const void *src, int n)_
 +
  copy bytes in memory with overlapping areas +
 Size: ~88B  link:../src/memmove.c[../src/memmove.c] l.3  manpage: link:manpages/string/memmove.3.rst[memmove] +


memset::

  _void *memset( void *s, int c, int n)_
 +
  set bytes in memory +
 Size: ~90B  link:../src/memset.c[../src/memset.c] l.3  manpage: link:manpages/string/memset.3.rst[memset] +


mmap::

  _void*  mmap(void* addr,  size_t len,  int prot,  int flags,  int fd,  off_t off)_
 +
  map pages of memory +
 mmap wrapper +
  address length is rounded up to a multiple of pagesize (4096 Bytes here) +
  for the description, please look up the according manpage +
  errno is only set, when mini_errno is defined +
  if not, on error the negative errno value is returned. +
  (e.g. -22 for "invalid argument") +
  Size: ~197B  link:../src/mmap.c[../src/mmap.c] l.8  manpage: link:manpages/sys/mmap.2.rst[mmap] +


mprotect::

  _int mprotect( POINTER *a1, POINTER a2, int a3 )_
 +
  set protection of memory mapping +
 Size: ~146B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.183  manpage: link:manpages/sys/mprotect.2.rst[mprotect] +


mremap::

  _void* volatile  mremap(void* addr, size_t old_len, size_t new_len, int flags, void* new_addr)_
 +
  remap a virtual memory address +
 Size: ~162B  link:../include/mremap.h[../include/mremap.h] l.4 

munmap::

  _int munmap( unsigned long addr,  size_t len)_
 +
  unmap pages of memory +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.198  manpage: link:manpages/sys/munmap.2.rst[munmap] +


realloc::

  _void* realloc(void *p, int size)_
 +
  Defines: getbrk brk +
 memory reallocator +
 Size: ~636B  link:../src/malloc.c[../src/malloc.c] l.250  manpage: link:manpages/stdlib/memory.3.rst[realloc] +


sbrk::

  _void* sbrk(long incr)_
 +
  change data segment size +
 Set the new brk, increment/decrement by incr bytes. +
  return the old brk on success. +
  conformant sbrk, when mini_errno is defined +
  if no errno is available, +
  returns the negative errno value on error +
  Size: ~108B  link:../src/brk.c[../src/brk.c] l.57  manpage: link:manpages/sys/brk.2.rst[sbrk] +


splice::

  _int splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)_
 +
  splice data to/from a pipe +
 Size: ~178B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.175 

swap::

  _void swap(void* a, void* b,int size)_
 +
  swap a with b, with 'size' bytes +
  swaps integers and longs at once, when size eq sizeof(int/long) +
  link:../src/qsort.c[../src/qsort.c] l.31 

 output
--------


_mprints::

  _#define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)_
 +
  Defines: write +
 link:../src/prints.c[../src/prints.c] l.69 

dprintf::

  _int dprintf( int fd, const char *fmt, ... )_
 +
  Defines: write +
 print formatted output +
 Size: ~818B  link:../src/sprintf.c[../src/sprintf.c] l.203  manpage: link:manpages/stdio/printf.3.rst[dprintf] +


dprints::

  _int dprints(int fd, const char *msg,...)_
 +
  Defines: write +
 link:../src/prints.c[../src/prints.c] l.48 

eprint::

  _#define eprint(str) write(STDERR_FILENO,str,strlen(str))_
 +
  Defines: strlen write +
 write str to stderr. Needs strlen +
  link:../include/prints.h[../include/prints.h] l.42 

eprintfs::

  _#define eprintfs(fmt,...) fprintfs(stderr, fmt, __VA_ARGS__)_
 +
  Defines: write fileno strlen +
 write str to stderr.  +
  only format %s is recognized +
  link:../include/prints.h[../include/prints.h] l.90 

eprintl::

  _#define eprintl() write(STDERR_FILENO,"\n",1)_
 +
  Defines: write +
 write a newline to stderr +
  link:../include/prints.h[../include/prints.h] l.67 

eprints::

  _#define eprints(...) dprints(STDERR_FILENO,__VA_ARGS__,0)_
 +
  Defines: write +
 print the string(s) supplied as arg(s) to stdout +
  link:../include/prints.h[../include/prints.h] l.17 

eputs::

  _#define eputs(msg) ( eprint(msg) + eprintl() )_
 +
  Defines: write strlen +
 write msg to stderr, append a newline. Needs strlen. +
  link:../include/prints.h[../include/prints.h] l.77 

ewrites::

  _#define ewrites(str) write(STDERR_FILENO,str,sizeof(str))_
 +
  Defines: write +
 write the constant str to stderr. Computes length with sizeof(str) at compile time. +
  link:../include/prints.h[../include/prints.h] l.52 

fprint::

  _#define fprint(...) fprintf(__VA_ARGS__)_
 +
  Defines: fileno write +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.95 

fprintf::

  _#define fprintf(stream,...)	write(fileno(stream),mlgl->mbuf,sprintf(mlgl->mbuf,__VA_ARGS__))_
 +
  Defines: write fileno +
 link:../src/sprintf.c[../src/sprintf.c] l.245  manpage: link:manpages/stdio/printf.3.rst[fprintf] +


fprintfs::

  _int fprintfs( FILE* F, char *fmt, ...)_
 +
  Defines: strlen fileno write +
 prints formatted to the stream F.only %s and %c are recognized.no mini_buf needed, so using fprintfs instead of fprintf can save some sections / bytes. +
  Size: ~427B  link:../src/fprintfs.c[../src/fprintfs.c] l.10 

fprints::

  _#define fprints(F,str) write(fileno(F),str,strlen(str))_
 +
  Defines: fileno strlen write +
 print the string(s) supplied as arg(s) to stream +
  link:../include/prints.h[../include/prints.h] l.24 

fputc::

  _int volatile fputc(int c, FILE* F)_
 +
  Defines: write fileno +
 put a byte on a stream +
 Size: ~64B  link:../include/fputc.h[../include/fputc.h] l.10  manpage: link:manpages/stdio/putc.3.rst[fputc] +


fwrite::

  _size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f)_
 +
  Defines: write +
 binary output +
 Size: ~117B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.106  manpage: link:manpages/stdio/fread.3.rst[fwrite] +


fwrites::

  _#define fwrites(fd,str) write(fd,str,sizeof(str))_
 +
  Defines: write +
 write the constant str to fd. Computes length with sizeof(str) at compile time. +
  link:../include/prints.h[../include/prints.h] l.58 

print::

  _#define print(str) write(STDOUT_FILENO,str,strlen(str))_
 +
  Defines: write strlen +
 write str to stdout. Needs strlen +
  link:../include/prints.h[../include/prints.h] l.38 

printf::

  _#define printf(...) fprintf(stdout,__VA_ARGS__)_
 +
  Defines: fileno write +
 print formatted output +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.91  manpage: link:manpages/stdio/printf.3.rst[printf] +


printfs::

  _#define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)_
 +
  Defines: write strlen fileno +
 write str to stdout.  +
  only format %s is recognized +
  link:../include/prints.h[../include/prints.h] l.84 

printl::

  _#define printl() write(STDOUT_FILENO,"\n",1)_
 +
  Defines: write +
 write a newline to stdout +
  link:../include/prints.h[../include/prints.h] l.63 

prints::

  _#define prints(...) _mprints(__VA_ARGS__,0)_
 +
  print the string(s) supplied as arg(s) to stdout +
  link:../include/prints.h[../include/prints.h] l.11 

printsl::

  _#define printsl(...) _mprints(__VA_ARGS__,"\n",0)_
 +
  print the string(s) supplied as arg(s) and newline to stdout +
  link:../include/prints.h[../include/prints.h] l.32 

putc::

  _#define putc(c,stream) fputc(c,stream)_
 +
  Defines: fileno write +
 put a byte on a stream +
 link:../include/fputc.h[../include/fputc.h] l.19  manpage: link:manpages/stdio/putc.3.rst[putc] +


putchar::

  _#define putchar(c) fputc(c,stdout)_
 +
  Defines: write fileno +
 put a byte on a stdout stream +
 link:../include/fputc.h[../include/fputc.h] l.16  manpage: link:manpages/stdio/putc.3.rst[putchar] +


puts::

  _#define puts(msg) ( print(msg) + printl() )_
 +
  Defines: write strlen +
 put a string on standard output +
 write msg to stdout, append a newline. Needs strlen. +
  link:../include/prints.h[../include/prints.h] l.73  manpage: link:manpages/stdio/fputs.3.rst[puts] +


snprintf::

  _int snprintf( char *buf, size_t size, const char *fmt, ... )_
 +
  Defines: write +
 print formatted output +
 Size: ~738B  link:../src/sprintf.c[../src/sprintf.c] l.220  manpage: link:manpages/stdio/printf.3.rst[snprintf] +


vfprintf::

  _#define vfprintf(...) fprintf(__VA_ARGS__)_
 +
  Defines: write fileno +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.100  manpage: link:manpages/stdio/printf.3.rst[vfprintf] +


vsnprintf::

  _int vsnprintf(char *buf, size_t size, const char* fmt, va_list args )_
 +
  Defines: write +
 format output of a stdarg argument list +
 the function, translating the fmt of printf. +
  warning - most possibly you'd like to define besides fprintf, or family, +
  mini_itodec (%d conversion)  +
  mini_atoi is needed for grouping numbers +
  Size: ~590B  link:../src/sprintf.c[../src/sprintf.c] l.41  manpage: link:manpages/stdio/printf.3.rst[vsnprintf] +


write::

  _int write(int fd,const void *buf, int len )_
 +
  write on a file +
 Size: ~65B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.98  manpage: link:manpages/sys/write.2.rst[write] +


writes::

  _#define writes(str) write(STDOUT_FILENO,str,sizeof(str))_
 +
  Defines: write +
 write the constant str to stdout. Computes length with sizeof(str) at compile time. +
  link:../include/prints.h[../include/prints.h] l.48 

 process
---------


abort::

  _void abort()_
 +
  Defines: getpid write memcpy +
 link:../src/abort.c[../src/abort.c] l.3  manpage: link:manpages/stdlib/abort.3.rst[abort] +


atexit::

  _int atexit( functionp* func )_
 +
  Defines: globals +
 register functions, which are callen on exit in reverse order +
  the switch mini_atexit takes a optional number, +
  which defines the maximum numbers of functions to be registered. +
  (defaults to 8) +
  link:../src/atexit.c[../src/atexit.c] l.7  manpage: link:manpages/stdlib/atexit.3.rst[atexit] +


execl::

  _int execl(const char *pathname, const char* arg0,... )_
 +
  Defines: environ execve +
 link:../src/execl.c[../src/execl.c] l.6  manpage: link:manpages/gen/exec.3.rst[execl] +


execv::

  _int execv(const char *pathname, char *const argv[])_
 +
  Defines: execve environ +
 execute a file +
 Size: ~300B  link:../src/execvp.c[../src/execvp.c] l.9  manpage: link:manpages/gen/exec.3.rst[execv] +


execve::

  _int execve( const char *filename,  char* const* argv, char* const* envp)_
 +
  execute program +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.123  manpage: link:manpages/sys/execve.2.rst[execve] +


execveat::

  _int execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)_
 +
  execute program relative to a directory file descriptor +
 Size: ~158B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.153 

execvp::

  _int execvp(const char *file, char *const argv[])_
 +
  Defines: access execve environ +
 execute a file +
 Size: ~556B  link:../src/execvp.c[../src/execvp.c] l.58  manpage: link:manpages/gen/exec.3.rst[execvp] +


execvpe::

  _int execvpe(const char *file, char *const argv[], char *const envp[])_
 +
  Defines: execve environ access +
 execute a file +
 When invoked with a filename, starting with "." or "/", +
  interprets this as absolute path. (calls execve with the pathname) +
  Looks for file in the PATH environment, othwerise. +
  Size: ~556B  link:../src/execvp.c[../src/execvp.c] l.18 

fexecve::

  _int fexecve(int fd, char *const argv[], char *const envp[])_
 +
  execute a file +
 Size: ~151B  link:../include/fexecve.h[../include/fexecve.h] l.3  manpage: link:manpages/sys/execve.2.rst[fexecve] +


fexecveat::

  _int fexecveat(int fd, char *const argv[], char *const envp[])_
 +
  Size: ~151B  link:../include/fexecveat.h[../include/fexecveat.h] l.3 

fork::

  _int DEF_syscall(fork,0)_
 +
  create a new process +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.127  manpage: link:manpages/sys/fork.2.rst[fork] +


getenv::

  _char* getenv(const char* name)_
 +
  Defines: environ +
 get value of an environment variable +
 Size: ~106B  link:../src/getenv.c[../src/getenv.c] l.8  manpage: link:manpages/stdlib/getenv.3.rst[getenv] +


getpgrp::

  _int DEF_syscall(getpgrp,0)_
 +
  get the process group ID of the calling process +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.193  manpage: link:manpages/sys/getpgrp.2.rst[getpgrp] +


getpid::

  _int DEF_syscall(getpid,0 )_
 +
  get the process ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.141  manpage: link:manpages/sys/getpid.2.rst[getpid] +


getppid::

  _int DEF_syscall(getppid,0)_
 +
  get the parent process ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.190  manpage: link:manpages/sys/getpid.2.rst[getppid] +


setpgid::

  _int setpgid( pid_t pid, pid_t pgid)_
 +
  set process group ID for job control +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.191  manpage: link:manpages/sys/setpgid.2.rst[setpgid] +


setsid::

  _int DEF_syscall(setsid,0 )_
 +
  create session and set process group ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.142  manpage: link:manpages/sys/setsid.2.rst[setsid] +


system::

  _int system( const char* command )_
 +
  Defines: wait4 vfork execve write environ +
 issue a command +
 Size: ~326B  link:../src/system.c[../src/system.c] l.4  manpage: link:manpages/stdlib/system.3.rst[system] +


vexec::

  _int vexec( const char* path, char* const* argv, char* const* envp )_
 +
  execute a path, wait until the executed file exits. +
  Deviating of system() an absolute pathname is taken. +
  link:../src/vexec.c[../src/vexec.c] l.4 

vexec_q::

  _int vexec_q( const char* path, char* const* argv, char* const* envp )_
 +
  execute a path, wait until the executed file exits,  +
  do not write any output of the process. (close stdout) +
  Deviating of system() an absolute pathname is taken. +
  link:../src/vexec.c[../src/vexec.c] l.26 

vfork::

  _int DEF_syscall(vfork,0)_
 +
  create a child process and block parent +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.128  manpage: link:manpages/sys/vfork.2.rst[vfork] +


 regex
-------


ext_match::

  _int ext_match(const char *text, const char *re)_
 +
  simple regex engine. +
  matches: * for every count of any char +
  ? for 1 char +
  backslash: escape *,?, and backslash itself. +
  \d - digit +
  \D - nondigit +
  \s - space +
  \S - nonspace +
  \w - word character ( defined as ascii 32-126,160-255 ) +
  \W - nonword character ( defined as ascii 0-31,127-159 ) +
  +
  (memo) When the regex ist defined as C string, +
  a backslash has to be defined as double backslash +
  in the source code. +
  link:../src/ext_match.c[../src/ext_match.c] l.16 

match::

  _int match(const char *text, const char *re)_
 +
  simple regex engine. +
  matches: * for every count of any char +
  ? for 1 char +
  backslash: escape *,?, and backslash itself. +
  +
  (memo) When the regex ist defined as C string, +
  a backslash has to be defined as double backslash +
  in the source code. +
  link:../src/match.c[../src/match.c] l.10 

 streams
---------


clearerr::

  _void clearerr(FILE *f)_
 +
  clear indicators on a stream +
 Size: ~36B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.198  manpage: link:manpages/stdio/ferror.3.rst[clearerr] +


clearerror::

  _void clearerror(FILE *f)_
 +
  Size: ~36B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.203 

fclose::

  _int  fclose( FILE* f )_
 +
  Defines: close +
 close a stream +
 Size: ~40B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.65  manpage: link:manpages/stdio/fclose.3.rst[fclose] +


fdopen::

  _FILE *fdopen(int fd, const char* mode)_
 +
  Defines: fileno open close +
 associate a stream with a file descriptor +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~323B  link:../src/fopen.c[../src/fopen.c] l.91  manpage: link:manpages/stdio/fopen.3.rst[fdopen] +


feof::

  _int feof(FILE *f)_
 +
  test end-of-file indicator on a stream +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.184  manpage: link:manpages/stdio/ferror.3.rst[feof] +


ferror::

  _int ferror(FILE *f)_
 +
  test error indicator on a stream +
 Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.191  manpage: link:manpages/stdio/ferror.3.rst[ferror] +


fflush::

  _int  fflush( FILE *F )_
 +
  flush a stream +
 This does nothing, since minilib doesn't provide buffered streams yet.In order to sync data to disc, please use fsync +
  Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.28  manpage: link:manpages/stdio/fflush.3.rst[fflush] +


fgetpos::

  _void fgetpos(FILE *f, long *pos )_
 +
  Defines: lseek +
 get current file position information +
 Size: ~62B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.127  manpage: link:manpages/stdio/fseek.3.rst[fgetpos] +


fileno::

  _int fileno( FILE *f )_
 +
  map a stream pointer to a file descriptor +
 Return the fd nummber of stdin,-out,-err.  +
  Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.56  manpage: link:manpages/stdio/ferror.3.rst[fileno] +


fopen::

  _FILE *fopen(const char* filename, const char* mode)_
 +
  Defines: open fileno close +
 open a stream +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~324B  link:../src/fopen.c[../src/fopen.c] l.81  manpage: link:manpages/stdio/fopen.3.rst[fopen] +


fputs::

  _int volatile fputs(const char *c, FILE *F)_
 +
  Defines: strlen fileno write +
 put a string on a stream +
 Size: ~90B  link:../include/fputs.h[../include/fputs.h] l.20  manpage: link:manpages/stdio/fputs.3.rst[fputs] +


fread::

  _size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f)_
 +
  Defines: read +
 binary input +
 Size: ~110B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.162  manpage: link:manpages/stdio/fread.3.rst[fread] +


freopen::

  _FILE *freopen(const char* filename, const char* mode, FILE *F)_
 +
  Defines: close open fileno +
 open a stream +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~320B  link:../src/fopen.c[../src/fopen.c] l.101  manpage: link:manpages/stdio/fopen.3.rst[freopen] +


fseek::

  _int fseek(FILE *f, long offset, int whence )_
 +
  Defines: lseek +
 reposition a file-position indicator in a stream +
 Size: ~80B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.146  manpage: link:manpages/stdio/fseek.3.rst[fseek] +


fsetpos::

  _int fsetpos(FILE *f, int pos )_
 +
  Defines: lseek +
 set current file position +
 Size: ~78B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.133  manpage: link:manpages/stdio/fseek.3.rst[fsetpos] +


ftell::

  _long ftell(FILE *f)_
 +
  Defines: lseek +
 return a file offset in a stream +
 Size: ~53B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.121  manpage: link:manpages/stdio/fseek.3.rst[ftell] +


rewind::

  _void rewind( FILE *f )_
 +
  Defines: lseek +
 reset the file position indicator in a stream +
 Size: ~58B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.156  manpage: link:manpages/stdio/fseek.3.rst[rewind] +


setbuf::

  _void setbuf(FILE *stream, char *buf)_
 +
  assign buffering to a stream +
 dummy function. +
  There is no buffering implemented for the streams yet. +
  Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.211  manpage: link:manpages/stdio/setbuf.3.rst[setbuf] +


setvbuf::

  _int setvbuf(FILE *stream, char *buf, int mode, size_t size)_
 +
  assign buffering to a stream +
 dummy function +
  Size: ~58B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.216  manpage: link:manpages/stdio/setbuf.3.rst[setvbuf] +


 strings
---------


_strcasecmp::

  _int _strcasecmp(const char*c1,const char*c2,int len)_
 +
  Defines: tolower +
 Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.27 

_strcmp::

  _int _strcmp(const char*c1,const char*c2,int len)_
 +
  Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.10 

sprintf::

  _#define sprintf(str,...) snprintf( str, 4096,  __VA_ARGS__)_
 +
  Defines: write +
 print formatted output +
 link:../src/sprintf.c[../src/sprintf.c] l.26  manpage: link:manpages/stdio/printf.3.rst[sprintf] +


strcasecmp::

  _int strcasecmp(const char*c1,const char*c2)_
 +
  link:../src/strcmp.c[../src/strcmp.c] l.48  manpage: link:manpages/string/string.3.rst[strcasecmp] +


strcat::

  _char *strcat(char *dest, const char *src )_
 +
  Defines: strlen +
 concatenate two strings +
 Size: ~126B  link:../src/strcat.c[../src/strcat.c] l.7  manpage: link:manpages/string/string.3.rst[strcat] +


strchr::

  _char *strchr(const char *s, int c)_
 +
  Defines: strchrnul +
 string scanning operation +
 Size: ~104B  link:../src/strchr.c[../src/strchr.c] l.20  manpage: link:manpages/string/string.3.rst[strchr] +


strchrnul::

  _char *strchrnul(const char *s, int c)_
 +
  locate character in string +
 Size: ~87B  link:../src/strchr.c[../src/strchr.c] l.7  manpage: link:manpages/string/strchr.3.rst[strchrnul] +


strcmp::

  _int strcmp(const char*c1,const char*c2)_
 +
  compare two strings +
 Size: ~32B  link:../src/strcmp.c[../src/strcmp.c] l.67  manpage: link:manpages/string/string.3.rst[strcmp] +


strcpy::

  _char *strcpy(char *dest, const char *src)_
 +
  copy a string and return a pointer to the end of the result +
 Size: ~84B  link:../src/memcpy.c[../src/memcpy.c] l.17  manpage: link:manpages/string/string.3.rst[strcpy] +


strdup::

  _char *strdup(const char *source)_
 +
  Defines: brk strlen strcpy +
 duplicate a specific number of bytes from a string +
 Size: ~258B  link:../src/strdup.c[../src/strdup.c] l.7  manpage: link:manpages/string/strdup.3.rst[strdup] +


strlen::

  _int strlen(const char*str)_
 +
  get length of fixed size string +
 Size: ~32B  link:../src/strlen.c[../src/strlen.c] l.7  manpage: link:manpages/string/strlen.3.rst[strlen] +


strncasecmp::

  _int strncasecmp(const char*c1,const char*c2,int len)_
 +
  case-insensitive string comparisons +
 link:../src/strcmp.c[../src/strcmp.c] l.56  manpage: link:manpages/string/string.3.rst[strncasecmp] +


strncmp::

  _int strncmp(const char*c1,const char*c2,int len)_
 +
  compare part of two strings +
 Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.75  manpage: link:manpages/string/string.3.rst[strncmp] +


strncpy::

  _char *strncpy(char *dest, const char *src, int n)_
 +
  Defines: memcpy +
 copy fixed length string, returning a pointer to the array end +
 Size: ~96B  link:../src/memcpy.c[../src/memcpy.c] l.27  manpage: link:manpages/string/string.3.rst[strncpy] +


strrchr::

  _char *strrchr(const char *s, int c)_
 +
  Defines: strchrnul +
 string scanning operation +
 Size: ~122B  link:../src/strchr.c[../src/strchr.c] l.36  manpage: link:manpages/string/string.3.rst[strrchr] +


strstr::

  _char* strstr(const char *big, const char *little)_
 +
  find a substring +
 Size: ~104B  link:../src/strstr.c[../src/strstr.c] l.3  manpage: link:manpages/string/strstr.3.rst[strstr] +


 system
--------


chroot::

  _int chroot( const char *filename)_
 +
  change root directory +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.137  manpage: link:manpages/sys/chroot.2.rst[chroot] +


getgid::

  _int DEF_syscall(getgid,0)_
 +
  get the real group ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.192  manpage: link:manpages/sys/getgid.2.rst[getgid] +


getuid::

  _int DEF_syscall(getuid,0)_
 +
  get a real user ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.195  manpage: link:manpages/sys/getuid.2.rst[getuid] +


ioctl::

  _int volatile   ioctl( int fd, unsigned long int request, ... )_
 +
  control a STREAMS device (\fBSTREAMS\fP) +
 Size: ~319B  link:../src/ioctl.c[../src/ioctl.c] l.11  manpage: link:manpages/sys/ioctl.2.rst[ioctl] +


macro::

  _void  optimization_fence(void*p){}_
 +
  prevent optimizations. +
  cast a var to void*, and calling this, +
  leaves the compiler unknown on what he can strip. +
  (noipa) means the compiler doesn't know, what the function itself does. +
  (the function does nothing, but don't tell that gcc, please..) +
  therefore, everything used as parameter to this function, +
  will be calculated, defined, and so on before. +
  It's used for the globals,  +
  shich are pushed within _start onto the stack. +
  since _start itself only provides a global pointer, +
  and initialitzes some of the globals, +
  but doesn't use them again, +
  this construction is needed. +
  more funnily, the function will never be called. +
  It's past the asm inline syscall to exit. +
  But again, luckily gcc doesn't know. +
  All other options, like having the globals volatile,  +
  setting the optimization flag of _start to 0,  +
  having a volatile asm call with the globals as param, and so on, +
  have been useless. All after all, seems to me, ai has it's restrictions. +
  Size: ~32B  link:../include/minilib_global.h[../include/minilib_global.h] l.90 

mknod::

  _int mknod( const char *filename,  umode_t mode,  unsigned dev)_
 +
  make directory, special file, or regular file +
 Size: ~73B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.196  manpage: link:manpages/sys/mknod.2.rst[mknod] +


mount::

  _int mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_
 +
  mount filesystem +
 Size: ~151B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.164  manpage: link:manpages/sys/mount.2.rst[mount] +


pivot_root::

  _int pivot_root( const char *new_root,  const char *put_old)_
 +
  change the root mount +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.138 

reboot::

  _int reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_
 +
  reboot or enable/disable Ctrl-Alt-Del +
 Size: ~139B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.162  manpage: link:manpages/sys/reboot.2.rst[reboot] +


setgid::

  _int setgid( gid_t gid)_
 +
  set-group-ID +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.143  manpage: link:manpages/sys/setuid.2.rst[setgid] +


setgroups::

  _int setgroups( int gidsetsize,  gid_t *grouplist)_
 +
  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.178  manpage: link:manpages/sys/setgroups.2.rst[setgroups] +


setuid::

  _int setuid( uid_t uid)_
 +
  set user ID +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.144  manpage: link:manpages/sys/setuid.2.rst[setuid] +


sync::

  _int DEF_syscall(sync,0)_
 +
  schedule file system updates +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.120  manpage: link:manpages/sys/sync.2.rst[sync] +


umount2::

  _int umount2( const char *mountpoint, int flags)_
 +
  unmount filesystem +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.160 

uname::

  _int uname(struct old_utsname *name )_
 +
  get the name of the current system +
 Size: ~41B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.148  manpage: link:manpages/gen/uname.3.rst[uname] +


 terminal
----------


grantpt::

  _int grantpt(int fd)_
 +
  grant access to the slave pseudo-terminal device +
 Size: ~44B  link:../src/pty.c[../src/pty.c] l.13  manpage: link:manpages/stdlib/ptsname.3.rst[grantpt] +


isatty::

  _int isatty(int fd)_
 +
  Defines: ioctl +
 test for a terminal device +
 Size: ~325B  link:../src/isatty.c[../src/isatty.c] l.7  manpage: link:manpages/gen/ttyname.3.rst[isatty] +


nanosleep::

  _int nanosleep( struct timespec *rqtp, struct timespec *rmtp)_
 +
  high resolution sleep +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.131  manpage: link:manpages/sys/nanosleep.2.rst[nanosleep] +


posix_openpt::

  _int posix_openpt(int flags)_
 +
  Defines: open +
 open a pseudo-terminal device +
 Size: ~140B  link:../src/pty.c[../src/pty.c] l.8  manpage: link:manpages/sys/posix_openpt.2.rst[posix_openpt] +


ptsname::

  _char *ptsname(int fd)_
 +
  Defines: open ioctl uitodec write +
 get name of the slave pseudo-terminal device +
 Size: ~1767B  link:../src/pty.c[../src/pty.c] l.40  manpage: link:manpages/stdlib/ptsname.3.rst[ptsname] +


ptsname_r::

  _int ptsname_r(int fd, char *buf, size_t len)_
 +
  Defines: uitodec open ioctl write +
 get the name of the slave pseudoterminal +
 Size: ~1748B  link:../src/pty.c[../src/pty.c] l.27 

tcgetattr::

  _int  tcgetattr(int fd, struct termios *io)_
 +
  Defines: ioctl +
 get the parameters associated with the terminal +
 Size: ~300B  link:../include/tcgetattr.h[../include/tcgetattr.h] l.21  manpage: link:manpages/gen/tcsetattr.3.rst[tcgetattr] +


tcsetattr::

  _int  tcsetattr(int fd, int opt, const struct termios *io)_
 +
  Defines: ioctl +
 set the parameters associated with the terminal +
 Size: ~316B  link:../include/tcsetattr.h[../include/tcsetattr.h] l.20  manpage: link:manpages/gen/tcsetattr.3.rst[tcsetattr] +


unlockpt::

  _int unlockpt(int fd)_
 +
  Defines: ioctl +
 unlock a pseudo-terminal master/slave pair +
 Size: ~325B  link:../src/pty.c[../src/pty.c] l.20  manpage: link:manpages/stdlib/ptsname.3.rst[unlockpt] +


vhangup::

  _int DEF_syscall(vhangup,0 )_
 +
  virtually hangup the current terminal +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.146 

 time
------


getitimer::

  _int getitimer( int which,  struct itimerval *value)_
 +
  get and set value of interval timer +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.201  manpage: link:manpages/sys/getitimer.2.rst[getitimer] +


gettimeofday::

  _int gettimeofday( struct timeval *a1, struct timezone *a2)_
 +
  get the date and time +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.132  manpage: link:manpages/sys/gettimeofday.2.rst[gettimeofday] +


setitimer::

  _int setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_
 +
  set the value of an interval timer +
 Size: ~56B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.200  manpage: link:manpages/sys/getitimer.2.rst[setitimer] +


sleep::

  _unsigned int volatile sleep(unsigned int seconds)_
 +
  suspend execution for an interval of time +
 nonconformant sleep +
  TODO: ignore blocked signals, sigchld +
  Size: ~123B  link:../src/sleep.c[../src/sleep.c] l.10  manpage: link:manpages/gen/sleep.3.rst[sleep] +


time::

  _int time(unsigned int *a1 )_
 +
  get time +
 Size: ~41B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.206  manpage: link:manpages/gen/time.3.rst[time] +


usleep::

  _unsigned int volatile usleep(unsigned int useconds)_
 +
  suspend execution for microsecond intervals +
 nonconformant usleep.  +
  Sleep useconds. +
  I just hope, noone relies on an exact sleep time. +
  which isn't possible without a real time os, anyways. +
  When for whatever reason you'd need nanoseconds exact times, +
  best shot might be a spinloop, and looking for cpu ticks. +
  +
  TODO: ignore blocked signals, sigchld +
  Size: ~147B  link:../src/sleep.c[../src/sleep.c] l.31  manpage: link:manpages/gen/usleep.3.rst[usleep] +


utime::

  _int utime( const char *filename, struct utimbuf *times)_
 +
  set file access and modification times +
 Size: ~49B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.189  manpage: link:manpages/gen/utime.3.rst[utime] +


 unsorted
----------


def::

  _#define SETOPT_short( opts, option ) (_
 +
  Set a option flag(s) (bit(s))  manually. +
 		param options: e.g. just a, or ( a+h+l) to check for several flags at once +
  link:../macros/getoptm.h[../macros/getoptm.h] l.52 

qsort::

  _void qsort(void  *base,	size_t nel,	size_t width,	int (*comp)(const void *, const void *))_
 +
  (quick) shell sort routine +
  following the tradition, this isn't exactly a quicksort algorithm, +
  albite named quicksort. +
  It is a shell sort implementation, originally done by Ray Gardner, 5/90. +
  link:../src/qsort.c[../src/qsort.c] l.56  manpage: link:manpages/stdlib/qsort.3.rst[qsort] +


todo_putenv::

  _int todo_putenv( char *s )_
 +
  Defines: environ +
 Size: ~248B  link:../src/getenv.c[../src/getenv.c] l.22 

 x64-syscalls
--------------


sys__sysctl::

  _sys__sysctl( struct __sysctl_args *args)_
 +
  read/write system parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.315 

sys_accept::

  _sys_accept( int fd,  struct sockaddr *upeersockaddr,  int *upeeraddrlen)_
 +
  accept a new connection on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.91 

sys_accept4::

  _sys_accept4( int fd,  struct sockaddr *upeer_sockaddr,  int *upeer_addrlen,  int flags)_
 +
  accept a connection on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.551 

sys_access::

  _sys_access( const char *filename,  int mode)_
 +
  determine accessibility of a file relative to directory file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.47 

sys_acct::

  _sys_acct( const char *name)_
 +
  switch process accounting on or off +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.329 

sys_add_key::

  _sys_add_key( const char *_type,  const char *_description,  const void *_payload,  size_t plen)_
 +
  add a key to the kernel's key management facility +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.471 

sys_adjtimex::

  _sys_adjtimex( struct timex *txc_p)_
 +
  tune kernel clock +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.321 

sys_alarm::

  _sys_alarm( unsigned int seconds)_
 +
  schedule an alarm signal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.79 

sys_arch_prctl::

  _sys_arch_prctl( struct task_struct *task,  int code,  unsigned long *addr)_
 +
  set architecture-specific thread state +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.319 

sys_bind::

  _sys_bind( int fd,  struct sockaddr *umyaddr,  int addrlen)_
 +
  bind a name to a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.103 

sys_brk::

  _long sys_brk(unsigned long addr)_
 +
  change data segment size +
 the kernel syscall brk. +
  link:../src/brk.c[../src/brk.c] l.6 

sys_capget::

  _sys_capget( cap_user_header_t header,  cap_user_data_t dataptr)_
 +
  set/get capabilities of thread(s) +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.255 

sys_capset::

  _sys_capset( cap_user_header_t header,  const cap_user_data_t data)_
 +
  set/get capabilities of thread(s) +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.257 

sys_chdir::

  _sys_chdir( const char *filename)_
 +
  change working directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.165 

sys_chmod::

  _sys_chmod( const char *filename,  mode_t mode)_
 +
  change mode of a file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.185 

sys_chown::

  _sys_chown( const char *filename,  uid_t user,  gid_t group)_
 +
  change owner and group of a file relative to directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.189 

sys_chroot::

  _sys_chroot( const char *filename)_
 +
  change root directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.325 

sys_clock_adjtime::

  _sys_clock_adjtime( clockid_t which_clock,  struct timex *tx)_
 +
  link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.585 

sys_clock_getres::

  _sys_clock_getres( const clockid_t which_clock,  struct timespec *tp)_
 +
  link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.435 

sys_clock_gettime::

  _sys_clock_gettime( const clockid_t which_clock,  struct timespec *tp)_
 +
  clock and time functions +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.433 

sys_clock_nanosleep::

  _sys_clock_nanosleep( const clockid_t which_clock,  int flags,  const struct timespec *rqtp,  struct timespec *rmtp)_
 +
  high resolution sleep with specifiable clock +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.437 

sys_clock_settime::

  _sys_clock_settime( const clockid_t which_clock,  const struct timespec *tp)_
 +
  clock and timer functions +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.431 

sys_clone::

  _sys_clone( unsigned long clone_flags,  unsigned long newsp,  void *parent_tid,  void *child_tid)_
 +
  create a child process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.117 

sys_close::

  _sys_close( unsigned int fd)_
 +
  close a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.11 

sys_connect::

  _sys_connect( int fd,  struct sockaddr *uservaddr,  int addrlen)_
 +
  connect a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.89 

sys_creat::

  _sys_creat( const char *pathname,  int mode)_
 +
  create a new file or rewrite an existing one +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.175 

sys_delete_module::

  _sys_delete_module( const char *name_user,  unsigned int flags)_
 +
  unload a kernel module +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.353 

sys_dup::

  _sys_dup( unsigned int fildes)_
 +
  duplicate an open file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.69 

sys_dup2::

  _sys_dup2( unsigned int oldfd,  unsigned int newfd)_
 +
  duplicate a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.71 

sys_dup3::

  _sys_dup3( unsigned int oldfd,  unsigned int newfd,  int flags)_
 +
  duplicate a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.559 

sys_epoll_create::

  _sys_epoll_create( int size)_
 +
  open an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.407 

sys_epoll_create1::

  _sys_epoll_create1( int flags)_
 +
  open an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.557 

sys_epoll_ctl::

  _sys_epoll_ctl( int epfd,  int op,  int fd,  struct epoll_event *event)_
 +
  control interface for an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.443 

sys_epoll_pwait::

  _sys_epoll_pwait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout,  const sigset_t *sigmask,  size_t sigsetsize)_
 +
  wait for an I/O event on an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.537 

sys_epoll_wait::

  _sys_epoll_wait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout)_
 +
  wait for an I/O event on an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.441 

sys_eventfd::

  _sys_eventfd( unsigned int count)_
 +
  create a file descriptor for event notification +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.543 

sys_eventfd2::

  _sys_eventfd2( unsigned int count,  int flags)_
 +
  create a file descriptor for event notification +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.555 

sys_execve::

  _sys_execve( const char *filename,  const char *const argv[],  const char *const envp[])_
 +
  execute program +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.123 

sys_exit::

  _sys_exit( int error_code)_
 +
  terminate a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.125  manpage: link:manpages/sys/_exit.2.rst[_exit] +


sys_exit_group::

  _sys_exit_group( int error_code)_
 +
  exit all threads in a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.439 

sys_faccessat::

  _sys_faccessat( int dfd,  const char *filename,  int mode)_
 +
  determine accessibility of a file relative to directory file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.513 

sys_fadvise64::

  _sys_fadvise64( int fd,  loff_t offset,  size_t len,  int advice)_
 +
  predeclare an access pattern for file data +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.419 

sys_fallocate::

  _sys_fallocate( long fd,  long mode,  loff_t offset,  loff_t len)_
 +
  manipulate file space +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.545 

sys_fanotify_init::

  _sys_fanotify_init( unsigned int flags,  unsigned int event_f_flags)_
 +
  create and initialize fanotify group +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.575 

sys_fanotify_mark::

  _sys_fanotify_mark( long fanotify_fd,  long flags,  __u64 mask,  long dfd, long pathname)_
 +
  add, remove, or modify an fanotify mark on a filesystem +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.577 

sys_fchdir::

  _sys_fchdir( unsigned int fd)_
 +
  change working directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.167 

sys_fchmod::

  _sys_fchmod( unsigned int fd,  mode_t mode)_
 +
  change mode of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.187 

sys_fchmodat::

  _sys_fchmodat( int dfd,  const char *filename,  mode_t mode)_
 +
  change mode of a file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.511 

sys_fchown::

  _sys_fchown( unsigned int fd,  uid_t user,  gid_t group)_
 +
  change owner and group of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.191 

sys_fchownat::

  _sys_fchownat( int dfd,  const char *filename,  uid_t user,  gid_t group,  int flag)_
 +
  change owner and group of a file relative to directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.495 

sys_fcntl::

  _sys_fcntl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_
 +
  file control +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.149 

sys_fdatasync::

  _sys_fdatasync( unsigned int fd)_
 +
  synchronize the data of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.155 

sys_fgetxattr::

  _sys_fgetxattr( int fd,  const char *name,  void *value,  size_t size)_
 +
  retrieve an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.371 

sys_finit_module::

  _sys_finit_module( int fd,  const char  *uargs,  int flags)_
 +
  load a kernel module +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.601 

sys_flistxattr::

  _sys_flistxattr( int fd,  char *list,  size_t size)_
 +
  list extended attribute names +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.377 

sys_flock::

  _sys_flock( unsigned int fd,  unsigned int cmd)_
 +
  apply or remove an advisory lock on an open file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.151 

sys_fork::

  _sysSYSDEF_syscall(_fork,0)_
 +
  create a new process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.119 

sys_fremovexattr::

  _sys_fremovexattr( int fd,  const char *name)_
 +
  remove an extended attribute +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.383 

sys_fsetxattr::

  _sys_fsetxattr( int fd,  const char *name,  const void *value,  size_t size, int flags)_
 +
  set an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.365 

sys_fstat::

  _sys_fstat( unsigned int fd,  struct stat *statbuf)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.15 

sys_fstatfs::

  _sys_fstatfs( unsigned int fd,  struct statfs *buf)_
 +
  get filesystem statistics +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.279 

sys_fsync::

  _sys_fsync( unsigned int fd)_
 +
  synchronize changes to a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.153 

sys_ftruncate::

  _sys_ftruncate( unsigned int fd,  unsigned long length)_
 +
  truncate a file to a specified length +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.159 

sys_futex::

  _sys_futex( u32 *uaddr,  int op,  u32 val,  struct timespec *utime,  u32 *uaddr2,  u32 val3)_
 +
  fast user-space locking +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.389 

sys_futimesat::

  _sys_futimesat( int dfd,  const char *filename,  struct timeval *utimes)_
 +
  change timestamps of a file relative to a directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.497 

sys_get_mempolicy::

  _sys_get_mempolicy( int *policy,  unsigned long *nmask,  unsigned long maxnode,  unsigned long addr,  unsigned long flags)_
 +
  retrieve NUMA memory policy for a thread +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.453 

sys_get_robust_list::

  _sys_get_robust_list( int pid,  struct robust_list_head **head_ptr,  size_t *len_ptr)_
 +
  get/set list of robust futexes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.523 

sys_getcpu::

  _sys_getcpu( unsigned *cpup,  unsigned *nodep,  struct getcpu_cache *unused)_
 +
  determine CPU and NUMA node on which the calling thread is running +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.593 

sys_getcwd::

  _sys_getcwd( char *buf,  unsigned long size)_
 +
  get the pathname of the current working directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.163 

sys_getdents::

  _sys_getdents( unsigned int fd,  struct linux_dirent *dirent,  unsigned int count)_
 +
  get directory entries +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.161 

sys_getdents64::

  _sys_getdents64( unsigned int fd,  struct linux_dirent64 *dirent,  unsigned int count)_
 +
  get directory entries +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.411 

sys_getegid::

  _sysSYSDEF_syscall(_getegid,0)_
 +
  get the effective group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.221 

sys_geteuid::

  _sysSYSDEF_syscall(_geteuid,0)_
 +
  get the effective user ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.219 

sys_getgid::

  _sysSYSDEF_syscall(_getgid,0)_
 +
  get the real group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.213 

sys_getgroups::

  _sys_getgroups( int gidsetsize,  gid_t *grouplist)_
 +
  get supplementary group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.235 

sys_getitimer::

  _sys_getitimer( int which,  struct itimerval *value)_
 +
  get and set value of interval timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.77 

sys_getpeername::

  _sys_getpeername( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_
 +
  get the name of the peer socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.109 

sys_getpgid::

  _sys_getpgid( pid_t pid)_
 +
  get the process group ID for a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.247 

sys_getpgrp::

  _sysSYSDEF_syscall(_getpgrp,0)_
 +
  get the process group ID of the calling process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.227 

sys_getpid::

  _sysSYSDEF_syscall(_getpid,0)_
 +
  get the process ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.83 

sys_getppid::

  _sysSYSDEF_syscall(_getppid,0)_
 +
  get the parent process ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.225 

sys_getpriority::

  _sys_getpriority( int which,  int who)_
 +
  get and set the nice value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.283 

sys_getrandom::

  _sys_getrandom( char  *buf,  size_t count,  unsigned int flags)_
 +
  obtain a series of random bytes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.611 

sys_getresgid::

  _sys_getresgid( gid_t *rgid,  gid_t *egid,  gid_t *sgid)_
 +
  get real, effective and saved user/group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.245 

sys_getresuid::

  _sys_getresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_
 +
  get real, effective and saved user/group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.241 

sys_getrlimit::

  _sys_getrlimit( unsigned int resource,  struct rlimit *rlim)_
 +
  control maximum resource consumption +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.199 

sys_getrusage::

  _sys_getrusage( int who,  struct rusage *ru)_
 +
  get information about resource utilization +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.201 

sys_getsid::

  _sys_getsid( pid_t pid)_
 +
  get the process group ID of a session leader +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.253 

sys_getsockname::

  _sys_getsockname( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_
 +
  get the socket name +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.107 

sys_getsockopt::

  _sys_getsockopt( int fd,  int level,  int optname,  char *optval,  int *optlen)_
 +
  get the socket options +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.115 

sys_gettid::

  _sysSYSDEF_syscall(_gettid,0)_
 +
  get thread identification +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.357 

sys_gettimeofday::

  _sys_gettimeofday( struct timeval *tv,  struct timezone *tz)_
 +
  get the date and time +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.197 

sys_getuid::

  _sysSYSDEF_syscall(_getuid,0)_
 +
  get a real user ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.209 

sys_getxattr::

  _sys_getxattr( const char *pathname,  const char *name,  void *value,  size_t size)_
 +
  retrieve an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.367 

sys_init_module::

  _sys_init_module( void *umod,  unsigned long len,  const char *uargs)_
 +
  load a kernel module +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.351 

sys_inotify_add_watch::

  _sys_inotify_add_watch( int fd,  const char *pathname,  u32 mask)_
 +
  add a watch to an initialized inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.483 

sys_inotify_init::

  _sysSYSDEF_syscall(_inotify_init,0)_
 +
  initialize an inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.481 

sys_inotify_init1::

  _sys_inotify_init1( int flags)_
 +
  initialize an inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.563 

sys_inotify_rm_watch::

  _sys_inotify_rm_watch( int fd,  __s32 wd)_
 +
  remove an existing watch from an inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.485 

sys_io_cancel::

  _sys_io_cancel( aio_context_t ctx_id,  struct iocb *iocb,  struct io_event *result)_
 +
  cancel an outstanding asynchronous I/O operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.403 

sys_io_destroy::

  _sys_io_destroy( aio_context_t ctx)_
 +
  destroy an asynchronous I/O context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.397 

sys_io_getevents::

  _sys_io_getevents( aio_context_t ctx_id,  long min_nr,  long nr,  struct io_event *events)_
 +
  read asynchronous I/O events from the completion queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.399 

sys_io_setup::

  _sys_io_setup( unsigned nr_events,  aio_context_t *ctxp)_
 +
  create an asynchronous I/O context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.395 

sys_io_submit::

  _sys_io_submit( aio_context_t ctx_id,  long nr,  struct iocb **iocbpp)_
 +
  submit asynchronous I/O blocks for processing +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.401 

sys_ioctl::

  _sys_ioctl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_
 +
  control a STREAMS device (\fBSTREAMS\fP) +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.37 

sys_ioperm::

  _sys_ioperm( unsigned long from,  unsigned long num,  int turn_on)_
 +
  set port input/output permissions +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.349 

sys_iopl::

  _sys_iopl( unsigned int level,  struct pt_regs *regs)_
 +
  change I/O privilege level +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.347 

sys_ioprio_get::

  _sys_ioprio_get( int which,  int who)_
 +
  get/set I/O scheduling class and priority +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.479 

sys_ioprio_set::

  _sys_ioprio_set( int which,  int who,  int ioprio)_
 +
  get/set I/O scheduling class and priority +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.477 

sys_kcmp::

  _sys_kcmp( pid_t pid1,  pid_t pid2,  int type,  unsigned long idx1,  unsigned long idx2)_
 +
  compare two processes to determine if they share a kernel resource +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.599 

sys_kexec_file_load::

  _sys_kexec_file_load( int kernel_fd,  int initrd_fd,  unsigned long cmdline_len,  const char  *cmdline_ptr,  unsigned long flags)_
 +
  load a new kernel for later execution +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.615 

sys_kexec_load::

  _sys_kexec_load( unsigned long entry,  unsigned long nr_segments,  struct kexec_segment *segments,  unsigned long flags)_
 +
  load a new kernel for later execution +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.467 

sys_keyctl::

  _sys_keyctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_
 +
  key management function wrappers +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.475 

sys_kill::

  _sys_kill( pid_t pid,  int sig)_
 +
  send a signal to a process or a group of processes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.129 

sys_lchown::

  _sys_lchown( const char *filename,  uid_t user,  gid_t group)_
 +
  change the owner and group of a symbolic link +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.193 

sys_lgetxattr::

  _sys_lgetxattr( const char *pathname,  const char *name,  void *value,  size_t size)_
 +
  retrieve an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.369 

sys_link::

  _sys_link( const char *oldname,  const char *newname)_
 +
  link one file to another file relative to two directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.177 

sys_linkat::

  _sys_linkat( int oldfd,  const char *oldname,  int newfd,  const char *newname,  int flags)_
 +
  make a new name for a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.505 

sys_listen::

  _sys_listen( int fd,  int backlog)_
 +
  listen for socket connections and limit the queue of incoming +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.105 

sys_listxattr::

  _sys_listxattr( const char *pathname,  char *list,  size_t size)_
 +
  list extended attribute names +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.373 

sys_llistxattr::

  _sys_llistxattr( const char *pathname,  char *list,  size_t size)_
 +
  list extended attribute names +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.375 

sys_lookup_dcookie::

  _sys_lookup_dcookie( u64 cookie64,  long buf,  long len)_
 +
  return a directory entry's path +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.405 

sys_lremovexattr::

  _sys_lremovexattr( const char *pathname,  const char *name)_
 +
  remove an extended attribute +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.381 

sys_lseek::

  _sys_lseek( unsigned int fd,  off_t offset,  unsigned int origin)_
 +
  move the read/write file offset +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.21 

sys_lsetxattr::

  _sys_lsetxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_
 +
  set an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.363 

sys_lstat::

  _sys_lstat( const char *filename,  struct stat *statbuf)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.17 

sys_madvise::

  _sys_madvise( unsigned long start,  size_t len_in,  int behavior)_
 +
  give advice about use of memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.61 

sys_mbind::

  _sys_mbind( unsigned long start,  unsigned long len,  unsigned long mode,  unsigned long *nmask,  unsigned long maxnode,  unsigned flags)_
 +
  set memory policy for a memory range +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.449 

sys_memfd_create::

  _sys_memfd_create( const char  *uname_ptr,  unsigned int flags)_
 +
  create an anonymous file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.613 

sys_migrate_pages::

  _sys_migrate_pages( pid_t pid,  unsigned long maxnode,  const unsigned long *old_nodes,  const unsigned long *new_nodes)_
 +
  move all pages in a process to another set of nodes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.487 

sys_mincore::

  _sys_mincore( unsigned long start,  size_t len,  unsigned char *vec)_
 +
  determine whether pages are resident in memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.59 

sys_mkdir::

  _sys_mkdir( const char *pathname,  int mode)_
 +
  make a directory relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.171 

sys_mkdirat::

  _sys_mkdirat( int dfd,  const char *pathname,  int mode)_
 +
  create a directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.491 

sys_mknod::

  _sys_mknod( const char *filename,  umode_t mode,  unsigned dev)_
 +
  make directory, special file, or regular file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.271 

sys_mknodat::

  _sys_mknodat( int dfd,  const char *filename,  int mode,  unsigned dev)_
 +
  create a special or ordinary file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.493 

sys_mlock::

  _sys_mlock( unsigned long start,  size_t len)_
 +
  lock or unlock a range of process address space +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.301 

sys_mlockall::

  _sys_mlockall( int flags)_
 +
  lock/unlock the address space of a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.305 

sys_mmap::

  _sys_mmap( unsigned long addr,  unsigned long len,  unsigned long prot,  unsigned long flags,  unsigned long fd,  unsigned long off)_
 +
  map pages of memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.23 

sys_modify_ldt::

  _sys_modify_ldt( int func,  void *ptr,  unsigned long bytecount)_
 +
  get or set a per-process LDT entry +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.311 

sys_mount::

  _sys_mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_
 +
  mount filesystem +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.333 

sys_move_pages::

  _sys_move_pages( pid_t pid,  unsigned long nr_pages,  const void *pages[], const int *nodes,  int *status,  int flags)_
 +
  move individual pages of a process to another node +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.533 

sys_mprotect::

  _sys_mprotect( unsigned long start,  size_t len,  unsigned long prot)_
 +
  set protection of memory mapping +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.25 

sys_mq_getsetattr::

  _sys_mq_getsetattr( mqd_t mqdes,  const struct mq_attr *u_mqstat,  struct mq_attr *u_omqstat)_
 +
  get/set message queue attributes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.465 

sys_mq_notify::

  _sys_mq_notify( mqd_t mqdes,  const struct sigevent *u_notification)_
 +
  notify process that a message is available +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.463 

sys_mq_open::

  _sys_mq_open( const char *u_name,  int oflag,  mode_t mode,  struct mq_attr *u_attr)_
 +
  open a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.455 

sys_mq_timedreceive::

  _sys_mq_timedreceive( mqd_t mqdes,  char *u_msg_ptr,  size_t msg_len,  unsigned int *u_msg_prio,  const struct timespec *u_abs_timeout)_
 +
  receive a message from a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.461 

sys_mq_timedsend::

  _sys_mq_timedsend( mqd_t mqdes,  const char *u_msg_ptr,  size_t msg_len,  unsigned int msg_prio,  const struct timespec *u_abs_timeout)_
 +
  send a message to a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.459 

sys_mq_unlink::

  _sys_mq_unlink( const char *u_name)_
 +
  remove a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.457 

sys_mremap::

  _sys_mremap( unsigned long addr,  unsigned long old_len,  unsigned long new_len,  unsigned long flags,  unsigned long new_addr)_
 +
  remap a virtual memory address +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.55 

sys_msgctl::

  _sys_msgctl( int msqid,  int cmd,  struct msqid_ds *buf)_
 +
  XSI message control operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.147 

sys_msgget::

  _sys_msgget( key_t key,  int msgflg)_
 +
  get the XSI message queue identifier +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.141 

sys_msgrcv::

  _sys_msgrcv( int msqid,  struct msgbuf *msgp,  size_t msgsz,  long msgtyp,  int msgflg)_
 +
  XSI message receive operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.145 

sys_msgsnd::

  _sys_msgsnd( int msqid,  struct msgbuf *msgp,  size_t msgsz,  int msgflg)_
 +
  XSI message send operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.143 

sys_msync::

  _sys_msync( unsigned long start,  size_t len,  int flags)_
 +
  synchronize memory with physical storage +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.57 

sys_munlock::

  _sys_munlock( unsigned long start,  size_t len)_
 +
  unlock a range of process address space +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.303 

sys_munlockall::

  _sysSYSDEF_syscall(_munlockall,0)_
 +
  unlock the address space of a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.307 

sys_munmap::

  _sys_munmap( unsigned long addr,  size_t len)_
 +
  unmap pages of memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.27 

sys_name_to_handle_at::

  _sys_name_to_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flag)_
 +
  obtain handle +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.581 

sys_nanosleep::

  _sys_nanosleep( struct timespec *rqtp,  struct timespec *rmtp)_
 +
  high resolution sleep +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.75 

sys_newfstatat::

  _sys_newfstatat( int dfd,  const char *filename,  struct stat *statbuf,  int flag)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.499 

sys_open::

  _sys_open( const char *filename,  int flags,  int mode)_
 +
  open file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.9 

sys_open_by_handle_at::

  _sys_open_by_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flags)_
 +
  obtain handle +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.583 

sys_openat::

  _sys_openat( int dfd,  const char *filename,  int flags,  int mode)_
 +
  open file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.489 

sys_pause::

  _sysSYSDEF_syscall(_pause,0)_
 +
  suspend the thread until a signal is received +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.73 

sys_perf_event_open::

  _sys_perf_event_open( struct perf_event_attr *attr_uptr,  pid_t pid,  int cpu,  int group_fd,  unsigned long flags)_
 +
  set up performance monitoring +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.571 

sys_personality::

  _sys_personality( unsigned int personality)_
 +
  set the process execution domain +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.273 

sys_pipe::

  _sys_pipe( int *filedes)_
 +
  create an interprocess channel +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.49 

sys_pipe2::

  _sys_pipe2( int *filedes,  int flags)_
 +
  create pipe +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.561 

sys_pivot_root::

  _sys_pivot_root( const char *new_root,  const char *put_old)_
 +
  change the root mount +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.313 

sys_poll::

  _sys_poll( struct poll_fd *ufds,  unsigned int nfds,  long timeout_msecs)_
 +
  input/output multiplexing +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.19 

sys_ppoll::

  _sys_ppoll( struct pollfd *ufds,  unsigned int nfds,  struct timespec *tsp,  const sigset_t *sigmask,  size_t sigsetsize)_
 +
  wait for some event on a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.517 

sys_prctl::

  _sys_prctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_
 +
  operations on a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.317 

sys_pread64::

  _sys_pread64( unsigned long fd,  char *buf,  size_t count,  loff_t pos)_
 +
  read from or write to a file descriptor at a given offset +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.39 

sys_preadv::

  _sys_preadv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_
 +
  read or write data into multiple buffers +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.565 

sys_prlimit64::

  _sys_prlimit64( pid_t pid,  unsigned int resource,  const struct rlimit64 *new_rlim,  struct rlimit64 *old_rlim)_
 +
  get/set resource limits +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.579 

sys_process_vm_readv::

  _sys_process_vm_readv( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovec *rvec,  unsigned long riovcnt,  unsigned long flags)_
 +
  transfer data between process address spaces +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.595 

sys_process_vm_writev::

  _sys_process_vm_writev( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovcc *rvec,  unsigned long riovcnt,  unsigned long flags)_
 +
  transfer data between process address spaces +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.597 

sys_pselect6::

  _sys_pselect6( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timespec *tsp,  void *sig)_
 +
  select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.515 

sys_ptrace::

  _sys_ptrace( long request,  long pid,  unsigned long addr,  unsigned long data)_
 +
  process trace +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.207 

sys_pwrite64::

  _sys_pwrite64( unsigned int fd,  const char *buf,  size_t count,  loff_t pos)_
 +
  read from or write to a file descriptor at a given offset +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.41 

sys_pwritev::

  _sys_pwritev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_
 +
  read or write data into multiple buffers +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.567 

sys_quotactl::

  _sys_quotactl( unsigned int cmd,  const char *special,  qid_t id,  void *addr)_
 +
  manipulate disk quotas +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.355 

sys_read::

  _sys_read( unsigned int fd,  char *buf,  size_t count)_
 +
  read from a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.5 

sys_readahead::

  _sys_readahead( int fd,  loff_t offset,  size_t count)_
 +
  initiate file readahead into page cache +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.359 

sys_readlink::

  _sys_readlink( const char *path,  char *buf,  int bufsiz)_
 +
  read the contents of a symbolic link +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.183 

sys_readlinkat::

  _sys_readlinkat( int dfd,  const char *pathname,  char *buf,  int bufsiz)_
 +
  read value of a symbolic link +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.509 

sys_readv::

  _sys_readv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_
 +
  read a vector +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.43 

sys_reboot::

  _sys_reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_
 +
  reboot or enable/disable Ctrl-Alt-Del +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.341 

sys_recvfrom::

  _sys_recvfrom( int fd,  void *ubuf,  size_t size,  unsigned flags,  struct sockaddr *addr,  int *addr_len)_
 +
  receive a message from a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.95 

sys_recvmmsg::

  _sys_recvmmsg( int fd,  struct msghdr *mmsg,  unsigned int vlen,  unsigned int flags,  struct timespec *timeout)_
 +
  receive multiple messages on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.573 

sys_recvmsg::

  _sys_recvmsg( int fd,  struct msghdr *msg,  unsigned int flags)_
 +
  receive a message from a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.99 

sys_remap_file_pages::

  _sys_remap_file_pages( unsigned long start,  unsigned long size,  unsigned long prot,  unsigned long pgoff,  unsigned long flags)_
 +
  create a nonlinear file mapping +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.409 

sys_removexattr::

  _sys_removexattr( const char *pathname,  const char *name)_
 +
  remove an extended attribute +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.379 

sys_rename::

  _sys_rename( const char *oldname,  const char *newname)_
 +
  rename file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.169 

sys_renameat::

  _sys_renameat( int oldfd,  const char *oldname,  int newfd,  const char *newname)_
 +
  change the name or location of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.503 

sys_renameat2::

  _sys_renameat2( int olddfd,  const char  *oldname,  int newdfd,  const char  *newname,  unsigned int flags)_
 +
  change the name or location of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.607 

sys_request_key::

  _sys_request_key( const char *_type,  const char *_description,  const char *_callout_info,  key_serial_t destringid)_
 +
  request a key from the kernel's key management facility +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.473 

sys_restart_syscall::

  _sysSYSDEF_syscall(_restart_syscall,0)_
 +
  restart a system call after interruption by a stop signal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.415 

sys_rmdir::

  _sys_rmdir( const char *pathname)_
 +
  remove a directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.173 

sys_rt_sigaction::

  _sys_rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)_
 +
  examine and change a signal action +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.31 

sys_rt_sigpending::

  _sys_rt_sigpending( sigset_t *set,  size_t sigsetsize)_
 +
  examine pending signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.259 

sys_rt_sigprocmask::

  _sys_rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)_
 +
  examine and change blocked signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.33 

sys_rt_sigqueueinfo::

  _sys_rt_sigqueueinfo( pid_t pid,  int sig,  siginfo_t *uinfo)_
 +
  queue a signal and data +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.263 

sys_rt_sigreturn::

  _sys_rt_sigreturn( unsigned long __unused)_
 +
  return from signal handler and cleanup stack frame +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.35 

sys_rt_sigsuspend::

  _sys_rt_sigsuspend( sigset_t *unewset,  size_t sigsetsize)_
 +
  wait for a signal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.265 

sys_rt_sigtimedwait::

  _sys_rt_sigtimedwait( const sigset_t *uthese,  siginfo_t *uinfo,  const struct timespec *uts,  size_t sigsetsize)_
 +
  synchronously wait +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.261 

sys_rt_tgsigqueueinfo::

  _sys_rt_tgsigqueueinfo( pid_t tgid,  pid_t pid,  int sig,  siginfo_t *uinfo)_
 +
  queue a signal and data +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.569 

sys_sched_get_priority_max::

  _sys_sched_get_priority_max( int policy)_
 +
  get priority limits +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.295 

sys_sched_get_priority_min::

  _sys_sched_get_priority_min( int policy)_
 +
  get static priority range +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.297 

sys_sched_getaffinity::

  _sys_sched_getaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_
 +
  set and get a thread's CPU affinity mask +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.393 

sys_sched_getattr::

  _sys_sched_getattr( pid_t pid,  struct sched_attr  *attr,  unsigned int size,  unsigned int flags)_
 +
  sched_setattr, sched_getattr \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.605 

sys_sched_getparam::

  _sys_sched_getparam( pid_t pid,  struct sched_param *param)_
 +
  get scheduling parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.289 

sys_sched_getscheduler::

  _sys_sched_getscheduler( pid_t pid)_
 +
  get scheduling policy +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.293 

sys_sched_rr_get_interval::

  _sys_sched_rr_get_interval( pid_t pid,  struct timespec *interval)_
 +
  get execution time limits +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.299 

sys_sched_setaffinity::

  _sys_sched_setaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_
 +
  set and get a thread's CPU affinity mask +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.391 

sys_sched_setattr::

  _sys_sched_setattr( pid_t pid,  struct sched_attr  *attr,  unsigned int flags)_
 +
  sched_setattr, sched_getattr \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.603 

sys_sched_setparam::

  _sys_sched_setparam( pid_t pid,  struct sched_param *param)_
 +
  set scheduling parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.287 

sys_sched_setscheduler::

  _sys_sched_setscheduler( pid_t pid,  int policy,  struct sched_param *param)_
 +
  set scheduling policy and parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.291 

sys_sched_yield::

  _sysSYSDEF_syscall(_sched_yield,0)_
 +
  yield the processor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.53 

sys_seccomp::

  _sys_seccomp( unsigned int op,  unsigned int flags,  const char  *uargs)_
 +
  operate on Secure Computing state of the process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.609 

sys_select::

  _sys_select( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timeval *tvp)_
 +
  synchronous I/O multiplexing +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.51 

sys_semctl::

  _sys_semctl( int semid,  int semnum,  int cmd,  semun_u arg)_
 +
  XSI semaphore control operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.137 

sys_semget::

  _sys_semget( key_t key,  int nsems,  int semflg)_
 +
  get set of XSI semaphores +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.133 

sys_semop::

  _sys_semop( int semid,  struct sembuf *tsops,  unsigned nsops)_
 +
  XSI semaphore operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.135 

sys_semtimedop::

  _sys_semtimedop( int semid,  struct sembuf *tsops,  unsigned nsops,  const struct timespec *timeout)_
 +
  System V semaphore operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.417 

sys_sendfile::

  _sys_sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_
 +
  transfer data between file descriptors +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.85 

sys_sendmmsg::

  _sys_sendmmsg( int fd,  struct mmsghdr *mmsg,  unsigned int vlen,  unsigned int flags)_
 +
  send multiple messages on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.589 

sys_sendmsg::

  _sys_sendmsg( int fd,  struct msghdr *msg,  unsigned flags)_
 +
  send a message on a socket using a message structure +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.97 

sys_sendto::

  _sys_sendto( int fd,  void *buff,  size_t len,  unsigned flags,  struct sockaddr *addr,  int addr_len)_
 +
  send a message on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.93 

sys_set_mempolicy::

  _sys_set_mempolicy( int mode,  unsigned long *nmask,  unsigned long maxnode)_
 +
  set default NUMA memory policy for a thread and its children +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.451 

sys_set_robust_list::

  _sys_set_robust_list( struct robust_list_head *head,  size_t len)_
 +
  get/set list of robust futexes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.521 

sys_set_tid_address::

  _sys_set_tid_address( int *tidptr)_
 +
  set pointer to thread ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.413 

sys_setdomainname::

  _sys_setdomainname( char *name,  int len)_
 +
  get/set NIS domain name +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.345 

sys_setfsgid::

  _sys_setfsgid( gid_t gid)_
 +
  set group identity used for filesystem checks +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.251 

sys_setfsuid::

  _sys_setfsuid( uid_t uid)_
 +
  set user identity used for filesystem checks +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.249 

sys_setgid::

  _sys_setgid( gid_t gid)_
 +
  set-group-ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.217 

sys_setgroups::

  _sys_setgroups( int gidsetsize,  gid_t *grouplist)_
 +
  get/set list of supplementary group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.237 

sys_sethostname::

  _sys_sethostname( char *name,  int len)_
 +
  get/set hostname +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.343 

sys_setitimer::

  _sys_setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_
 +
  set the value of an interval timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.81 

sys_setns::

  _sys_setns( int fd,  int nstype)_
 +
  reassociate thread with a namespace +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.591 

sys_setpgid::

  _sys_setpgid( pid_t pid,  pid_t pgid)_
 +
  set process group ID for job control +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.223 

sys_setpriority::

  _sys_setpriority( int which,  int who,  int niceval)_
 +
  set the nice value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.285 

sys_setregid::

  _sys_setregid( gid_t rgid,  gid_t egid)_
 +
  set real and effective group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.233 

sys_setresgid::

  _sys_setresgid( gid_t rgid,  gid_t egid,  gid_t sgid)_
 +
  set real, effective and saved user or group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.243 

sys_setresuid::

  _sys_setresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_
 +
  set real, effective and saved user or group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.239 

sys_setreuid::

  _sys_setreuid( uid_t ruid,  uid_t euid)_
 +
  set real and effective user IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.231 

sys_setrlimit::

  _sys_setrlimit( unsigned int resource,  struct rlimit *rlim)_
 +
  control maximum resource consumption +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.323 

sys_setsid::

  _sysSYSDEF_syscall(_setsid,0)_
 +
  create session and set process group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.229 

sys_setsockopt::

  _sys_setsockopt( int fd,  int level,  int optname,  char *optval,  int optlen)_
 +
  set the socket options +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.113 

sys_settimeofday::

  _sys_settimeofday( struct timeval *tv,  struct timezone *tz)_
 +
  get / set time +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.331 

sys_setuid::

  _sys_setuid( uid_t uid)_
 +
  set user ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.215 

sys_setxattr::

  _sys_setxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_
 +
  set an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.361 

sys_shmat::

  _sys_shmat( int shmid,  char *shmaddr,  int shmflg)_
 +
  XSI shared memory attach operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.65 

sys_shmctl::

  _sys_shmctl( int shmid,  int cmd,  struct shmid_ds *buf)_
 +
  XSI shared memory control operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.67 

sys_shmdt::

  _sys_shmdt( char *shmaddr)_
 +
  XSI shared memory detach operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.139 

sys_shmget::

  _sys_shmget( key_t key,  size_t size,  int shmflg)_
 +
  get an XSI shared memory segment +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.63 

sys_shutdown::

  _sys_shutdown( int fd,  int how)_
 +
  shut down socket send and receive operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.101 

sys_sigaltstack::

  _sys_sigaltstack( const stack_t *uss,  stack_t *uoss)_
 +
  set and get signal alternate stack context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.267 

sys_signalfd::

  _sys_signalfd( int ufd,  sigset_t *user_mask,  size_t sizemask)_
 +
  create a file descriptor for accepting signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.539 

sys_signalfd4::

  _sys_signalfd4( int ufd,  sigset_t *user_mask,  size_t sizemask,  int flags)_
 +
  create a file descriptor for accepting signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.553 

sys_socket::

  _sys_socket( int family,  int type,  int protocol)_
 +
  create an endpoint for communication +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.87 

sys_socketpair::

  _sys_socketpair( int family,  int type,  int protocol,  int *usockvec)_
 +
  create a pair of connected sockets +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.111 

sys_splice::

  _sys_splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)_
 +
  splice data to/from a pipe +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.525 

sys_stat::

  _sys_stat( const char *filename,  struct stat *statbuf)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.13 

sys_statfs::

  _sys_statfs( const char *pathname,  struct statfs *buf)_
 +
  get filesystem statistics +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.277 

sys_swapoff::

  _sys_swapoff( const char *specialfile)_
 +
  start/stop swapping to file/device +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.339 

sys_swapon::

  _sys_swapon( const char *specialfile,  int swap_flags)_
 +
  start/stop swapping to file/device +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.337 

sys_symlink::

  _sys_symlink( const char *oldname,  const char *newname)_
 +
  make a symbolic link relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.181 

sys_symlinkat::

  _sys_symlinkat( const char *oldname,  int newfd,  const char *newname)_
 +
  make a new name for a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.507 

sys_sync::

  _sysSYSDEF_syscall(_sync,0)_
 +
  schedule file system updates +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.327 

sys_sync_file_range::

  _sys_sync_file_range( long fd,  loff_t offset,  loff_t bytes,  long flags)_
 +
  sync a file segment with disk +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.529 

sys_syncfs::

  _sys_syncfs( int fd)_
 +
  commit filesystem caches to disk +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.587 

sys_sysfs::

  _sys_sysfs( int option,  unsigned long arg1,  unsigned long arg2)_
 +
  get filesystem type information +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.281 

sys_sysinfo::

  _sys_sysinfo( struct sysinfo *info)_
 +
  return system information +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.203 

sys_syslog::

  _sys_syslog( int type,  char *buf,  int len)_
 +
  log a message +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.211 

sys_tee::

  _sys_tee( int fdin,  int fdout,  size_t len,  unsigned int flags)_
 +
  duplicating pipe content +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.527 

sys_tgkill::

  _sys_tgkill( pid_t tgid,  pid_t pid,  int sig)_
 +
  send a signal to a thread +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.445 

sys_time::

  _sys_time( time_t *tloc)_
 +
  get time +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.387 

sys_timer_create::

  _sys_timer_create( const clockid_t which_clock,  struct sigevent *timer_event_spec,  timer_t *created_timer_id)_
 +
  create a per-process timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.421 

sys_timer_delete::

  _sys_timer_delete( timer_t timer_id)_
 +
  delete a per-process timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.429 

sys_timer_getoverrun::

  _sys_timer_getoverrun( timer_t timer_id)_
 +
  link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.427 

sys_timer_gettime::

  _sys_timer_gettime( timer_t timer_id,  struct itimerspec *setting)_
 +
  arm/disarm and fetch +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.425 

sys_timer_settime::

  _sys_timer_settime( timer_t timer_id,  int flags,  const struct itimerspec *new_setting,  struct itimerspec *old_setting)_
 +
  arm/disarm and fetch +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.423 

sys_timerfd_create::

  _sys_timerfd_create( int clockid,  int flags)_
 +
  timerfd_create, timerfd_settime, timerfd_gettime \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.541 

sys_timerfd_gettime::

  _sys_timerfd_gettime( int ufd,  struct itimerspec *otmr)_
 +
  timerfd_create, timerfd_settime, timerfd_gettime \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.549 

sys_timerfd_settime::

  _sys_timerfd_settime( int ufd,  int flags,  const struct itimerspec *utmr,  struct itimerspec *otmr)_
 +
  timerfd_create, timerfd_settime, timerfd_gettime \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.547 

sys_times::

  _sys_times( struct sysinfo *info)_
 +
  get process and waited-for child process times +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.205 

sys_tkill::

  _sys_tkill( pid_t pid,  int sig)_
 +
  send a signal to a thread +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.385 

sys_truncate::

  _sys_truncate( const char *path,  long length)_
 +
  truncate a file to a specified length +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.157 

sys_umask::

  _sys_umask( int mask)_
 +
  set and get the file mode creation mask +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.195 

sys_umount2::

  _sys_umount2( const char *target,  int flags)_
 +
  unmount filesystem +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.335 

sys_uname::

  _sys_uname( struct old_utsname *name)_
 +
  get the name of the current system +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.131 

sys_unlink::

  _sys_unlink( const char *pathname)_
 +
  remove a directory entry relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.179 

sys_unlinkat::

  _sys_unlinkat( int dfd,  const char *pathname,  int flag)_
 +
  delete a name and possibly the file it refers to +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.501 

sys_unshare::

  _sys_unshare( unsigned long unshare_flags)_
 +
  disassociate parts of the process execution context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.519 

sys_ustat::

  _sys_ustat( unsigned dev,  struct ustat *ubuf)_
 +
  get filesystem statistics +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.275 

sys_utime::

  _sys_utime( char *filename,  struct utimbuf *times)_
 +
  set file access and modification times +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.269 

sys_utimensat::

  _sys_utimensat( int dfd,  const char *filename,  struct timespec *utimes, int flags)_
 +
  set file access and modification times relative to directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.535 

sys_utimes::

  _sys_utimes( char *filename,  struct timeval *utimes)_
 +
  change file last access and modification times +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.447 

sys_vfork::

  _sysSYSDEF_syscall(_vfork,0)_
 +
  create a child process and block parent +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.121 

sys_vhangup::

  _sysSYSDEF_syscall(_vhangup,0)_
 +
  virtually hangup the current terminal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.309 

sys_vmsplice::

  _sys_vmsplice( int fd,  const struct iovec *iov,  unsigned long nr_segs, unsigned int flags)_
 +
  splice user pages to/from a pipe +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.531 

sys_wait4::

  _sys_wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)_
 +
  wait for process to change state, BSD style +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.127 

sys_waitid::

  _sys_waitid( int which,  pid_t upid,  struct siginfo *infop,  int options,  struct rusage *ru)_
 +
  wait for a child process to change state +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.469 

sys_write::

  _sys_write( unsigned int fd,  const char *buf,  size_t count)_
 +
  write on a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.7 

sys_writev::

  _sys_writev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_
 +
  write a vector +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.45 