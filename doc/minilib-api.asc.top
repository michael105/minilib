 minilib api
=============



Only functions defined are going to be built.

The given sizes are estimations, each function added as single function within
a binary that much bytes to the overall size.

It is however not possible to give exact numbers, these depend on how much the compiler
can optimize for each call. What is different each time, depending on the circumstances.

To complicate things more, some functions will be inlined, others will be reused.

And, the choosen linker script will have it's (sometimes surprising) influence.


 Config
--------


In addition to the switches, which are built of the function's name and the prefix 'mini_'; +
e.g. 'mini_fputs', these switches are defined for the configuration of minilib:


mini_start:: 
	Built the start routine, which is needed for startup of the binary.


mini_buf 512::
	the buf size in Bytes, which is used by minilib for input/output functions,
	the globals and malloc/free. 
	Uncomment this, if you do not need globals or functions,
	depending on the buffer.


globals_on_stack::
  put the minibuf and all globals onto the stack
	(this enables to omit all sections besides text and stack of the binary,
	for aggressive size optimization)
	The address of the globals is going to be stored within a fixed cpu register. (r15 at amd64)
	

mini_syscalls::
	define the syscall wrapper, starting with 'sys_'


HEADERGUARDS::
	define the headeguards, which hopefully prevent the inclusion
	of the standard library headers.


OPTFLAG -Os::
  optimization Flag. Os,O1,O2 might be save. O3 is known to cause sometimes trouble


   e.g. OPTFLAG '-g -O0'
   (compile with debug info)


STRIPFLAG::
  stripflag ( defaults to -s)
	Leaving 'STRIPFLAG' alone removes the flag parameter from gcc's commandline.


INCLUDESRC::
  Build minilib with source. 
	Without this switch, only defines and declarations are built
	When building with several object files, most probably you should 
	enable this flag only for one object file.
	It's also possible to pass the switch via a define flag to gcc.
	('-DINCLUDESRC')


LDSCRIPT default::
  
	The ldscript to use +
  Can be one of: default, onlytext, textandbss +
  Defines, which executable sections are going to be built. +
  *default*: .text .data .rodata .bss (.stack) +
  *onlytext*: .text (.stack) +
  *textandbss*: .text .bss (.stack)


SHRINKELF::
  Shrink the compiled binary with shrinkelf. +
	Aggressively strip the elf headers.


DEBUG::
  generate debug info (-O0 -g). Overwrites OPTFLAG, STRIPFLAG and SHRINKELF




:toc:



