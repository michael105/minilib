### assorted notes


OPTIMIZE
adding comments, where optimzations would be useful.
marked with OPTIMIZE
In favour of size I'm leaving this for now.
Add a compile switch mini_optimize ?
Add a compile switch for sse/mmx instructions?



closures.
When closures are used, 
gcc has to generate trampoline code.
For this, the stack has to be executable.
There are notes within the ldscripts,
in howto get an executable stack.

Renmoving the PT_STACK program header is another possibilty,
which also saves a few bytes.
The kernel will make the stack executable,
when the according program header isn't present.

The general opinion, this would be a security risk,
 is plain wrong. The risk is there, if user input
 is unchecked pushed onto the stack, what could lead 
 to a stack overflow. But that's not really a difference to having 
 an overflow within the bss or data section, for example.

 The problem is there cause of unchecked input,
 what cannot be fixed by making the stack not executable.

I leave the stack unexecutable, albite this needs a few bytes.
Just cause I know, malware scanning software would alarm.
But. it is close to nonsense.


about the differences of scripts and c

seems, there should be something in between.
would be better, having init scripts to be compiled binaries.

so - I believe, the biggest difference is the one step more.

scripts are just executed.
c programs need to be compiled first, then run.

This is already overcome with the switch --exec to mini-gcc.

another difference: scripts start at the top.

c programs at main.


have to test closures in c.

My idea is about a conglomeration of c and script.

Somehow a reinvention of the wheel,
and sametime, it's not very much work to implement.

There are just some basic design questions:

 what to do with errors?
 pipes and redirections - not very asthetic,
  but easy with macros like PIPE( cmd1, cmd2 )
	can also be recursive.
	PIPE( cmd1, PIPE( cmd2, cmd3 ) )

hard to read.

cpp would be advantegeous.

there it might be possible to overwrite the '|' operator.

or write the own parser.
the parser just needs to recognize unquoted |,>


another option:
 
 doing a preparser,
 just translating everything not being c to c.

 (would also omit the ugly construct of 
 #if 0
 ...
 return
 #endif

next idea. 
 in general, boot scripts might have 3 stages:
 init, run, shutdown

 so - write 3 makros.
 instead of int main(...)
 just 

 boot (
 )
 run (
 )
 shutdown (
 )

way better. and stupidly simple.

so boot, run and shutdown can be compiled.
on the otherside. 



---

ldscript default and 
defining mini_errno gives troubles.
segfaults.
sametime, ldscript textandbss 
bloat sometimes up to 20 kB.
strange. Both. Seems to me being related.
Most possibly the globals.

Test: the stack address is known, 
it's set by the ldscripts.
possibly drop the globals, instead 
"push" the vars on the stack.

I'm quite sure, either gcc or ld messes this up yet.



Stackguard:
	gcc is able to emit "pre code" for each function.
	There: call another function, and jump back.
	->ret of the "main function" will "return" here.
	->check for stack integrity, and do the second ret here

 -- possibly better do not add more code, which has again its vulnerabilities.
 better make the given functions saver. / strip them
 some of them simply have been written/specified, before things like stackoverflows have been known.
 unsave code cannot be made save by adding more code, which possibly has its own flaws.
 just know I'm thinking of another option: adding new types, for , e.g. sscanf.
 the new type can be located at the beginning of the stack. 
 (or in its own segment?)
 Therefore, a stackoverflow would not be possible anymore,
 only a segfault.

 But these stackguards - afaik, someone already has overcome it,
 as well as with position independent code, randomized in ram.

 Yet, there's no scanf within minilib. 
 Possibly I shouldn't add one at all.

 I already have some headache with fgets sort.


Config system:
	-Write docu into the "template" config.
	-Hint to the template config files
	-Write "config-sets": e.g.: 

arch amd64   # this exits or jumps to another section, when another arch is selected
OPTION 1
OPTION 2
...
arch Darwin
...
#  and so on


Also: 
mini_printf allformats

....


printf_allformats(){
	atoi
	itohex
	...
}


Something breaks the config generation. (mini-gcc --genconf)
It might be related to the header inclusion,
and the headerguards.
But that's only a guess.

Sometimes unneeded functions are defined,
needed functions not.
:/

same with the config file generation for multiple source files.
I do have to check that.



pipe and prepend to gcc input:
  gcc -E main2.c -include <( cat prep2.h )

print matching part
  gcc -E main2.c -include <( cat prep2.h ) | sed -n -e '/PP/p' | sed 's/ *P//;s/(.*//'
gcc -E main2.c -include <( cat prep2.h ) | sed -n 's/^.*\(P.*\)(.*/\1/p'

gcc -E main2.c -include <( cat prep2.h ) | sed -n 's/^.*\(P.*\)(.*/\1/p' | sort -u 


cat minilib.genconf.h | ( ./mini-gcc -E hello.c -include <( cat - ) )



git push origin HEAD:devel

security at all:
	non executable stack
	non writable text
	text segment only executable segment.
(also: comparison to, e.g, the xserver..)

	
tools for analzying elf files:
	readelf
	elfls (elfkickers)
	dumpelf
	objdump



(possibility: self check)
  ->(optional) binary only code for the selfcheck

all pointers within another section
 sectionstarts randomized
 (stack randomized)


ENV should be copied into another section than stack at program start,
when enabling security
malloc and free should check memory integrity on invocation.

the stack could also add some randomized bytes,
possibly even misleading bytes. 
(there could be misleading links injected, e.g)


C definitions from: 
http://flint.cs.yale.edu/cs422/
 -> "Executable and Linkable Format (ELF)" 
http://flint.cs.yale.edu/cs422/doc/ELF_Format.pdf
 (p.53)




obfuscate the jmp from the (returned) stack guarded function:
jmp WITHIN another instruction.


--only-text could get selected automatic: bss/data sections aren't needed, when no globals are defined..
 so: insert a bss section var into genconfig.sh 
 done. ("LDSCRIPT textonly")


headers (compat-headers): also possible to just define e.g. _STDIO_H
and configure minilib instead. 


) This example uses %=. %= in an assembler template is replaced with a number that is "unique to each insn in the entire compilation. This is useful for making local labels that are referred to more than once in a given insn." Note that to use %=, you (apparently) must have at least one input (although you probably don't have to actually use it).

int a = 3;
asm (
    "test %0\n\t"
    "jnz to_here%=\n\t"
    "jz to_there%=\n\t"
    "to_here%=:\n\t"
    "to_there%=:"
    ::"r" (a));


vim syntaxcheck options.
:let g:syntastic_c_compiler_options = '-ansi -include ../syntaxhcheck.h'



it should be minilib-bundle, not compiled.
or minilib-bl.h .?
or minilib-comp.h .?


Ok. further thinking - 
	Finally it's seems to be going to be a header only library.
	Posibly it's a matter, of how large the whole lib will be.
	I compile time is neglectible, as now, (fractions of a second)
	most possibly it's best to call the bundled header simply minilib.h

	But that's hard to decide for now.
	It's also a question of how this lib is better to get used to.


Make it possible to embedd the configured header into a "target",
 while still staying platform independent. (-> needs sort of parsing of the ifdef switches)
 .. ok . possibly not soo smart. The compile-switches are still needed, so..

compile switches in config.h : 
	parameters, e.g.: yes | optimize | threadsafe | 

	param checking:
	#ifdef .. #ifdef p1 else ifdef p2 else error


It's sort of hard to disassemble the compiled binaries.
common tools dont work, cause of missing section headers /
They dont disassemble the whole files.

What worked:

dump out the file as hex
hexdump hello-combined | perl -pe 's/^\S*//'

use the live view at 
https://onlinedisassembler.com/odaweb/xEtAyUIX/0




git:


checkout erlier version:
git checkout ID



  clone including submodules
git clone --recurse-submodules git://github.com/foo/bar.git

update submodules 
 git submodule update --init --recursive

git submodule add git://git.mysociety.org/commonlib commonlib

 Good looking mini script. Possibly I'll need it
from 		https://cemerick.com/2009/09/28/working-with-git-submodules-recursively/
------
#!/bin/sh
 
case "$1" in
        "init") CMD="submodule update --init" ;;
        *) CMD="$*" ;;
esac
 
git $CMD
git submodule foreach "$0" $CMD
------


push to another remote branch
	git push origin HEAD:devel


set remote branch:
git branch --set-upstream-to=origin/master
git branch --set-upstream-to=origin/devel


create local branch devel:

git checkout -b devel

git push --set-upstream origin devel


push to remote master from local devel branch
git push origin devel:master [-f]


(from: https://rogerdudler.github.io/git-guide/ )

CREATE a new branch named "feature_x" and switch to it using
git checkout -b feature_x

switch back to master
git checkout master

and delete the branch again

git branch -d feature_x

a branch is not available to others unless you push the branch to your remote repository
git push origin <branch>

..
to merge another branch into your active branch (e.g. master), use
git merge <branch>


in both cases git tries to auto-merge changes. 
Unfortunately, this is not always possible and results in conflicts. 
You are responsible to merge those conflicts manually by editing the files shown by git. 
After changing, you need to mark them as merged with
git add <filename>
before merging changes, you can also preview them by using
git diff <source_branch> <target_branch>



push to devel (from devel-HEAD)

git push github devel-HEAD:devel


tagging

git tag v1.4
  or
git tag -a v1.4 -m "my version 1.4"

  push tag:
git push origin v1.4


  remove tag locally and remote
git tag -d 12345 
git push origin :refs/tags/12345


You can create a new tag named 1.0.0 by executing
git tag 1.0.0 1b2e1d63ff
the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. 
You can get the commit id by looking at the log
git log

To see a very compressed log where each commit is one line:
git log --pretty=oneline

git log --graph --oneline --decorate --all


hints

built-in git GUI
gitk
use colorful git output
git config color.ui true
show log on just one line per commit
git config format.pretty oneline
use interactive adding
git add -i


(links at the bottom of https://rogerdudler.github.io/git-guide/ seem good)



