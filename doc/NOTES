### assorted notes



It's sort of hard to disassemble the compiled binaries.
common tools dont work, cause of missing section headers /
They dont disassemble the whole files.

What worked:

dump out the file as hex
hexdump hello-combined | perl -pe 's/^\S*//'

use the live view at 
https://onlinedisassembler.com/odaweb/xEtAyUIX/0




git:


checkout erlier version:
git checkout ID



  clone including submodules
git clone --recurse-submodules git://github.com/foo/bar.git

update submodules 
 git submodule update --init --recursive

git submodule add git://git.mysociety.org/commonlib commonlib

 Good looking mini script. Possibly I'll need it
from 		https://cemerick.com/2009/09/28/working-with-git-submodules-recursively/
------
#!/bin/sh
 
case "$1" in
        "init") CMD="submodule update --init" ;;
        *) CMD="$*" ;;
esac
 
git $CMD
git submodule foreach "$0" $CMD
------


push to another remote branch
	git push origin HEAD:devel


set remote branch:
git branch --set-upstream-to=origin/master
git branch --set-upstream-to=origin/devel


create local branch devel:

git checkout -b devel

git push --set-upstream origin devel


push to remote master from local devel branch
git push origin devel:master [-f]


(from: https://rogerdudler.github.io/git-guide/ )

CREATE a new branch named "feature_x" and switch to it using
git checkout -b feature_x

switch back to master
git checkout master

and delete the branch again

git branch -d feature_x

a branch is not available to others unless you push the branch to your remote repository
git push origin <branch>

..
to merge another branch into your active branch (e.g. master), use
git merge <branch>


in both cases git tries to auto-merge changes. 
Unfortunately, this is not always possible and results in conflicts. 
You are responsible to merge those conflicts manually by editing the files shown by git. 
After changing, you need to mark them as merged with
git add <filename>
before merging changes, you can also preview them by using
git diff <source_branch> <target_branch>


tagging

git tag v1.4
  or
git tag -a v1.4 -m "my version 1.4"

  push tag:
git push origin v1.4


  remove tag locally and remote
git tag -d 12345 
git push origin :refs/tags/12345


You can create a new tag named 1.0.0 by executing
git tag 1.0.0 1b2e1d63ff
the 1b2e1d63ff stands for the first 10 characters of the commit id you want to reference with your tag. 
You can get the commit id by looking at the log
git log

To see a very compressed log where each commit is one line:
git log --pretty=oneline

git log --graph --oneline --decorate --all


useful hints

built-in git GUI
gitk
use colorful git output
git config color.ui true
show log on just one line per commit
git config format.pretty oneline
use interactive adding
git add -i


(links at the bottom of https://rogerdudler.github.io/git-guide/ seem good)



