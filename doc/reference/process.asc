== process



[[abort]]
abort::

  _void abort()_ + 
 *Defines:* getpid memcpy write + 
link:../../src/abort.c[../src/abort.c] l.3 manpage: link:../manpages/stdlib/abort.3.rst[abort] +


[[atexit]]
atexit::

  _int atexit( functionp* func )_ + 
 *Defines:* globals + 
-----
register functions, which are callen on exit in reverse order
 the switch mini_atexit takes a optional number,
 which defines the maximum numbers of functions to be registered.
 (defaults to 8)
-----
link:../../src/atexit.c[../src/atexit.c] l.7 manpage: link:../manpages/stdlib/atexit.3.rst[atexit] +


[[clone]]
clone::

  _int clone( int clone_flags,  unsigned long stack,  void *parent_tid,  void *child_tid)_ + 
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.200 

[[clone_t]]
clone_t::

  _int clone_t(int flags)_ + 
link:../../include/clone.h[../include/clone.h] l.7 

[[execl]]
execl::

  _int execl(const char *pathname, const char* arg0,... )_ + 
 *Defines:* environ execve + 
link:../../src/execl.c[../src/execl.c] l.6 manpage: link:../manpages/gen/exec.3.rst[execl] +


[[execv]]
execv::

  _int execv(const char *pathname, char *const argv[])_ + 
 *Defines:* execve environ + 
 *execute a file*
Size: ~300B link:../../src/execvp.c[../src/execvp.c] l.9 manpage: link:../manpages/gen/exec.3.rst[execv] +


[[execve]]
execve::

  _int execve( const char *filename,  char* const* argv, char* const* envp)_ + 
 *execute program*
Size: ~53B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.127 manpage: link:../manpages/sys/execve.2.rst[execve] +


[[execveat]]
execveat::

  _int execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)_ + 
 *execute program relative to a directory file descriptor*
Size: ~158B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.157 

[[execvp]]
execvp::

  _int execvp(const char *file, char *const argv[])_ + 
 *Defines:* environ access execve + 
 *execute a file*
Size: ~556B link:../../src/execvp.c[../src/execvp.c] l.58 manpage: link:../manpages/gen/exec.3.rst[execvp] +


[[execvpe]]
execvpe::

  _int execvpe(const char *file, char *const argv[], char *const envp[])_ + 
 *Defines:* environ execve access + 
 *execute a file*
-----
When invoked with a filename, starting with "." or "/",
 interprets this as absolute path. (calls execve with the pathname)
 Looks for file in the PATH environment, othwerise.
-----
Size: ~556B link:../../src/execvp.c[../src/execvp.c] l.18 

[[fexecve]]
fexecve::

  _int fexecve(int fd, char *const argv[], char *const envp[])_ + 
 *execute a file*
Size: ~151B link:../../include/fexecve.h[../include/fexecve.h] l.3 manpage: link:../manpages/sys/execve.2.rst[fexecve] +


[[fexecveat]]
fexecveat::

  _int fexecveat(int fd, char *const argv[], char *const envp[])_ + 
Size: ~151B link:../../include/fexecveat.h[../include/fexecveat.h] l.3 

[[fork]]
fork::

  _int DEF_syscall(fork,0)_ + 
 *create a new process*
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.131 manpage: link:../manpages/sys/fork.2.rst[fork] +


[[getenv]]
getenv::

  _char* getenv(const char* name)_ + 
 *Defines:* environ + 
 *get value of an environment variable*
Size: ~106B link:../../src/getenv.c[../src/getenv.c] l.8 manpage: link:../manpages/stdlib/getenv.3.rst[getenv] +


[[getpgrp]]
getpgrp::

  _int DEF_syscall(getpgrp,0)_ + 
 *get the process group ID of the calling process*
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.190 manpage: link:../manpages/sys/getpgrp.2.rst[getpgrp] +


[[getpid]]
getpid::

  _int DEF_syscall(getpid,0 )_ + 
 *get the process ID*
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.145 manpage: link:../manpages/sys/getpid.2.rst[getpid] +


[[getppid]]
getppid::

  _int DEF_syscall(getppid,0)_ + 
 *get the parent process ID*
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.187 manpage: link:../manpages/sys/getpid.2.rst[getppid] +


[[setpgid]]
setpgid::

  _int setpgid( pid_t pid, pid_t pgid)_ + 
 *set process group ID for job control*
Size: ~63B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.188 manpage: link:../manpages/sys/setpgid.2.rst[setpgid] +


[[setsid]]
setsid::

  _int DEF_syscall(setsid,0 )_ + 
 *create session and set process group ID*
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.146 manpage: link:../manpages/sys/setsid.2.rst[setsid] +


[[system]]
system::

  _int system( const char* command )_ + 
 *Defines:* wait4 environ vfork execve write + 
 *issue a command*
Size: ~326B link:../../src/system.c[../src/system.c] l.4 manpage: link:../manpages/stdlib/system.3.rst[system] +


[[vexec]]
vexec::

  _int vexec( const char* path, char* const* argv, char* const* envp )_ + 
 *Defines:* wait4 seterrno + 
-----
execute a path, wait until the executed file exits.
 Deviating of system() an absolute pathname is taken.
 sets errno on error.
-----
link:../../src/vexec.c[../src/vexec.c] l.6 

[[vexec_q]]
vexec_q::

  _int vexec_q( const char* path, char* const* argv, char* const* envp )_ + 
 *Defines:* seterrno + 
-----
execute a path, wait until the executed file exits, 
 do not write any output of the process. (close stdout)
 Deviating of system() an absolute pathname is taken.
-----
link:../../src/vexec.c[../src/vexec.c] l.30 

[[vfork]]
vfork::

  _int DEF_syscall(vfork,0)_ + 
 *create a child process and block parent*
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.132 manpage: link:../manpages/sys/vfork.2.rst[vfork] +
