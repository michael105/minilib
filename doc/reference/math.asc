== math



abs::

  _int abs(int i)_ + 
 *return an integer absolute value*
link:../../include/math.h[../include/math.h] l.25 manpage: link:manpages/stdlib/abs.3.rst[abs] +


div::

  _div_t div(int numerator, int denominator)_ + 
 *compute the quotient and remainder of an integer division*
Size: ~84B link:../../include/math.h[../include/math.h] l.8 manpage: link:manpages/stdlib/div.3.rst[div] +


djb2_hash::

  _unsigned long djb2_hash(const unsigned char *str)_ + 
-----
hashes, from d.j.Bernstein
 (http://www.cse.yorku.ca/~oz/hash.html)
 I've tested djb2_hash, and it gives quite good results.
 But I'm sure, Bernstein did think and test his algorithm sincerely.
 When combining djb2_hash and sdbm_hash, the probability of collisions
 might tend to zero.
 Me I'm going this way. I guess. I might check djb2_hash for collisions within a space of around 8 digits.
-----
Size: ~86B link:../../src/hashes.c[../src/hashes.c] l.10 

labs::

  _long int labs(long int i)_ + 
 *return a long integer absolute value*
Size: ~46B link:../../include/math.h[../include/math.h] l.30 manpage: link:manpages/stdlib/labs.3.rst[labs] +


ldiv::

  _ldiv_t ldiv(long int numerator, long int denominator)_ + 
 *compute quotient and remainder of a long division*
Size: ~82B link:../../include/math.h[../include/math.h] l.16 manpage: link:manpages/stdlib/ldiv.3.rst[ldiv] +


rand::

  _unsigned int rand()_ + 
Size: ~118B link:../../src/rand.c[../src/rand.c] l.15 manpage: link:manpages/stdlib/rand.3.rst[rand] +


sdbm_hash::

  _unsigned long sdbm_hash(const unsigned char *str)_ + 
Size: ~80B link:../../src/hashes.c[../src/hashes.c] l.21 

srand::

  _void srand( unsigned int i )_ + 
 *pseudo-random number generator*
Size: ~48B link:../../src/rand.c[../src/rand.c] l.7 manpage: link:manpages/stdlib/rand.3.rst[srand] +
