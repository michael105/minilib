== system



chroot::

  _int chroot( const char *filename)_ + 
 *change root directory*
Size: ~47B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.141 manpage: link:manpages/sys/chroot.2.rst[chroot] +


getgid::

  _int DEF_syscall(getgid,0)_ + 
 *get the real group ID*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.189 manpage: link:manpages/sys/getgid.2.rst[getgid] +


getuid::

  _int DEF_syscall(getuid,0)_ + 
 *get a real user ID*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.191 manpage: link:manpages/sys/getuid.2.rst[getuid] +


ioctl::

  _int volatile   ioctl( int fd, unsigned long int request, ... )_ + 
 *control a STREAMS device (\fBSTREAMS\fP)*
Size: ~319B link:../src/ioctl.c[../src/ioctl.c] l.11 manpage: link:manpages/sys/ioctl.2.rst[ioctl] +


macro::

  _void  optimization_fence(void*p){}_ + 
-----
prevent optimizations.
 cast a var to void*, and calling this,
 leaves the compiler unknown on what he can strip.
 (noipa) means the compiler doesn't know, what the function itself does.
 (the function does nothing, but don't tell that gcc, please..)
 therefore, everything used as parameter to this function,
 will be calculated, defined, and so on before.
 It's used for the globals, 
 shich are pushed within _start onto the stack.
 since _start itself only provides a global pointer,
 and initialitzes some of the globals,
 but doesn't use them again,
 this construction is needed.
 more funnily, the function will never be called.
 It's past the asm inline syscall to exit.
 But again, luckily gcc doesn't know.
 All other options, like having the globals volatile, 
 setting the optimization flag of _start to 0, 
 having a volatile asm call with the globals as param, and so on,
 have been useless. All after all, seems to me, ai has it's restrictions.
-----
Size: ~32B link:../include/minilib_global.h[../include/minilib_global.h] l.90 

mknod::

  _int mknod( const char *filename,  umode_t mode,  unsigned dev)_ + 
 *make directory, special file, or regular file*
Size: ~73B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.211 manpage: link:manpages/sys/mknod.2.rst[mknod] +


mount::

  _int mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_ + 
 *mount filesystem*
Size: ~151B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.168 manpage: link:manpages/sys/mount.2.rst[mount] +


pivot_root::

  _int pivot_root( const char *new_root,  const char *put_old)_ + 
 *change the root mount*
Size: ~53B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.142 

reboot::

  _int reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_ + 
 *reboot or enable/disable Ctrl-Alt-Del*
Size: ~139B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.166 manpage: link:manpages/sys/reboot.2.rst[reboot] +


setgid::

  _int setgid( gid_t gid)_ + 
 *set-group-ID*
Size: ~51B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.147 manpage: link:manpages/sys/setuid.2.rst[setgid] +


setgroups::

  _int setgroups( int gidsetsize,  gid_t *grouplist)_ + 
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.182 manpage: link:manpages/sys/setgroups.2.rst[setgroups] +


setuid::

  _int setuid( uid_t uid)_ + 
 *set user ID*
Size: ~51B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.148 manpage: link:manpages/sys/setuid.2.rst[setuid] +


sync::

  _int DEF_syscall(sync,0)_ + 
 *schedule file system updates*
link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.124 manpage: link:manpages/sys/sync.2.rst[sync] +


umount2::

  _int umount2( const char *mountpoint, int flags)_ + 
 *unmount filesystem*
Size: ~59B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.164 

uname::

  _int uname(struct old_utsname *name )_ + 
 *get the name of the current system*
Size: ~41B link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.152 manpage: link:manpages/gen/uname.3.rst[uname] +
