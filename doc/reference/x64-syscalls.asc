== x64-syscalls


 Syscalls, available at linux 64bit.

 In order to use them, you have to define 'mini_syscalls".
 
 This will define all the syscalls, prefixed with 'sys_'.

 It is however not guaranteed, that the used stuctures and datatypes are implemented,
 some of them might be only predeclared.

 When 'mini_errno' is defined, all syscalls do return on error -1, and set errno.

 When errno is not defined, the syscalls return on error the negative value of errno.
 Not using the global errno spares some bytes and ressources, and eventually
 global variables at all. (Important when using threads)




[[sys__sysctl]]
sys__sysctl::

  _sys__sysctl( struct __sysctl_args *args)_ + 
 *read/write system parameters*


[[sys_accept]]
sys_accept::

  _sys_accept( int fd,  struct sockaddr *upeersockaddr,  int *upeeraddrlen)_ + 
 *accept a new connection on a socket*


[[sys_accept4]]
sys_accept4::

  _sys_accept4( int fd,  struct sockaddr *upeer_sockaddr,  int *upeer_addrlen,  int flags)_ + 
 *accept a connection on a socket*


[[sys_access]]
sys_access::

  _sys_access( const char *filename,  int mode)_ + 
 *determine accessibility of a file relative to directory file*


[[sys_acct]]
sys_acct::

  _sys_acct( const char *name)_ + 
 *switch process accounting on or off*


[[sys_add_key]]
sys_add_key::

  _sys_add_key( const char *_type,  const char *_description,  const void *_payload,  size_t plen)_ + 
 *add a key to the kernel's key management facility*


[[sys_adjtimex]]
sys_adjtimex::

  _sys_adjtimex( struct timex *txc_p)_ + 
 *tune kernel clock*


[[sys_alarm]]
sys_alarm::

  _sys_alarm( unsigned int seconds)_ + 
 *schedule an alarm signal*


[[sys_arch_prctl]]
sys_arch_prctl::

  _sys_arch_prctl( struct task_struct *task,  int code,  unsigned long *addr)_ + 
 *set architecture-specific thread state*


[[sys_bind]]
sys_bind::

  _sys_bind( int fd,  struct sockaddr *umyaddr,  int addrlen)_ + 
 *bind a name to a socket*


[[sys_brk]]
sys_brk::

  _long sys_brk(unsigned long addr)_ + 
 *change data segment size*


[[sys_capget]]
sys_capget::

  _sys_capget( cap_user_header_t header,  cap_user_data_t dataptr)_ + 
 *set/get capabilities of thread(s)*


[[sys_capset]]
sys_capset::

  _sys_capset( cap_user_header_t header,  const cap_user_data_t data)_ + 
 *set/get capabilities of thread(s)*


[[sys_chdir]]
sys_chdir::

  _sys_chdir( const char *filename)_ + 
 *change working directory*


[[sys_chmod]]
sys_chmod::

  _sys_chmod( const char *filename,  mode_t mode)_ + 
 *change mode of a file relative to directory file descriptor*


[[sys_chown]]
sys_chown::

  _sys_chown( const char *filename,  uid_t user,  gid_t group)_ + 
 *change owner and group of a file relative to directory*


[[sys_chroot]]
sys_chroot::

  _sys_chroot( const char *filename)_ + 
 *change root directory*


[[sys_clock_adjtime]]
sys_clock_adjtime::

  _sys_clock_adjtime( clockid_t which_clock,  struct timex *tx)_ + 


[[sys_clock_getres]]
sys_clock_getres::

  _sys_clock_getres( const clockid_t which_clock,  struct timespec *tp)_ + 


[[sys_clock_gettime]]
sys_clock_gettime::

  _sys_clock_gettime( const clockid_t which_clock,  struct timespec *tp)_ + 
 *clock and time functions*


[[sys_clock_nanosleep]]
sys_clock_nanosleep::

  _sys_clock_nanosleep( const clockid_t which_clock,  int flags,  const struct timespec *rqtp,  struct timespec *rmtp)_ + 
 *high resolution sleep with specifiable clock*


[[sys_clock_settime]]
sys_clock_settime::

  _sys_clock_settime( const clockid_t which_clock,  const struct timespec *tp)_ + 
 *clock and timer functions*


[[sys_clone]]
sys_clone::

  _sys_clone( unsigned long clone_flags,  unsigned long newsp,  void *parent_tid,  void *child_tid)_ + 
 *create a child process*


[[sys_close]]
sys_close::

  _sys_close( unsigned int fd)_ + 
 *close a file descriptor*


[[sys_connect]]
sys_connect::

  _sys_connect( int fd,  struct sockaddr *uservaddr,  int addrlen)_ + 
 *connect a socket*


[[sys_creat]]
sys_creat::

  _sys_creat( const char *pathname,  int mode)_ + 
 *create a new file or rewrite an existing one*


[[sys_delete_module]]
sys_delete_module::

  _sys_delete_module( const char *name_user,  unsigned int flags)_ + 
 *unload a kernel module*


[[sys_dup]]
sys_dup::

  _sys_dup( unsigned int fildes)_ + 
 *duplicate an open file descriptor*


[[sys_dup2]]
sys_dup2::

  _sys_dup2( unsigned int oldfd,  unsigned int newfd)_ + 
 *duplicate a file descriptor*


[[sys_dup3]]
sys_dup3::

  _sys_dup3( unsigned int oldfd,  unsigned int newfd,  int flags)_ + 
 *duplicate a file descriptor*


[[sys_epoll_create]]
sys_epoll_create::

  _sys_epoll_create( int size)_ + 
 *open an epoll file descriptor*


[[sys_epoll_create1]]
sys_epoll_create1::

  _sys_epoll_create1( int flags)_ + 
 *open an epoll file descriptor*


[[sys_epoll_ctl]]
sys_epoll_ctl::

  _sys_epoll_ctl( int epfd,  int op,  int fd,  struct epoll_event *event)_ + 
 *control interface for an epoll file descriptor*


[[sys_epoll_pwait]]
sys_epoll_pwait::

  _sys_epoll_pwait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout,  const sigset_t *sigmask,  size_t sigsetsize)_ + 
 *wait for an I/O event on an epoll file descriptor*


[[sys_epoll_wait]]
sys_epoll_wait::

  _sys_epoll_wait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout)_ + 
 *wait for an I/O event on an epoll file descriptor*


[[sys_eventfd]]
sys_eventfd::

  _sys_eventfd( unsigned int count)_ + 
 *create a file descriptor for event notification*


[[sys_eventfd2]]
sys_eventfd2::

  _sys_eventfd2( unsigned int count,  int flags)_ + 
 *create a file descriptor for event notification*


[[sys_execve]]
sys_execve::

  _sys_execve( const char *filename,  const char *const argv[],  const char *const envp[])_ + 
 *execute program*


[[sys_exit]]
sys_exit::

  _sys_exit( int error_code)_ + 
 *terminate a process*


[[sys_exit_group]]
sys_exit_group::

  _sys_exit_group( int error_code)_ + 
 *exit all threads in a process*


[[sys_faccessat]]
sys_faccessat::

  _sys_faccessat( int dfd,  const char *filename,  int mode)_ + 
 *determine accessibility of a file relative to directory file*


[[sys_fadvise64]]
sys_fadvise64::

  _sys_fadvise64( int fd,  loff_t offset,  size_t len,  int advice)_ + 
 *predeclare an access pattern for file data*


[[sys_fallocate]]
sys_fallocate::

  _sys_fallocate( long fd,  long mode,  loff_t offset,  loff_t len)_ + 
 *manipulate file space*


[[sys_fanotify_init]]
sys_fanotify_init::

  _sys_fanotify_init( unsigned int flags,  unsigned int event_f_flags)_ + 
 *create and initialize fanotify group*


[[sys_fanotify_mark]]
sys_fanotify_mark::

  _sys_fanotify_mark( long fanotify_fd,  long flags,  __u64 mask,  long dfd, long pathname)_ + 
 *add, remove, or modify an fanotify mark on a filesystem*


[[sys_fchdir]]
sys_fchdir::

  _sys_fchdir( unsigned int fd)_ + 
 *change working directory*


[[sys_fchmod]]
sys_fchmod::

  _sys_fchmod( unsigned int fd,  mode_t mode)_ + 
 *change mode of a file*


[[sys_fchmodat]]
sys_fchmodat::

  _sys_fchmodat( int dfd,  const char *filename,  mode_t mode)_ + 
 *change mode of a file relative to directory file descriptor*


[[sys_fchown]]
sys_fchown::

  _sys_fchown( unsigned int fd,  uid_t user,  gid_t group)_ + 
 *change owner and group of a file*


[[sys_fchownat]]
sys_fchownat::

  _sys_fchownat( int dfd,  const char *filename,  uid_t user,  gid_t group,  int flag)_ + 
 *change owner and group of a file relative to directory*


[[sys_fcntl]]
sys_fcntl::

  _sys_fcntl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_ + 
 *file control*


[[sys_fdatasync]]
sys_fdatasync::

  _sys_fdatasync( unsigned int fd)_ + 
 *synchronize the data of a file*


[[sys_fgetxattr]]
sys_fgetxattr::

  _sys_fgetxattr( int fd,  const char *name,  void *value,  size_t size)_ + 
 *retrieve an extended attribute value*


[[sys_finit_module]]
sys_finit_module::

  _sys_finit_module( int fd,  const char  *uargs,  int flags)_ + 
 *load a kernel module*


[[sys_flistxattr]]
sys_flistxattr::

  _sys_flistxattr( int fd,  char *list,  size_t size)_ + 
 *list extended attribute names*


[[sys_flock]]
sys_flock::

  _sys_flock( unsigned int fd,  unsigned int cmd)_ + 
 *apply or remove an advisory lock on an open file*


[[sys_fork]]
sys_fork::

  _sysSYSDEF_syscall(_fork,0)_ + 
 *create a new process*


[[sys_fremovexattr]]
sys_fremovexattr::

  _sys_fremovexattr( int fd,  const char *name)_ + 
 *remove an extended attribute*


[[sys_fsetxattr]]
sys_fsetxattr::

  _sys_fsetxattr( int fd,  const char *name,  const void *value,  size_t size, int flags)_ + 
 *set an extended attribute value*


[[sys_fstat]]
sys_fstat::

  _sys_fstat( unsigned int fd,  struct stat *statbuf)_ + 
 *get file status*


[[sys_fstatfs]]
sys_fstatfs::

  _sys_fstatfs( unsigned int fd,  struct statfs *buf)_ + 
 *get filesystem statistics*


[[sys_fsync]]
sys_fsync::

  _sys_fsync( unsigned int fd)_ + 
 *synchronize changes to a file*


[[sys_ftruncate]]
sys_ftruncate::

  _sys_ftruncate( unsigned int fd,  unsigned long length)_ + 
 *truncate a file to a specified length*


[[sys_futex]]
sys_futex::

  _sys_futex( u32 *uaddr,  int op,  u32 val,  struct timespec *utime,  u32 *uaddr2,  u32 val3)_ + 
 *fast user-space locking*


[[sys_futimesat]]
sys_futimesat::

  _sys_futimesat( int dfd,  const char *filename,  struct timeval *utimes)_ + 
 *change timestamps of a file relative to a directory file descriptor*


[[sys_get_mempolicy]]
sys_get_mempolicy::

  _sys_get_mempolicy( int *policy,  unsigned long *nmask,  unsigned long maxnode,  unsigned long addr,  unsigned long flags)_ + 
 *retrieve NUMA memory policy for a thread*


[[sys_get_robust_list]]
sys_get_robust_list::

  _sys_get_robust_list( int pid,  struct robust_list_head **head_ptr,  size_t *len_ptr)_ + 
 *get/set list of robust futexes*


[[sys_getcpu]]
sys_getcpu::

  _sys_getcpu( unsigned *cpup,  unsigned *nodep,  struct getcpu_cache *unused)_ + 
 *determine CPU and NUMA node on which the calling thread is running*


[[sys_getcwd]]
sys_getcwd::

  _sys_getcwd( char *buf,  unsigned long size)_ + 
 *get the pathname of the current working directory*


[[sys_getdents]]
sys_getdents::

  _sys_getdents( unsigned int fd,  struct linux_dirent *dirent,  unsigned int count)_ + 
 *get directory entries*


[[sys_getdents64]]
sys_getdents64::

  _sys_getdents64( unsigned int fd,  struct linux_dirent64 *dirent,  unsigned int count)_ + 
 *get directory entries*


[[sys_getegid]]
sys_getegid::

  _sysSYSDEF_syscall(_getegid,0)_ + 
 *get the effective group ID*


[[sys_geteuid]]
sys_geteuid::

  _sysSYSDEF_syscall(_geteuid,0)_ + 
 *get the effective user ID*


[[sys_getgid]]
sys_getgid::

  _sysSYSDEF_syscall(_getgid,0)_ + 
 *get the real group ID*


[[sys_getgroups]]
sys_getgroups::

  _sys_getgroups( int gidsetsize,  gid_t *grouplist)_ + 
 *get supplementary group IDs*


[[sys_getitimer]]
sys_getitimer::

  _sys_getitimer( int which,  struct itimerval *value)_ + 
 *get and set value of interval timer*


[[sys_getpeername]]
sys_getpeername::

  _sys_getpeername( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_ + 
 *get the name of the peer socket*


[[sys_getpgid]]
sys_getpgid::

  _sys_getpgid( pid_t pid)_ + 
 *get the process group ID for a process*


[[sys_getpgrp]]
sys_getpgrp::

  _sysSYSDEF_syscall(_getpgrp,0)_ + 
 *get the process group ID of the calling process*


[[sys_getpid]]
sys_getpid::

  _sysSYSDEF_syscall(_getpid,0)_ + 
 *get the process ID*


[[sys_getppid]]
sys_getppid::

  _sysSYSDEF_syscall(_getppid,0)_ + 
 *get the parent process ID*


[[sys_getpriority]]
sys_getpriority::

  _sys_getpriority( int which,  int who)_ + 
 *get and set the nice value*


[[sys_getrandom]]
sys_getrandom::

  _sys_getrandom( char  *buf,  size_t count,  unsigned int flags)_ + 
 *obtain a series of random bytes*


[[sys_getresgid]]
sys_getresgid::

  _sys_getresgid( gid_t *rgid,  gid_t *egid,  gid_t *sgid)_ + 
 *get real, effective and saved user/group IDs*


[[sys_getresuid]]
sys_getresuid::

  _sys_getresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_ + 
 *get real, effective and saved user/group IDs*


[[sys_getrlimit]]
sys_getrlimit::

  _sys_getrlimit( unsigned int resource,  struct rlimit *rlim)_ + 
 *control maximum resource consumption*


[[sys_getrusage]]
sys_getrusage::

  _sys_getrusage( int who,  struct rusage *ru)_ + 
 *get information about resource utilization*


[[sys_getsid]]
sys_getsid::

  _sys_getsid( pid_t pid)_ + 
 *get the process group ID of a session leader*


[[sys_getsockname]]
sys_getsockname::

  _sys_getsockname( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_ + 
 *get the socket name*


[[sys_getsockopt]]
sys_getsockopt::

  _sys_getsockopt( int fd,  int level,  int optname,  char *optval,  int *optlen)_ + 
 *get the socket options*


[[sys_gettid]]
sys_gettid::

  _sysSYSDEF_syscall(_gettid,0)_ + 
 *get thread identification*


[[sys_gettimeofday]]
sys_gettimeofday::

  _sys_gettimeofday( struct timeval *tv,  struct timezone *tz)_ + 
 *get the date and time*


[[sys_getuid]]
sys_getuid::

  _sysSYSDEF_syscall(_getuid,0)_ + 
 *get a real user ID*


[[sys_getxattr]]
sys_getxattr::

  _sys_getxattr( const char *pathname,  const char *name,  void *value,  size_t size)_ + 
 *retrieve an extended attribute value*


[[sys_init_module]]
sys_init_module::

  _sys_init_module( void *umod,  unsigned long len,  const char *uargs)_ + 
 *load a kernel module*


[[sys_inotify_add_watch]]
sys_inotify_add_watch::

  _sys_inotify_add_watch( int fd,  const char *pathname,  u32 mask)_ + 
 *add a watch to an initialized inotify instance*


[[sys_inotify_init]]
sys_inotify_init::

  _sysSYSDEF_syscall(_inotify_init,0)_ + 
 *initialize an inotify instance*


[[sys_inotify_init1]]
sys_inotify_init1::

  _sys_inotify_init1( int flags)_ + 
 *initialize an inotify instance*


[[sys_inotify_rm_watch]]
sys_inotify_rm_watch::

  _sys_inotify_rm_watch( int fd,  __s32 wd)_ + 
 *remove an existing watch from an inotify instance*


[[sys_io_cancel]]
sys_io_cancel::

  _sys_io_cancel( aio_context_t ctx_id,  struct iocb *iocb,  struct io_event *result)_ + 
 *cancel an outstanding asynchronous I/O operation*


[[sys_io_destroy]]
sys_io_destroy::

  _sys_io_destroy( aio_context_t ctx)_ + 
 *destroy an asynchronous I/O context*


[[sys_io_getevents]]
sys_io_getevents::

  _sys_io_getevents( aio_context_t ctx_id,  long min_nr,  long nr,  struct io_event *events)_ + 
 *read asynchronous I/O events from the completion queue*


[[sys_io_setup]]
sys_io_setup::

  _sys_io_setup( unsigned nr_events,  aio_context_t *ctxp)_ + 
 *create an asynchronous I/O context*


[[sys_io_submit]]
sys_io_submit::

  _sys_io_submit( aio_context_t ctx_id,  long nr,  struct iocb **iocbpp)_ + 
 *submit asynchronous I/O blocks for processing*


[[sys_ioctl]]
sys_ioctl::

  _sys_ioctl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_ + 
 *control a STREAMS device (\fBSTREAMS\fP)*


[[sys_ioperm]]
sys_ioperm::

  _sys_ioperm( unsigned long from,  unsigned long num,  int turn_on)_ + 
 *set port input/output permissions*


[[sys_iopl]]
sys_iopl::

  _sys_iopl( unsigned int level,  struct pt_regs *regs)_ + 
 *change I/O privilege level*


[[sys_ioprio_get]]
sys_ioprio_get::

  _sys_ioprio_get( int which,  int who)_ + 
 *get/set I/O scheduling class and priority*


[[sys_ioprio_set]]
sys_ioprio_set::

  _sys_ioprio_set( int which,  int who,  int ioprio)_ + 
 *get/set I/O scheduling class and priority*


[[sys_kcmp]]
sys_kcmp::

  _sys_kcmp( pid_t pid1,  pid_t pid2,  int type,  unsigned long idx1,  unsigned long idx2)_ + 
 *compare two processes to determine if they share a kernel resource*


[[sys_kexec_file_load]]
sys_kexec_file_load::

  _sys_kexec_file_load( int kernel_fd,  int initrd_fd,  unsigned long cmdline_len,  const char  *cmdline_ptr,  unsigned long flags)_ + 
 *load a new kernel for later execution*


[[sys_kexec_load]]
sys_kexec_load::

  _sys_kexec_load( unsigned long entry,  unsigned long nr_segments,  struct kexec_segment *segments,  unsigned long flags)_ + 
 *load a new kernel for later execution*


[[sys_keyctl]]
sys_keyctl::

  _sys_keyctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_ + 
 *key management function wrappers*


[[sys_kill]]
sys_kill::

  _sys_kill( pid_t pid,  int sig)_ + 
 *send a signal to a process or a group of processes*


[[sys_lchown]]
sys_lchown::

  _sys_lchown( const char *filename,  uid_t user,  gid_t group)_ + 
 *change the owner and group of a symbolic link*


[[sys_lgetxattr]]
sys_lgetxattr::

  _sys_lgetxattr( const char *pathname,  const char *name,  void *value,  size_t size)_ + 
 *retrieve an extended attribute value*


[[sys_link]]
sys_link::

  _sys_link( const char *oldname,  const char *newname)_ + 
 *link one file to another file relative to two directory*


[[sys_linkat]]
sys_linkat::

  _sys_linkat( int oldfd,  const char *oldname,  int newfd,  const char *newname,  int flags)_ + 
 *make a new name for a file*


[[sys_listen]]
sys_listen::

  _sys_listen( int fd,  int backlog)_ + 
 *listen for socket connections and limit the queue of incoming*


[[sys_listxattr]]
sys_listxattr::

  _sys_listxattr( const char *pathname,  char *list,  size_t size)_ + 
 *list extended attribute names*


[[sys_llistxattr]]
sys_llistxattr::

  _sys_llistxattr( const char *pathname,  char *list,  size_t size)_ + 
 *list extended attribute names*


[[sys_lookup_dcookie]]
sys_lookup_dcookie::

  _sys_lookup_dcookie( u64 cookie64,  long buf,  long len)_ + 
 *return a directory entry's path*


[[sys_lremovexattr]]
sys_lremovexattr::

  _sys_lremovexattr( const char *pathname,  const char *name)_ + 
 *remove an extended attribute*


[[sys_lseek]]
sys_lseek::

  _sys_lseek( unsigned int fd,  off_t offset,  unsigned int origin)_ + 
 *move the read/write file offset*


[[sys_lsetxattr]]
sys_lsetxattr::

  _sys_lsetxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_ + 
 *set an extended attribute value*


[[sys_lstat]]
sys_lstat::

  _sys_lstat( const char *filename,  struct stat *statbuf)_ + 
 *get file status*


[[sys_madvise]]
sys_madvise::

  _sys_madvise( unsigned long start,  size_t len_in,  int behavior)_ + 
 *give advice about use of memory*


[[sys_mbind]]
sys_mbind::

  _sys_mbind( unsigned long start,  unsigned long len,  unsigned long mode,  unsigned long *nmask,  unsigned long maxnode,  unsigned flags)_ + 
 *set memory policy for a memory range*


[[sys_memfd_create]]
sys_memfd_create::

  _sys_memfd_create( const char  *uname_ptr,  unsigned int flags)_ + 
 *create an anonymous file*


[[sys_migrate_pages]]
sys_migrate_pages::

  _sys_migrate_pages( pid_t pid,  unsigned long maxnode,  const unsigned long *old_nodes,  const unsigned long *new_nodes)_ + 
 *move all pages in a process to another set of nodes*


[[sys_mincore]]
sys_mincore::

  _sys_mincore( unsigned long start,  size_t len,  unsigned char *vec)_ + 
 *determine whether pages are resident in memory*


[[sys_mkdir]]
sys_mkdir::

  _sys_mkdir( const char *pathname,  int mode)_ + 
 *make a directory relative to directory file descriptor*


[[sys_mkdirat]]
sys_mkdirat::

  _sys_mkdirat( int dfd,  const char *pathname,  int mode)_ + 
 *create a directory*


[[sys_mknod]]
sys_mknod::

  _sys_mknod( const char *filename,  umode_t mode,  unsigned dev)_ + 
 *make directory, special file, or regular file*


[[sys_mknodat]]
sys_mknodat::

  _sys_mknodat( int dfd,  const char *filename,  int mode,  unsigned dev)_ + 
 *create a special or ordinary file*


[[sys_mlock]]
sys_mlock::

  _sys_mlock( unsigned long start,  size_t len)_ + 
 *lock or unlock a range of process address space*


[[sys_mlockall]]
sys_mlockall::

  _sys_mlockall( int flags)_ + 
 *lock/unlock the address space of a process*


[[sys_mmap]]
sys_mmap::

  _sys_mmap( unsigned long addr,  unsigned long len,  unsigned long prot,  unsigned long flags,  unsigned long fd,  unsigned long off)_ + 
 *map pages of memory*


[[sys_modify_ldt]]
sys_modify_ldt::

  _sys_modify_ldt( int func,  void *ptr,  unsigned long bytecount)_ + 
 *get or set a per-process LDT entry*


[[sys_mount]]
sys_mount::

  _sys_mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_ + 
 *mount filesystem*


[[sys_move_pages]]
sys_move_pages::

  _sys_move_pages( pid_t pid,  unsigned long nr_pages,  const void *pages[], const int *nodes,  int *status,  int flags)_ + 
 *move individual pages of a process to another node*


[[sys_mprotect]]
sys_mprotect::

  _sys_mprotect( unsigned long start,  size_t len,  unsigned long prot)_ + 
 *set protection of memory mapping*


[[sys_mq_getsetattr]]
sys_mq_getsetattr::

  _sys_mq_getsetattr( mqd_t mqdes,  const struct mq_attr *u_mqstat,  struct mq_attr *u_omqstat)_ + 
 *get/set message queue attributes*


[[sys_mq_notify]]
sys_mq_notify::

  _sys_mq_notify( mqd_t mqdes,  const struct sigevent *u_notification)_ + 
 *notify process that a message is available*


[[sys_mq_open]]
sys_mq_open::

  _sys_mq_open( const char *u_name,  int oflag,  mode_t mode,  struct mq_attr *u_attr)_ + 
 *open a message queue*


[[sys_mq_timedreceive]]
sys_mq_timedreceive::

  _sys_mq_timedreceive( mqd_t mqdes,  char *u_msg_ptr,  size_t msg_len,  unsigned int *u_msg_prio,  const struct timespec *u_abs_timeout)_ + 
 *receive a message from a message queue*


[[sys_mq_timedsend]]
sys_mq_timedsend::

  _sys_mq_timedsend( mqd_t mqdes,  const char *u_msg_ptr,  size_t msg_len,  unsigned int msg_prio,  const struct timespec *u_abs_timeout)_ + 
 *send a message to a message queue*


[[sys_mq_unlink]]
sys_mq_unlink::

  _sys_mq_unlink( const char *u_name)_ + 
 *remove a message queue*


[[sys_mremap]]
sys_mremap::

  _sys_mremap( unsigned long addr,  unsigned long old_len,  unsigned long new_len,  unsigned long flags,  unsigned long new_addr)_ + 
 *remap a virtual memory address*


[[sys_msgctl]]
sys_msgctl::

  _sys_msgctl( int msqid,  int cmd,  struct msqid_ds *buf)_ + 
 *XSI message control operations*


[[sys_msgget]]
sys_msgget::

  _sys_msgget( key_t key,  int msgflg)_ + 
 *get the XSI message queue identifier*


[[sys_msgrcv]]
sys_msgrcv::

  _sys_msgrcv( int msqid,  struct msgbuf *msgp,  size_t msgsz,  long msgtyp,  int msgflg)_ + 
 *XSI message receive operation*


[[sys_msgsnd]]
sys_msgsnd::

  _sys_msgsnd( int msqid,  struct msgbuf *msgp,  size_t msgsz,  int msgflg)_ + 
 *XSI message send operation*


[[sys_msync]]
sys_msync::

  _sys_msync( unsigned long start,  size_t len,  int flags)_ + 
 *synchronize memory with physical storage*


[[sys_munlock]]
sys_munlock::

  _sys_munlock( unsigned long start,  size_t len)_ + 
 *unlock a range of process address space*


[[sys_munlockall]]
sys_munlockall::

  _sysSYSDEF_syscall(_munlockall,0)_ + 
 *unlock the address space of a process*


[[sys_munmap]]
sys_munmap::

  _sys_munmap( unsigned long addr,  size_t len)_ + 
 *unmap pages of memory*


[[sys_name_to_handle_at]]
sys_name_to_handle_at::

  _sys_name_to_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flag)_ + 
 *obtain handle*


[[sys_nanosleep]]
sys_nanosleep::

  _sys_nanosleep( struct timespec *rqtp,  struct timespec *rmtp)_ + 
 *high resolution sleep*


[[sys_newfstatat]]
sys_newfstatat::

  _sys_newfstatat( int dfd,  const char *filename,  struct stat *statbuf,  int flag)_ + 
 *get file status*


[[sys_open]]
sys_open::

  _sys_open( const char *filename,  int flags,  int mode)_ + 
 *open file relative to directory file descriptor*


[[sys_open_by_handle_at]]
sys_open_by_handle_at::

  _sys_open_by_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flags)_ + 
 *obtain handle*


[[sys_openat]]
sys_openat::

  _sys_openat( int dfd,  const char *filename,  int flags,  int mode)_ + 
 *open file relative to directory file descriptor*


[[sys_pause]]
sys_pause::

  _sysSYSDEF_syscall(_pause,0)_ + 
 *suspend the thread until a signal is received*


[[sys_perf_event_open]]
sys_perf_event_open::

  _sys_perf_event_open( struct perf_event_attr *attr_uptr,  pid_t pid,  int cpu,  int group_fd,  unsigned long flags)_ + 
 *set up performance monitoring*


[[sys_personality]]
sys_personality::

  _sys_personality( unsigned int personality)_ + 
 *set the process execution domain*


[[sys_pipe]]
sys_pipe::

  _sys_pipe( int *filedes)_ + 
 *create an interprocess channel*


[[sys_pipe2]]
sys_pipe2::

  _sys_pipe2( int *filedes,  int flags)_ + 
 *create pipe*


[[sys_pivot_root]]
sys_pivot_root::

  _sys_pivot_root( const char *new_root,  const char *put_old)_ + 
 *change the root mount*


[[sys_poll]]
sys_poll::

  _sys_poll( struct poll_fd *ufds,  unsigned int nfds,  long timeout_msecs)_ + 
 *input/output multiplexing*


[[sys_ppoll]]
sys_ppoll::

  _sys_ppoll( struct pollfd *ufds,  unsigned int nfds,  struct timespec *tsp,  const sigset_t *sigmask,  size_t sigsetsize)_ + 
 *wait for some event on a file descriptor*


[[sys_prctl]]
sys_prctl::

  _sys_prctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_ + 
 *operations on a process*


[[sys_pread64]]
sys_pread64::

  _sys_pread64( unsigned long fd,  char *buf,  size_t count,  loff_t pos)_ + 
 *read from or write to a file descriptor at a given offset*


[[sys_preadv]]
sys_preadv::

  _sys_preadv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_ + 
 *read or write data into multiple buffers*


[[sys_prlimit64]]
sys_prlimit64::

  _sys_prlimit64( pid_t pid,  unsigned int resource,  const struct rlimit64 *new_rlim,  struct rlimit64 *old_rlim)_ + 
 *get/set resource limits*


[[sys_process_vm_readv]]
sys_process_vm_readv::

  _sys_process_vm_readv( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovec *rvec,  unsigned long riovcnt,  unsigned long flags)_ + 
 *transfer data between process address spaces*


[[sys_process_vm_writev]]
sys_process_vm_writev::

  _sys_process_vm_writev( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovcc *rvec,  unsigned long riovcnt,  unsigned long flags)_ + 
 *transfer data between process address spaces*


[[sys_pselect6]]
sys_pselect6::

  _sys_pselect6( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timespec *tsp,  void *sig)_ + 
 *select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \-*


[[sys_ptrace]]
sys_ptrace::

  _sys_ptrace( long request,  long pid,  unsigned long addr,  unsigned long data)_ + 
 *process trace*


[[sys_pwrite64]]
sys_pwrite64::

  _sys_pwrite64( unsigned int fd,  const char *buf,  size_t count,  loff_t pos)_ + 
 *read from or write to a file descriptor at a given offset*


[[sys_pwritev]]
sys_pwritev::

  _sys_pwritev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_ + 
 *read or write data into multiple buffers*


[[sys_quotactl]]
sys_quotactl::

  _sys_quotactl( unsigned int cmd,  const char *special,  qid_t id,  void *addr)_ + 
 *manipulate disk quotas*


[[sys_read]]
sys_read::

  _sys_read( unsigned int fd,  char *buf,  size_t count)_ + 
 *read from a file*


[[sys_readahead]]
sys_readahead::

  _sys_readahead( int fd,  loff_t offset,  size_t count)_ + 
 *initiate file readahead into page cache*


[[sys_readlink]]
sys_readlink::

  _sys_readlink( const char *path,  char *buf,  int bufsiz)_ + 
 *read the contents of a symbolic link*


[[sys_readlinkat]]
sys_readlinkat::

  _sys_readlinkat( int dfd,  const char *pathname,  char *buf,  int bufsiz)_ + 
 *read value of a symbolic link*


[[sys_readv]]
sys_readv::

  _sys_readv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_ + 
 *read a vector*


[[sys_reboot]]
sys_reboot::

  _sys_reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_ + 
 *reboot or enable/disable Ctrl-Alt-Del*


[[sys_recvfrom]]
sys_recvfrom::

  _sys_recvfrom( int fd,  void *ubuf,  size_t size,  unsigned flags,  struct sockaddr *addr,  int *addr_len)_ + 
 *receive a message from a socket*


[[sys_recvmmsg]]
sys_recvmmsg::

  _sys_recvmmsg( int fd,  struct msghdr *mmsg,  unsigned int vlen,  unsigned int flags,  struct timespec *timeout)_ + 
 *receive multiple messages on a socket*


[[sys_recvmsg]]
sys_recvmsg::

  _sys_recvmsg( int fd,  struct msghdr *msg,  unsigned int flags)_ + 
 *receive a message from a socket*


[[sys_remap_file_pages]]
sys_remap_file_pages::

  _sys_remap_file_pages( unsigned long start,  unsigned long size,  unsigned long prot,  unsigned long pgoff,  unsigned long flags)_ + 
 *create a nonlinear file mapping*


[[sys_removexattr]]
sys_removexattr::

  _sys_removexattr( const char *pathname,  const char *name)_ + 
 *remove an extended attribute*


[[sys_rename]]
sys_rename::

  _sys_rename( const char *oldname,  const char *newname)_ + 
 *rename file relative to directory file descriptor*


[[sys_renameat]]
sys_renameat::

  _sys_renameat( int oldfd,  const char *oldname,  int newfd,  const char *newname)_ + 
 *change the name or location of a file*


[[sys_renameat2]]
sys_renameat2::

  _sys_renameat2( int olddfd,  const char  *oldname,  int newdfd,  const char  *newname,  unsigned int flags)_ + 
 *change the name or location of a file*


[[sys_request_key]]
sys_request_key::

  _sys_request_key( const char *_type,  const char *_description,  const char *_callout_info,  key_serial_t destringid)_ + 
 *request a key from the kernel's key management facility*


[[sys_restart_syscall]]
sys_restart_syscall::

  _sysSYSDEF_syscall(_restart_syscall,0)_ + 
 *restart a system call after interruption by a stop signal*


[[sys_rmdir]]
sys_rmdir::

  _sys_rmdir( const char *pathname)_ + 
 *remove a directory*


[[sys_rt_sigaction]]
sys_rt_sigaction::

  _sys_rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)_ + 
 *examine and change a signal action*


[[sys_rt_sigpending]]
sys_rt_sigpending::

  _sys_rt_sigpending( sigset_t *set,  size_t sigsetsize)_ + 
 *examine pending signals*


[[sys_rt_sigprocmask]]
sys_rt_sigprocmask::

  _sys_rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)_ + 
 *examine and change blocked signals*


[[sys_rt_sigqueueinfo]]
sys_rt_sigqueueinfo::

  _sys_rt_sigqueueinfo( pid_t pid,  int sig,  siginfo_t *uinfo)_ + 
 *queue a signal and data*


[[sys_rt_sigreturn]]
sys_rt_sigreturn::

  _sys_rt_sigreturn( unsigned long __unused)_ + 
 *return from signal handler and cleanup stack frame*


[[sys_rt_sigsuspend]]
sys_rt_sigsuspend::

  _sys_rt_sigsuspend( sigset_t *unewset,  size_t sigsetsize)_ + 
 *wait for a signal*


[[sys_rt_sigtimedwait]]
sys_rt_sigtimedwait::

  _sys_rt_sigtimedwait( const sigset_t *uthese,  siginfo_t *uinfo,  const struct timespec *uts,  size_t sigsetsize)_ + 
 *synchronously wait*


[[sys_rt_tgsigqueueinfo]]
sys_rt_tgsigqueueinfo::

  _sys_rt_tgsigqueueinfo( pid_t tgid,  pid_t pid,  int sig,  siginfo_t *uinfo)_ + 
 *queue a signal and data*


[[sys_sched_get_priority_max]]
sys_sched_get_priority_max::

  _sys_sched_get_priority_max( int policy)_ + 
 *get priority limits*


[[sys_sched_get_priority_min]]
sys_sched_get_priority_min::

  _sys_sched_get_priority_min( int policy)_ + 
 *get static priority range*


[[sys_sched_getaffinity]]
sys_sched_getaffinity::

  _sys_sched_getaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_ + 
 *set and get a thread's CPU affinity mask*


[[sys_sched_getattr]]
sys_sched_getattr::

  _sys_sched_getattr( pid_t pid,  struct sched_attr  *attr,  unsigned int size,  unsigned int flags)_ + 
 *sched_setattr, sched_getattr \-*


[[sys_sched_getparam]]
sys_sched_getparam::

  _sys_sched_getparam( pid_t pid,  struct sched_param *param)_ + 
 *get scheduling parameters*


[[sys_sched_getscheduler]]
sys_sched_getscheduler::

  _sys_sched_getscheduler( pid_t pid)_ + 
 *get scheduling policy*


[[sys_sched_rr_get_interval]]
sys_sched_rr_get_interval::

  _sys_sched_rr_get_interval( pid_t pid,  struct timespec *interval)_ + 
 *get execution time limits*


[[sys_sched_setaffinity]]
sys_sched_setaffinity::

  _sys_sched_setaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_ + 
 *set and get a thread's CPU affinity mask*


[[sys_sched_setattr]]
sys_sched_setattr::

  _sys_sched_setattr( pid_t pid,  struct sched_attr  *attr,  unsigned int flags)_ + 
 *sched_setattr, sched_getattr \-*


[[sys_sched_setparam]]
sys_sched_setparam::

  _sys_sched_setparam( pid_t pid,  struct sched_param *param)_ + 
 *set scheduling parameters*


[[sys_sched_setscheduler]]
sys_sched_setscheduler::

  _sys_sched_setscheduler( pid_t pid,  int policy,  struct sched_param *param)_ + 
 *set scheduling policy and parameters*


[[sys_sched_yield]]
sys_sched_yield::

  _sysSYSDEF_syscall(_sched_yield,0)_ + 
 *yield the processor*


[[sys_seccomp]]
sys_seccomp::

  _sys_seccomp( unsigned int op,  unsigned int flags,  const char  *uargs)_ + 
 *operate on Secure Computing state of the process*


[[sys_select]]
sys_select::

  _sys_select( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timeval *tvp)_ + 
 *synchronous I/O multiplexing*


[[sys_semctl]]
sys_semctl::

  _sys_semctl( int semid,  int semnum,  int cmd,  semun_u arg)_ + 
 *XSI semaphore control operations*


[[sys_semget]]
sys_semget::

  _sys_semget( key_t key,  int nsems,  int semflg)_ + 
 *get set of XSI semaphores*


[[sys_semop]]
sys_semop::

  _sys_semop( int semid,  struct sembuf *tsops,  unsigned nsops)_ + 
 *XSI semaphore operations*


[[sys_semtimedop]]
sys_semtimedop::

  _sys_semtimedop( int semid,  struct sembuf *tsops,  unsigned nsops,  const struct timespec *timeout)_ + 
 *System V semaphore operations*


[[sys_sendfile]]
sys_sendfile::

  _sys_sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_ + 
 *transfer data between file descriptors*


[[sys_sendmmsg]]
sys_sendmmsg::

  _sys_sendmmsg( int fd,  struct mmsghdr *mmsg,  unsigned int vlen,  unsigned int flags)_ + 
 *send multiple messages on a socket*


[[sys_sendmsg]]
sys_sendmsg::

  _sys_sendmsg( int fd,  struct msghdr *msg,  unsigned flags)_ + 
 *send a message on a socket using a message structure*


[[sys_sendto]]
sys_sendto::

  _sys_sendto( int fd,  void *buff,  size_t len,  unsigned flags,  struct sockaddr *addr,  int addr_len)_ + 
 *send a message on a socket*


[[sys_set_mempolicy]]
sys_set_mempolicy::

  _sys_set_mempolicy( int mode,  unsigned long *nmask,  unsigned long maxnode)_ + 
 *set default NUMA memory policy for a thread and its children*


[[sys_set_robust_list]]
sys_set_robust_list::

  _sys_set_robust_list( struct robust_list_head *head,  size_t len)_ + 
 *get/set list of robust futexes*


[[sys_set_tid_address]]
sys_set_tid_address::

  _sys_set_tid_address( int *tidptr)_ + 
 *set pointer to thread ID*


[[sys_setdomainname]]
sys_setdomainname::

  _sys_setdomainname( char *name,  int len)_ + 
 *get/set NIS domain name*


[[sys_setfsgid]]
sys_setfsgid::

  _sys_setfsgid( gid_t gid)_ + 
 *set group identity used for filesystem checks*


[[sys_setfsuid]]
sys_setfsuid::

  _sys_setfsuid( uid_t uid)_ + 
 *set user identity used for filesystem checks*


[[sys_setgid]]
sys_setgid::

  _sys_setgid( gid_t gid)_ + 
 *set-group-ID*


[[sys_setgroups]]
sys_setgroups::

  _sys_setgroups( int gidsetsize,  gid_t *grouplist)_ + 
 *get/set list of supplementary group IDs*


[[sys_sethostname]]
sys_sethostname::

  _sys_sethostname( char *name,  int len)_ + 
 *get/set hostname*


[[sys_setitimer]]
sys_setitimer::

  _sys_setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_ + 
 *set the value of an interval timer*


[[sys_setns]]
sys_setns::

  _sys_setns( int fd,  int nstype)_ + 
 *reassociate thread with a namespace*


[[sys_setpgid]]
sys_setpgid::

  _sys_setpgid( pid_t pid,  pid_t pgid)_ + 
 *set process group ID for job control*


[[sys_setpriority]]
sys_setpriority::

  _sys_setpriority( int which,  int who,  int niceval)_ + 
 *set the nice value*


[[sys_setregid]]
sys_setregid::

  _sys_setregid( gid_t rgid,  gid_t egid)_ + 
 *set real and effective group IDs*


[[sys_setresgid]]
sys_setresgid::

  _sys_setresgid( gid_t rgid,  gid_t egid,  gid_t sgid)_ + 
 *set real, effective and saved user or group ID*


[[sys_setresuid]]
sys_setresuid::

  _sys_setresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_ + 
 *set real, effective and saved user or group ID*


[[sys_setreuid]]
sys_setreuid::

  _sys_setreuid( uid_t ruid,  uid_t euid)_ + 
 *set real and effective user IDs*


[[sys_setrlimit]]
sys_setrlimit::

  _sys_setrlimit( unsigned int resource,  struct rlimit *rlim)_ + 
 *control maximum resource consumption*


[[sys_setsid]]
sys_setsid::

  _sysSYSDEF_syscall(_setsid,0)_ + 
 *create session and set process group ID*


[[sys_setsockopt]]
sys_setsockopt::

  _sys_setsockopt( int fd,  int level,  int optname,  char *optval,  int optlen)_ + 
 *set the socket options*


[[sys_settimeofday]]
sys_settimeofday::

  _sys_settimeofday( struct timeval *tv,  struct timezone *tz)_ + 
 *get / set time*


[[sys_setuid]]
sys_setuid::

  _sys_setuid( uid_t uid)_ + 
 *set user ID*


[[sys_setxattr]]
sys_setxattr::

  _sys_setxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_ + 
 *set an extended attribute value*


[[sys_shmat]]
sys_shmat::

  _sys_shmat( int shmid,  char *shmaddr,  int shmflg)_ + 
 *XSI shared memory attach operation*


[[sys_shmctl]]
sys_shmctl::

  _sys_shmctl( int shmid,  int cmd,  struct shmid_ds *buf)_ + 
 *XSI shared memory control operations*


[[sys_shmdt]]
sys_shmdt::

  _sys_shmdt( char *shmaddr)_ + 
 *XSI shared memory detach operation*


[[sys_shmget]]
sys_shmget::

  _sys_shmget( key_t key,  size_t size,  int shmflg)_ + 
 *get an XSI shared memory segment*


[[sys_shutdown]]
sys_shutdown::

  _sys_shutdown( int fd,  int how)_ + 
 *shut down socket send and receive operations*


[[sys_sigaltstack]]
sys_sigaltstack::

  _sys_sigaltstack( const stack_t *uss,  stack_t *uoss)_ + 
 *set and get signal alternate stack context*


[[sys_signalfd]]
sys_signalfd::

  _sys_signalfd( int ufd,  sigset_t *user_mask,  size_t sizemask)_ + 
 *create a file descriptor for accepting signals*


[[sys_signalfd4]]
sys_signalfd4::

  _sys_signalfd4( int ufd,  sigset_t *user_mask,  size_t sizemask,  int flags)_ + 
 *create a file descriptor for accepting signals*


[[sys_socket]]
sys_socket::

  _sys_socket( int family,  int type,  int protocol)_ + 
 *create an endpoint for communication*


[[sys_socketpair]]
sys_socketpair::

  _sys_socketpair( int family,  int type,  int protocol,  int *usockvec)_ + 
 *create a pair of connected sockets*


[[sys_splice]]
sys_splice::

  _sys_splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)_ + 
 *splice data to/from a pipe*


[[sys_stat]]
sys_stat::

  _sys_stat( const char *filename,  struct stat *statbuf)_ + 
 *get file status*


[[sys_statfs]]
sys_statfs::

  _sys_statfs( const char *pathname,  struct statfs *buf)_ + 
 *get filesystem statistics*


[[sys_swapoff]]
sys_swapoff::

  _sys_swapoff( const char *specialfile)_ + 
 *start/stop swapping to file/device*


[[sys_swapon]]
sys_swapon::

  _sys_swapon( const char *specialfile,  int swap_flags)_ + 
 *start/stop swapping to file/device*


[[sys_symlink]]
sys_symlink::

  _sys_symlink( const char *oldname,  const char *newname)_ + 
 *make a symbolic link relative to directory file descriptor*


[[sys_symlinkat]]
sys_symlinkat::

  _sys_symlinkat( const char *oldname,  int newfd,  const char *newname)_ + 
 *make a new name for a file*


[[sys_sync]]
sys_sync::

  _sysSYSDEF_syscall(_sync,0)_ + 
 *schedule file system updates*


[[sys_sync_file_range]]
sys_sync_file_range::

  _sys_sync_file_range( long fd,  loff_t offset,  loff_t bytes,  long flags)_ + 
 *sync a file segment with disk*


[[sys_syncfs]]
sys_syncfs::

  _sys_syncfs( int fd)_ + 
 *commit filesystem caches to disk*


[[sys_sysfs]]
sys_sysfs::

  _sys_sysfs( int option,  unsigned long arg1,  unsigned long arg2)_ + 
 *get filesystem type information*


[[sys_sysinfo]]
sys_sysinfo::

  _sys_sysinfo( struct sysinfo *info)_ + 
 *return system information*


[[sys_syslog]]
sys_syslog::

  _sys_syslog( int type,  char *buf,  int len)_ + 
 *log a message*


[[sys_tee]]
sys_tee::

  _sys_tee( int fdin,  int fdout,  size_t len,  unsigned int flags)_ + 
 *duplicating pipe content*


[[sys_tgkill]]
sys_tgkill::

  _sys_tgkill( pid_t tgid,  pid_t pid,  int sig)_ + 
 *send a signal to a thread*


[[sys_time]]
sys_time::

  _sys_time( time_t *tloc)_ + 
 *get time*


[[sys_timer_create]]
sys_timer_create::

  _sys_timer_create( const clockid_t which_clock,  struct sigevent *timer_event_spec,  timer_t *created_timer_id)_ + 
 *create a per-process timer*


[[sys_timer_delete]]
sys_timer_delete::

  _sys_timer_delete( timer_t timer_id)_ + 
 *delete a per-process timer*


[[sys_timer_getoverrun]]
sys_timer_getoverrun::

  _sys_timer_getoverrun( timer_t timer_id)_ + 


[[sys_timer_gettime]]
sys_timer_gettime::

  _sys_timer_gettime( timer_t timer_id,  struct itimerspec *setting)_ + 
 *arm/disarm and fetch*


[[sys_timer_settime]]
sys_timer_settime::

  _sys_timer_settime( timer_t timer_id,  int flags,  const struct itimerspec *new_setting,  struct itimerspec *old_setting)_ + 
 *arm/disarm and fetch*


[[sys_timerfd_create]]
sys_timerfd_create::

  _sys_timerfd_create( int clockid,  int flags)_ + 
 *timerfd_create, timerfd_settime, timerfd_gettime \-*


[[sys_timerfd_gettime]]
sys_timerfd_gettime::

  _sys_timerfd_gettime( int ufd,  struct itimerspec *otmr)_ + 
 *timerfd_create, timerfd_settime, timerfd_gettime \-*


[[sys_timerfd_settime]]
sys_timerfd_settime::

  _sys_timerfd_settime( int ufd,  int flags,  const struct itimerspec *utmr,  struct itimerspec *otmr)_ + 
 *timerfd_create, timerfd_settime, timerfd_gettime \-*


[[sys_times]]
sys_times::

  _sys_times( struct sysinfo *info)_ + 
 *get process and waited-for child process times*


[[sys_tkill]]
sys_tkill::

  _sys_tkill( pid_t pid,  int sig)_ + 
 *send a signal to a thread*


[[sys_truncate]]
sys_truncate::

  _sys_truncate( const char *path,  long length)_ + 
 *truncate a file to a specified length*


[[sys_umask]]
sys_umask::

  _sys_umask( int mask)_ + 
 *set and get the file mode creation mask*


[[sys_umount2]]
sys_umount2::

  _sys_umount2( const char *target,  int flags)_ + 
 *unmount filesystem*


[[sys_uname]]
sys_uname::

  _sys_uname( struct old_utsname *name)_ + 
 *get the name of the current system*


[[sys_unlink]]
sys_unlink::

  _sys_unlink( const char *pathname)_ + 
 *remove a directory entry relative to directory file descriptor*


[[sys_unlinkat]]
sys_unlinkat::

  _sys_unlinkat( int dfd,  const char *pathname,  int flag)_ + 
 *delete a name and possibly the file it refers to*


[[sys_unshare]]
sys_unshare::

  _sys_unshare( unsigned long unshare_flags)_ + 
 *disassociate parts of the process execution context*


[[sys_ustat]]
sys_ustat::

  _sys_ustat( unsigned dev,  struct ustat *ubuf)_ + 
 *get filesystem statistics*


[[sys_utime]]
sys_utime::

  _sys_utime( char *filename,  struct utimbuf *times)_ + 
 *set file access and modification times*


[[sys_utimensat]]
sys_utimensat::

  _sys_utimensat( int dfd,  const char *filename,  struct timespec *utimes, int flags)_ + 
 *set file access and modification times relative to directory*


[[sys_utimes]]
sys_utimes::

  _sys_utimes( char *filename,  struct timeval *utimes)_ + 
 *change file last access and modification times*


[[sys_vfork]]
sys_vfork::

  _sysSYSDEF_syscall(_vfork,0)_ + 
 *create a child process and block parent*


[[sys_vhangup]]
sys_vhangup::

  _sysSYSDEF_syscall(_vhangup,0)_ + 
 *virtually hangup the current terminal*


[[sys_vmsplice]]
sys_vmsplice::

  _sys_vmsplice( int fd,  const struct iovec *iov,  unsigned long nr_segs, unsigned int flags)_ + 
 *splice user pages to/from a pipe*


[[sys_wait4]]
sys_wait4::

  _sys_wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)_ + 
 *wait for process to change state, BSD style*


[[sys_waitid]]
sys_waitid::

  _sys_waitid( int which,  pid_t upid,  struct siginfo *infop,  int options,  struct rusage *ru)_ + 
 *wait for a child process to change state*


[[sys_write]]
sys_write::

  _sys_write( unsigned int fd,  const char *buf,  size_t count)_ + 
 *write on a file*


[[sys_writev]]
sys_writev::

  _sys_writev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_ + 
 *write a vector*
