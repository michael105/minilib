== files



[[]]
::

  _unsorted_ + 
 *Defines:* unsorted + 
-----
unsorted
-----
link:unsorted manpage: link:unsorted +


[[_fopen]]
_fopen::

  _FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f)_ + 
Size: ~316B 

[[access]]
access::

  _int access( const char *filename, int mode)_ + 
 *determine accessibility of a file relative to directory file*
Size: ~59B 

[[chmod]]
chmod::

  _int chmod( const char *filename, mode_t mode)_ + 
 *change mode of a file relative to directory file descriptor*
Size: ~59B 

[[chown]]
chown::

  _int chown( const char *filename, uid_t user, gid_t group)_ + 
 *change owner and group of a file relative to directory*
Size: ~71B 

[[close]]
close::

  _int close( int fd )_ + 
 *close a file descriptor*
Size: ~51B 

[[closedir]]
closedir::

  _int closedir(DIR *dir)_ + 
 *close a directory stream*
Size: ~323B 

[[creat]]
creat::

  _int volatile creat( const char *s, int mode )_ + 
 *create a new file or rewrite an existing one*
Size: ~124B 

[[dup]]
dup::

  _int dup(int fd)_ + 
 *duplicate an open file descriptor*
Size: ~51B 

[[dup2]]
dup2::

  _int dup2(int oldfd, int newfd)_ + 
 *duplicate a file descriptor*
Size: ~63B 

[[dup3]]
dup3::

  _int dup3(int oldfd, int newfd, int flags)_ + 
 *duplicate a file descriptor*
Size: ~75B 

[[fchmod]]
fchmod::

  _int fchmod( unsigned int fd, mode_t mode)_ + 
 *change mode of a file*
Size: ~63B 

[[fchown]]
fchown::

  _int fchown( unsigned int fd, uid_t user, gid_t group)_ + 
 *change owner and group of a file*
Size: ~75B 

[[fcntl]]
fcntl::

  _int fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)_ + 
 *file control*
Size: ~77B 

[[fsync]]
fsync::

  _int fsync(int a1 )_ + 
 *synchronize changes to a file*
Size: ~51B 

[[ftruncate]]
ftruncate::

  _int ftruncate(unsigned int a1, unsigned int a2 )_ + 
 *truncate a file to a specified length*
Size: ~63B 

[[link]]
link::

  _int link( const char *oldname, const char *newname)_ + 
 *link one file to another file relative to two directory*
Size: ~53B 

[[lseek]]
lseek::

  _int lseek(unsigned int a1, int a2, int a3 )_ + 
 *move the read/write file offset*
Size: ~75B 

[[open]]
open::

  _int volatile open( const char *s, int flags, ... )_ + 
 *open file relative to directory file descriptor*
Size: ~124B 

[[readahead]]
readahead::

  _int readahead( int fd,  loff_t offset,  size_t count)_ + 
 *initiate file readahead into page cache*
Size: ~79B 

[[rename]]
rename::

  _int rename( const char* oldpath, const char* newpath )_ + 
 *rename file relative to directory file descriptor*
Size: ~53B 

[[select]]
select::

  _int volatile  select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait)_ + 
 *synchronous I/O multiplexing*
Size: ~138B 

[[sendfile]]
sendfile::

  _int sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_ + 
 *transfer data between file descriptors*
Size: ~142B 

[[stat]]
stat::

  _int stat(const char* filename,struct stat* statbuf)_ + 
 *get file status*
Size: ~49B 

[[symlink]]
symlink::

  _int symlink( const char *oldname,  const char *newname)_ + 
 *make a symbolic link relative to directory file descriptor*
Size: ~53B 

[[umask]]
umask::

  _int umask( int mask)_ + 
 *set and get the file mode creation mask*
Size: ~51B 

[[unlink]]
unlink::

  _int unlink( const char* path)_ + 
 *remove a directory entry relative to directory file descriptor*
Size: ~47B 