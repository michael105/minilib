== strings



[[_strcasecmp]]
_strcasecmp::

  _int _strcasecmp(const char*c1,const char*c2,int len)_ + 
 *Defines:* tolower + 
Size: ~44B link:../../src/string/strcasecmp.c[../src/string/strcasecmp.c] l.5 

[[_strcmp]]
_strcmp::

  _int _strcmp(const char *s1, const char *s2, int n)_ + 
Size: ~44B link:../../src/string/strcmp.c[../src/string/strcmp.c] l.10 

[[sprintf]]
sprintf::

  _#define sprintf(str,...) snprintf( str, mini_buf,  __VA_ARGS__)_ + 
 *Defines:* write strlen getpid kill + 
 *print formatted output*
-----
I'm really uncertain about the size arg here, amongst others
 these are just misdefined functions, inhaerent insecure. :/
 If possible, do not use sprintf. Use snprintf instead. 
-----
link:../../src/output/sprintf.c[../src/output/sprintf.c] l.9 manpage: link:../manpages/stdio/printf.3.rst[sprintf] +


[[strcasecmp]]
strcasecmp::

  _int strcasecmp(const char*c1,const char*c2)_ + 
link:../../src/string/strcasecmp.c[../src/string/strcasecmp.c] l.26 manpage: link:../manpages/string/string.3.rst[strcasecmp] +


[[strcat]]
strcat::

  _char *strcat(char *dest, const char *src )_ + 
 *Defines:* strlen + 
 *concatenate two strings*
Size: ~126B link:../../src/string/strcat.c[../src/string/strcat.c] l.5 manpage: link:../manpages/string/string.3.rst[strcat] +


[[strchr]]
strchr::

  _char *strchr(const char *s, int c)_ + 
 *Defines:* strchrnul + 
 *string scanning operation*
Size: ~104B link:../../src/string/strchr.c[../src/string/strchr.c] l.6 manpage: link:../manpages/string/string.3.rst[strchr] +


[[strchrnul]]
strchrnul::

  _char *strchrnul(const char *s, int c)_ + 
 *locate character in string*
Size: ~87B link:../../src/string/strchrnul.c[../src/string/strchrnul.c] l.3 manpage: link:../manpages/string/strchr.3.rst[strchrnul] +


[[strcmp]]
strcmp::

  _int strcmp(const char*c1,const char*c2)_ + 
 *compare two strings*
Size: ~32B link:../../src/string/strcmp.c[../src/string/strcmp.c] l.36 manpage: link:../manpages/string/string.3.rst[strcmp] +


[[strcpy]]
strcpy::

  _char *strcpy(char *dest, const char *src)_ + 
 *copy a string and return a pointer to the end of the result*
Size: ~84B link:../../src/string/strcpy.c[../src/string/strcpy.c] l.3 manpage: link:../manpages/string/string.3.rst[strcpy] +


[[strdup]]
strdup::

  _char *strdup(const char *source)_ + 
 *Defines:* strcpy 0 strlen + 
 *duplicate a specific number of bytes from a string*
Size: ~258B link:../../src/string/strdup.c[../src/string/strdup.c] l.7 manpage: link:../manpages/string/strdup.3.rst[strdup] +


[[strlen]]
strlen::

  _int strlen(const char*str)_ + 
 *get length of fixed size string*
-----
return len of str.
 if str points to 0, return 0
-----
Size: ~32B link:../../src/string/strlen.c[../src/string/strlen.c] l.6 manpage: link:../manpages/string/strlen.3.rst[strlen] +


[[strncasecmp]]
strncasecmp::

  _int strncasecmp(const char*c1,const char*c2,int len)_ + 
 *case-insensitive string comparisons*
link:../../src/string/strcasecmp.c[../src/string/strcasecmp.c] l.34 manpage: link:../manpages/string/string.3.rst[strncasecmp] +


[[strncmp]]
strncmp::

  _int strncmp(const char*c1,const char*c2,int len)_ + 
 *compare part of two strings*
Size: ~44B link:../../src/string/strcmp.c[../src/string/strcmp.c] l.44 manpage: link:../manpages/string/string.3.rst[strncmp] +


[[strncpy]]
strncpy::

  _char *strncpy(char *dest, const char *src, int n)_ + 
 *copy fixed length string, returning a pointer to the array end*
-----
copy max n chars from src to dest, 
 write 0's up to src[n] when len of dest < n
 Please note strlcpy (borrowed from freebsd), 
 which does the same,
 but doesn't pad dest with 0's.
-----
Size: ~96B link:../../src/string/strncpy.c[../src/string/strncpy.c] l.7 manpage: link:../manpages/string/string.3.rst[strncpy] +


[[strrchr]]
strrchr::

  _char *strrchr(const char *s, int c)_ + 
 *Defines:* strchrnul + 
 *string scanning operation*
Size: ~122B link:../../src/string/strrchr.c[../src/string/strrchr.c] l.4 manpage: link:../manpages/string/string.3.rst[strrchr] +


[[strstr]]
strstr::

  _char* strstr(const char *big, const char *little)_ + 
 *find a substring*
Size: ~104B link:../../src/string/strstr.c[../src/string/strstr.c] l.3 manpage: link:../manpages/string/strstr.3.rst[strstr] +
