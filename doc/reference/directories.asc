== directories



[[alphasort]]
alphasort::

  _int alphasort( const struct dirent** de1, const struct dirent** de2 )_ + 
-----
Sort dirents by name.
 Deviating of the standard, 
 the asciitables is used for the comparison
 (using strcmp)
-----
link:../../src/directories/alphasort.c[../src/directories/alphasort.c] l.7 manpage: link:../manpages/gen/scandir.3.rst[alphasort] +


[[basename]]
basename::

  _char *basename(char *path)_ + 
 *return the last component of a pathname*
Size: ~151B link:../../src/directories/basename.c[../src/directories/basename.c] l.2 manpage: link:../manpages/gen/basename.3.rst[basename] +


[[chdir]]
chdir::

  _int chdir(const char* path)_ + 
 *change working directory*
Size: ~47B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.114 manpage: link:../manpages/sys/chdir.2.rst[chdir] +


[[dirbuf]]
dirbuf::

  __ + 
-----
the switch for defining the dirbuf.
 used internally
-----
link:../../include/dirent.h[../include/dirent.h] l.7 

[[dirbufsize]]
dirbufsize::

  __ + 


[[dirfd]]
dirfd::

  _int dirfd(DIR *d)_ + 
 *extract the file descriptor used by a DIR stream*
link:../../src/directories/dirfd.c[../src/directories/dirfd.c] l.2 manpage: link:../manpages/gen/directory.3.rst[dirfd] +


[[dirname]]
dirname::

  _char *dirname(char *s)_ + 
 *Defines:* strlen + 
 *report the parent directory name of a file pathname*
Size: ~179B link:../../src/directories/dirname.c[../src/directories/dirname.c] l.8 manpage: link:../manpages/gen/dirname.3.rst[dirname] +


[[fstat]]
fstat::

  _int fstat(int fd,struct stat* statbuf)_ + 
 *get file status*
Size: ~53B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.111 manpage: link:../manpages/sys/stat.2.rst[fstat] +


[[getcwd]]
getcwd::

  _int getcwd( char *buf,  unsigned long size)_ + 
 *get the pathname of the current working directory*
Size: ~61B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.123 manpage: link:../manpages/gen/getcwd.3.rst[getcwd] +


[[getdents]]
getdents::

  _int getdents( unsigned int fd, struct dirent *direntry, unsigned int count )_ + 
 *get directory entries*
Size: ~65B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.106 manpage: link:../manpages/sys/getdirentries.2.rst[getdents] +


[[inotify_add_watch]]
inotify_add_watch::

  _int inotify_add_watch( int fd,  const char *pathname,  u32 mask)_ + 
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.220 

[[inotify_init]]
inotify_init::

  _int DEF_syscall(inotify_init,0)_ + 
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.219 

[[inotify_init1]]
inotify_init1::

  _int inotify_init1( int flags)_ + 
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.222 

[[inotify_rm_watch]]
inotify_rm_watch::

  _int inotify_rm_watch( int fd,  __s32 wd)_ + 
link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.221 

[[mkdir]]
mkdir::

  _int mkdir( const char *pathname, int mode)_ + 
 *make a directory relative to directory file descriptor*
Size: ~59B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.174 manpage: link:../manpages/sys/mkdir.2.rst[mkdir] +


[[opendir]]
opendir::

  _DIR *opendir(const char *name )_ + 
 *Defines:* getbrk 0 open sys_brk dirbuf write close + 
 *open directory associated with file descriptor*
Size: ~281B link:../../src/directories/opendir.c[../src/directories/opendir.c] l.10 manpage: link:../manpages/gen/directory.3.rst[opendir] +


[[opendirp]]
opendirp::

  _DIR *opendirp(const char *name, DIR *dir)_ + 
 *Defines:* getbrk 0 open dirbuf close sys_brk + 
link:../../src/directories/opendirp.c[../src/directories/opendirp.c] l.5 

[[readdir]]
readdir::

  _struct dirent *readdir(DIR *dir)_ + 
 *Defines:* dirbuf getdents + 
 *read a directory*
-----
read a directory.
 return the next dirent, or 0, if the end is reached.
 return 0 on error and set errno,
 if mini_errno is not defined, return -errno on error
-----
Size: ~133B link:../../src/directories/readdir.c[../src/directories/readdir.c] l.10 manpage: link:../manpages/gen/directory.3.rst[readdir] +


[[rewinddir]]
rewinddir::

  _void rewinddir(DIR *dir)_ + 
 *reset the position of a directory stream to the beginning*
Size: ~80B link:../../src/directories/rewinddir.c[../src/directories/rewinddir.c] l.2 manpage: link:../manpages/gen/directory.3.rst[rewinddir] +


[[rmdir]]
rmdir::

  _int rmdir( const char *pathname)_ + 
 *remove a directory*
Size: ~47B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.175 manpage: link:../manpages/sys/rmdir.2.rst[rmdir] +


[[scandir]]
scandir::

  _int scandir(const char *path, struct dirent **listing[], int (*fp_select)(const struct dirent *),	int (*cmp)(const struct dirent **, const struct dirent **))_ + 
 *Defines:* seterrno memcpy getbrk kill swap getdents strlen write 0 errno getpid open dirbuf sys_brk + 
 *scan a directory*
-----
list files and dirs in a directory

 This implementation uses malloc_brk() for the dynamic allocation
 of the listing, and tries to do as less copies as possible.
 The dynamically allocated space for the result list (**listing[])
 is guaranteed to be at one continuous memory location.

 if the select callback is 0, meaning all entries should be returned,
 There are no copies done at all, 
 besides the copying from kernelspace to userspace.

 To free the space, allocated for the listing,
 either call free_brk(),
 when no other allocations via malloc_brk took place.

 Or save the brk before you call scandir,
 and restore it after the call.
 (e.g.)
 long savebrk=getbrk();
 int ret=scandir(...);
 brk(savebrk);
 Freeing single list entries might give unexpected results.

 returns the number of the read entries,
 or the negative errno on error.
-----
link:../../src/directories/scandir.c[../src/directories/scandir.c] l.30 manpage: link:../manpages/gen/scandir.3.rst[scandir] +


[[scandir_bufsize]]
scandir_bufsize::

  __ + 
-----
the increment of the buffer of scandir in bytes for memory allocations
 (default:4096)
-----
link:../../src/directories/scandir_bufsize.c[../src/directories/scandir_bufsize.c] l.4 

[[seekdir]]
seekdir::

  _void seekdir(DIR *dir, long off)_ + 
 *set the position of a directory stream*
Size: ~100B link:../../src/directories/seekdir.c[../src/directories/seekdir.c] l.2 manpage: link:../manpages/gen/directory.3.rst[seekdir] +


[[telldir]]
telldir::

  _long telldir(DIR *dir)_ + 
 *current location of a named directory stream*
Size: ~32B link:../../src/directories/telldir.c[../src/directories/telldir.c] l.2 manpage: link:../manpages/gen/directory.3.rst[telldir] +
