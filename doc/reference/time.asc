== time



getitimer::

  _int getitimer( int which,  struct itimerval *value)_ + 
 *get and set value of interval timer*
Size: ~53B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.216 manpage: link:manpages/sys/getitimer.2.rst[getitimer] +


gettimeofday::

  _int gettimeofday( struct timeval *a1, struct timezone *a2)_ + 
 *get the date and time*
Size: ~47B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.136 manpage: link:manpages/sys/gettimeofday.2.rst[gettimeofday] +


setitimer::

  _int setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_ + 
 *set the value of an interval timer*
Size: ~56B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.215 manpage: link:manpages/sys/getitimer.2.rst[setitimer] +


sleep::

  _unsigned int volatile sleep(unsigned int seconds)_ + 
 *suspend execution for an interval of time*
-----
nonconformant sleep
 TODO: ignore blocked signals, sigchld
-----
Size: ~123B link:../../src/sleep.c[../src/sleep.c] l.10 manpage: link:manpages/gen/sleep.3.rst[sleep] +


time::

  _int time(unsigned int *a1 )_ + 
 *get time*
Size: ~41B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.221 manpage: link:manpages/gen/time.3.rst[time] +


usleep::

  _unsigned int volatile usleep(unsigned int useconds)_ + 
 *suspend execution for microsecond intervals*
-----
nonconformant usleep. 
 Sleep useconds.
 I just hope, noone relies on an exact sleep time.
 which isn't possible without a real time os, anyways.
 When for whatever reason you'd need nanoseconds exact times,
 best shot might be a spinloop, and looking for cpu ticks.

 TODO: ignore blocked signals, sigchld
-----
Size: ~147B link:../../src/sleep.c[../src/sleep.c] l.31 manpage: link:manpages/gen/usleep.3.rst[usleep] +


utime::

  _int utime( const char *filename, struct utimbuf *times)_ + 
 *set file access and modification times*
Size: ~49B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.186 manpage: link:manpages/gen/utime.3.rst[utime] +
