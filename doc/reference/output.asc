== output



[[_mprints]]
_mprints::

  _#define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)_ + 
 *Defines:* write + 
link:../../include/prints.h[../include/prints.h] l.10 

[[ansicolors]]
ansicolors::

  __ + 
-----
defines for ansicolors at the console, 16 color mode
the names are:
 AC_NORM ( white text on black background)
 AC_BLACK 
 AC_RED 
 AC_GREEN 
 AC_BROWN 
 AC_BLUE 
 AC_MAGENTA 
 AC_MARINE (= AC_CYAN)
 AC_LGREY 
 AC_WHITE 
 AC_GREY 
 AC_LRED 
 AC_LGREEN 
 AC_YELLOW 
 AC_LBLUE 
 AC_LMAGENTA 
 AC_LMARINE (= AC_LCYAN)
 AC_LWHITE 
 AC_BGBLACK 
 AC_BGRED 
 AC_BGGREEN 
 AC_BGBROWN 
 AC_BGBLUE 
 AC_BGMAGENTA 
 AC_BGMARINE 
 AC_BGLGREY 
 AC_BGWHITE 

 AC_BOLD
 AC_FAINT
 AC_CURSIVE
 AC_UNDERLINE
 AC_LIGHTBG
 AC_BLINK
 AC_INVERTED
 AC_INVERSE

 ( Faint to inverse are not available at every terminal )
-----
link:../../include/ansicolors.h[../include/ansicolors.h] l.45 

[[dprintf]]
dprintf::

  _int dprintf( int fd, const char *fmt, ... )_ + 
 *Defines:* write + 
 *print formatted output*
Size: ~818B link:../../src/dprintf.c[../src/dprintf.c] l.5 manpage: link:../manpages/stdio/printf.3.rst[dprintf] +


[[dprints]]
dprints::

  _int dprints(int fd, const char *msg,...)_ + 
 *Defines:* write + 
link:../../src/prints.c[../src/prints.c] l.17 

[[eprint]]
eprint::

  _#define eprint(str) write(STDERR_FILENO,str,strlen(str))_ + 
 *Defines:* write strlen + 
-----
write str to stderr. Needs strlen
-----
link:../../include/prints.h[../include/prints.h] l.58 

[[eprintfs]]
eprintfs::

  _#define eprintfs(fmt,...) fprintfs(stderr, fmt, __VA_ARGS__)_ + 
 *Defines:* fileno write strlen + 
-----
write fmt and arguments to stderr. 
 only format %s and %c are recognized
-----
link:../../include/prints.h[../include/prints.h] l.106 

[[eprintl]]
eprintl::

  _#define eprintl() write(STDERR_FILENO,"\n",1)_ + 
 *Defines:* write + 
-----
write a newline to stderr
-----
link:../../include/prints.h[../include/prints.h] l.67 

[[eprints]]
eprints::

  _#define eprints(...) dprints(STDERR_FILENO,__VA_ARGS__,0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) to stdout
 this macro has an variable argument count.
-----
link:../../include/prints.h[../include/prints.h] l.25 

[[eprintsl]]
eprintsl::

  _#define eprintsl(...) dprints(STDERR_FILENO,__VA_ARGS__,"\n",0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) and newline to stderr
-----
link:../../include/prints.h[../include/prints.h] l.47 

[[eputs]]
eputs::

  _#define eputs(msg) ( eprint(msg) + eprintl() )_ + 
 *Defines:* strlen write + 
-----
write msg to stderr, append a newline. Needs strlen.
-----
link:../../include/prints.h[../include/prints.h] l.77 

[[ewrites]]
ewrites::

  _#define ewrites(str) write(STDERR_FILENO,str,sizeof(str))_ + 
 *Defines:* write + 
-----
write the constant str to stderr. Computes length with sizeof(str) at compile time.
-----
link:../../include/prints.h[../include/prints.h] l.88 

[[fprint]]
fprint::

  _#define fprint(...) fprintf(__VA_ARGS__)_ + 
 *Defines:* write fileno + 
link:../../include/mini_fstream.h[../include/mini_fstream.h] l.81 

[[fprintf]]
fprintf::

  _#define fprintf(stream,...)	write(fileno(stream),mlgl->mbuf,sprintf(mlgl->mbuf,__VA_ARGS__))_ + 
 *Defines:* write fileno + 
-----
fprintf, formatted output
 conversions implemented:
 %d: signed int
 %u: unsigned int
 %f: double (max precision 8 digits, highest possible number: 2^31
 %l (modify a following d,u to long)
 %s: string
 %c: char
 %b : binary output
 %x/X : hex output (small/big capitals)
 %(: grouping

 For squeezing a few more bytes, and saving some checking;
 writes(constant string) and print (variable string) are provided.

 
-----
link:../../src/sprintf.c[../src/sprintf.c] l.249 manpage: link:../manpages/stdio/printf.3.rst[fprintf] +


[[fprintfs]]
fprintfs::

  _int fprintfs( FILE* F, char *fmt, ...)_ + 
 *Defines:* fileno strlen write + 
-----
prints formatted and unbuffered output to the stream F.
 only %s and %c are recognized.
 no mini_buf or globals are used, so using fprintfs instead of fprintf can save some sections / bytes.
-----
Size: ~427B link:../../src/fprintfs.c[../src/fprintfs.c] l.10 

[[fprints]]
fprints::

  _#define fprints(F,...) dprints(fileno(F),__VA_ARGS__,0)_ + 
 *Defines:* strlen write fileno + 
-----
print the string(s) supplied as arg(s) to stream
 this macro has an variable argument count.
-----
link:../../include/prints.h[../include/prints.h] l.33 

[[fputc]]
fputc::

  _int volatile fputc(int c, FILE* F)_ + 
 *Defines:* write fileno + 
 *put a byte on a stream*
Size: ~64B link:../../include/fputc.h[../include/fputc.h] l.10 manpage: link:../manpages/stdio/putc.3.rst[fputc] +


[[fwrite]]
fwrite::

  _size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f)_ + 
 *Defines:* write + 
 *binary output*
Size: ~117B link:../../include/mini_fstream.h[../include/mini_fstream.h] l.92 manpage: link:../manpages/stdio/fread.3.rst[fwrite] +


[[fwrites]]
fwrites::

  _#define fwrites(fd,str) write(fd,str,sizeof(str))_ + 
 *Defines:* write + 
-----
write the constant str to fd. Computes length with sizeof(str) at compile time.
-----
link:../../include/prints.h[../include/prints.h] l.94 

[[group_print]]
group_print::

  __ + 
 *Defines:* fileno strlen write + 
-----
enable print and related functions
 This switch enables strlen;
 but neither globals nor the mini_buf are used.
-----
link:../../macros/defgroups.h[../macros/defgroups.h] l.13 

[[group_write]]
group_write::

  __ + 
 *Defines:* write ewrite + 
-----
write, and related functions
 these functions do not depend on strlen, 
 or any globals.
-----
link:../../macros/defgroups.h[../macros/defgroups.h] l.23 

[[print]]
print::

  _#define print(str) write(STDOUT_FILENO,str,strlen(str))_ + 
 *Defines:* strlen write + 
-----
write str to stdout. Needs strlen
-----
link:../../include/prints.h[../include/prints.h] l.54 

[[printf]]
printf::

  _#define printf(...) fprintf(stdout,__VA_ARGS__)_ + 
 *Defines:* write fileno + 
 *print formatted output*
link:../../include/mini_fstream.h[../include/mini_fstream.h] l.77 manpage: link:../manpages/stdio/printf.3.rst[printf] +


[[printfs]]
printfs::

  _#define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)_ + 
 *Defines:* write strlen fileno + 
-----
write fmt and arguments to stdout. 
 only format %s and %c are recognized
-----
link:../../include/prints.h[../include/prints.h] l.100 

[[printl]]
printl::

  _#define printl() write(STDOUT_FILENO,"\n",1)_ + 
 *Defines:* write + 
-----
write a newline to stdout
-----
link:../../include/prints.h[../include/prints.h] l.63 

[[prints]]
prints::

  _#define prints(...) _mprints(__VA_ARGS__,0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) to stdout,
 this macro has an variable argument count.
-----
link:../../include/prints.h[../include/prints.h] l.18 

[[printsl]]
printsl::

  _#define printsl(...) _mprints(__VA_ARGS__,"\n",0)_ + 
 *Defines:* write + 
-----
print the string(s) supplied as arg(s) and newline to stdout
-----
link:../../include/prints.h[../include/prints.h] l.41 

[[putc]]
putc::

  _#define putc(c,stream) fputc(c,stream)_ + 
 *Defines:* write fileno + 
 *put a byte on a stream*
link:../../include/fputc.h[../include/fputc.h] l.19 manpage: link:../manpages/stdio/putc.3.rst[putc] +


[[putchar]]
putchar::

  _#define putchar(c) fputc(c,stdout)_ + 
 *Defines:* fileno write + 
 *put a byte on a stdout stream*
link:../../include/fputc.h[../include/fputc.h] l.16 manpage: link:../manpages/stdio/putc.3.rst[putchar] +


[[puts]]
puts::

  _#define puts(msg) ( print(msg) + printl() )_ + 
 *Defines:* write strlen + 
 *put a string on standard output*
-----
write msg to stdout, append a newline. Needs strlen.
-----
link:../../include/prints.h[../include/prints.h] l.73 manpage: link:../manpages/stdio/fputs.3.rst[puts] +


[[shortcolornames]]
shortcolornames::

  __ + 
-----
short ansi color names
 all colornames, without the praefix "AC_"
-----
link:../../include/ansicolors.h[../include/ansicolors.h] l.103 

[[snprintf]]
snprintf::

  _int snprintf( char *buf, size_t size, const char *fmt, ... )_ + 
 *Defines:* write + 
 *print formatted output*
Size: ~738B link:../../src/snprintf.c[../src/snprintf.c] l.5 manpage: link:../manpages/stdio/printf.3.rst[snprintf] +


[[vfprintf]]
vfprintf::

  _#define vfprintf(...) fprintf(__VA_ARGS__)_ + 
 *Defines:* write fileno + 
link:../../include/mini_fstream.h[../include/mini_fstream.h] l.86 manpage: link:../manpages/stdio/printf.3.rst[vfprintf] +


[[vsnprintf]]
vsnprintf::

  _int vsnprintf(char *buf, size_t size, const char* fmt, va_list args )_ + 
 *Defines:* write + 
 *format output of a stdarg argument list*
-----
the function, translating the fmt of printf.
 warning - most possibly you'd like to define besides fprintf, or family,
 mini_itodec (%d conversion) 
 mini_atoi is needed for grouping numbers
-----
Size: ~590B link:../../src/sprintf.c[../src/sprintf.c] l.43 manpage: link:../manpages/stdio/printf.3.rst[vsnprintf] +


[[vsprintf]]
vsprintf::

  _int vsprintf( char *buf, const char *fmt, ... )_ + 
-----
write fmt and arguments into buf
 calls vsnprintf, 
 the size is limited to 4096 by default.
-----
link:../../src/vsprintf.c[../src/vsprintf.c] l.9 manpage: link:../manpages/stdio/printf.3.rst[vsprintf] +


[[write]]
write::

  _int write(int fd,const void *buf, int len )_ + 
 *write on a file*
Size: ~65B link:../../include/syscall_stubs.h[../include/syscall_stubs.h] l.102 manpage: link:../manpages/sys/write.2.rst[write] +


[[writes]]
writes::

  _#define writes(str) write(STDOUT_FILENO,str,sizeof(str))_ + 
 *Defines:* write + 
-----
write the constant str to stdout. Computes length with sizeof(str) at compile time.
-----
link:../../include/prints.h[../include/prints.h] l.84 