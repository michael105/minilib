== errno



[[errno]]
errno::

  _#ifdef mini_errno_ + 
 *error return value*


[[errno_str]]
errno_str::

  _char *errno_str(int err)_ + 
-----
convert errno to str, with 3 chars length
 ending the string (global) 
 with two \0\0, when errno<100
 errnum must be <200.
-----
Size: ~123B link:../../src/process/errno_str.c[../src/process/errno_str.c] l.7 

[[exit_errno]]
exit_errno::

  _void exit_errno( int errnum )_ + 
 *Defines:* errno_str write exit execve + 
-----
exit, and execute /bin/errno
 this is intended to give a error message for the 
 given errno num.
 Instead of having the error messages compiled 
 into each binary, they can stay within one executable, "errno"
 This spares about 4kB, but needs errno installed to /bin/errno
 It's the drawback of not having a shared library,
 where all executables would share the same errno messages
 in memory.
 On the other hand, a shared library would need to be installed
 as well.
 The supplied errno can be negative,
 the absolute value is supplied to errno.
-----
link:../../src/process/exit_errno.c[../src/process/exit_errno.c] l.17 

[[perror]]
perror::

  _void perror(const char *msg)_ + 
 *Defines:* errno strerror strlen fileno write + 
 *write error messages to standard error*
Size: ~329B link:../../src/output/perror.c[../src/output/perror.c] l.4 manpage: link:../manpages/string/strerror.3.rst[perror] +


[[ret_errno]]
ret_errno::

  _#ifdef mini_errno_ + 
-----
This macro expands to a return, and
 (when mini_errno is defined) returns -1 and sets errno,
 or returns the negative errno value.
-----
link:../../include/ret_errno.h[../include/ret_errno.h] l.5 

[[seterrno]]
seterrno::

  _#ifdef mini_errno_ + 
-----
set errno, but only when errno is defined.
-----
link:../../include/seterrno.h[../include/seterrno.h] l.3 

[[strerror]]
strerror::

  _char* strerror( int errnum )_ + 
link:../../src/string/strerror.c[../src/string/strerror.c] l.7 manpage: link:../manpages/string/string.3.rst[strerror] +


[[verbose_errstr]]
verbose_errstr::

  _const char* verbose_errstr(int num)_ + 
-----
verbose error (errno) string. 
 this adds about 3.5kB to the compiled binary(!)
-----
link:../../include/errstr.h[../include/errstr.h] l.10 

[[verbose_errstr2]]
verbose_errstr2::

  _const char* verbose_errstr2(int num)_ + 
-----
verbose error (errno) string. 
 this adds about 3.5kB to the compiled binary(!)
 Trying to shrink that here.
-----
link:../../include/errstr2.h[../include/errstr2.h] l.11 