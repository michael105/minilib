== conversions



[[_itobin]]
_itobin::

  _int _itobin(int i, char*buf, int prec, int groups )_ + 
Size: ~188B link:../../src/itobin.c[../src/itobin.c] l.8 

[[_itohex]]
_itohex::

  _int _itohex(int i,char* buf,int padding, int capitals)_ + 
Size: ~250B link:../../src/itohex.c[../src/itohex.c] l.6 

[[atoi]]
atoi::

  _int atoi(const char *c)_ + 
 *convert a string to an integer*
Size: ~32B link:../../src/atoi.c[../src/atoi.c] l.3 manpage: link:../manpages/stdlib/atoi.3.rst[atoi] +


[[atol]]
atol::

  _long atol(const char *c)_ + 
 *convert a string to a long integer*
Size: ~108B link:../../src/atol.c[../src/atol.c] l.3 manpage: link:../manpages/stdlib/atol.3.rst[atol] +


[[dtodec]]
dtodec::

  _int dtodec(double d, char* buf, int precision)_ + 
 *Defines:* uitodec + 
Size: ~760B link:../../src/dtodec.c[../src/dtodec.c] l.10 

[[itoHEX]]
itoHEX::

  _int itoHEX(int i,char* buf,int padding)_ + 
-----
convert a number to hexadecimal representation with big capitals.
 the conversion assumes a size of 32bits for integers,
 negative values are represented as they are stored internally.
 ( -1 is 0xFFFFFFFF, -2 0xFFFFFFFE, ... )
-----
Size: ~250B link:../../src/itohex.c[../src/itohex.c] l.65 

[[itobin]]
itobin::

  _#define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )_ + 
-----
convert a number to a binary representation.
 the conversion assumes a size of 32bits for integers,
 negative values are represented as they are stored internally.
 ( -1 is 11111111111111111111111111111111,
   -2    11111111111111111111111111111110, ...)
-----
link:../../src/itobin.c[../src/itobin.c] l.46 

[[itodec]]
itodec::

  _int itodec(int i, char *buf, int prec, char limiter, char pad )_ + 
 *Defines:* uitodec + 
Size: ~555B link:../../src/itodec.c[../src/itodec.c] l.123 

[[itohex]]
itohex::

  _int itohex(int i,char* buf,int padding)_ + 
-----
convert a number to hexadecimal representation.
 the conversion assumes a size of 32bits for integers,
 negative values are represented as they are stored internally.
 ( -1 is 0xffffffff, -2 0xfffffffe, ... )
-----
Size: ~247B link:../../src/itohex.c[../src/itohex.c] l.53 

[[itooct]]
itooct::

  _int itooct(int i, char *buf)_ + 
-----
convert int to octal
 return the number of chars written.
-----
link:../../src/itooct.c[../src/itooct.c] l.4 

[[ltodec]]
ltodec::

  _int ltodec(long i, char *buf, int prec, char limiter )_ + 
Size: ~323B link:../../src/ltodec.c[../src/ltodec.c] l.75 

[[strtol]]
strtol::

  _long int strtol(const char *c, const char **endp, int base)_ + 
 *convert a string to a long integer*
-----
conversion
 doesn't check for overflow(!)
-----
Size: ~252B link:../../src/string/strtol.c[../src/string/strtol.c] l.5 manpage: link:../manpages/stdlib/strtol.3.rst[strtol] +


[[uitodec]]
uitodec::

  _int uitodec(unsigned int i, char *buf, int prec, char limiter, char pad )_ + 
-----
convert int to string.
 prec: precision, e.g. 4=> 0087 
 pad: 0 (pad with spaces), or the char to pad
-----
link:../../src/itodec.c[../src/itodec.c] l.9 

[[ultodec]]
ultodec::

  _int ultodec(unsigned long ui, char *buf, int prec, char limiter )_ + 
Size: ~293B link:../../src/ltodec.c[../src/ltodec.c] l.6 