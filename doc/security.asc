Security considerations
=======================




First of all let's clearly state, all security measurements like stack canaries,
non executable stack, address randomisation etc. are just patches.

The origin of most exploits are unsafe functions, like . e.g. scanf or gets.
Reading user input without checking the len, furthermore having the input read into
a variable located at the stack is just a bad idea.

With minilib it is possible to at least place variables into a protected page,
(map_protected).
An overflow will stop the program with segfault, but that's better than the alternatives.

This comes at the cost of being bound to multiples of the pagesize, having "lost" 
1 page before and one page after the protected region, and the overhead of mapping the pages.

When not under extreme memory constraints, this might be however the best way to use inherently
unsafe functions.

I'm not sure whether it is worth at all, implementing e.g. stack canaries.
The problem stays. And every patch adds some complexity, which in turn
adds new attack vectors.
Worse, when thinking about glibc, the complexity is misleading of the origin of the trouble.


Therefore my proposal is to map critical variables with map_protected.

Everything else would add overhead, I'd like to spare.
The real adavantage of minilib is the small size;
and furthermore, by generating clean code it is even possible
to read through the assembled binaries and double check.
I personally do believe, that's better than having a big patchwork,
where the real problem is just "patched". To wait for the next exploit,
exploiting the origin.


Possibly I'm going to add another variable type, something like sec* (replacing char*).
This would at least spit out warnings when e.g. using scanf with a char* type.
(Oh. :) I even didn't implement scanf yet. But fgets is inherently unsafe as well. Same with sprintf..)

The buffer minilib itself uses is in combination with the default malloc located in the same page(s).
There are, however, ckecks for overruns.
It would again be possible to map the buffer somewhere else - with the overhead.

Just now I'm thinking about the overhead of the checks for the overun.
A comparison at the inner loop of e.g. printf.
Most possibly I'm going to add a compile switch, locating the buffer somwehere else.
However, again, the problem is somewhere else.







