minilib doc

Implemented Functions, sorted by the standard headers




==========
ctype.h
==========

isprint        (include/isprint.h: 9)
               static inline int __attribute__((always_inline)) isprint(const char c);

isspace        (src/isspace.c: 7)
               int isspace(int c);



==========
declarations.h
==========

dup3           (include/syscall_stubs.h: 46)
               
fstat          (include/syscall_stubs.h: 42)
               
getcwd         (include/syscall_stubs.h: 48)
               
getdents       (include/syscall_stubs.h: 34)
               
gettimeofday   (include/syscall_stubs.h: 26)
               
mprotect       (include/syscall_stubs.h: 30)
               
stat           (include/syscall_stubs.h: 43)
               
uname          (include/syscall_stubs.h: 32)
               


==========
dirent.h
==========

closedir       (src/dirent/closedir.c: 7)
               int closedir(DIR *dir);

opendir        (src/dirent/opendir.c: 11)
               DIR *opendir(const char *name);

readdir        (src/dirent/readdir.c: 10)
               struct dirent *readdir(DIR *dir);



==========
fcntl.h
==========

creat          (src/open.c: 27)
               inline int volatile __attribute__((always_inline)) creat( const char *s, int mode );



==========
ioctl.h
==========

ioctl          (src/ioctl.c: 12)
               int ioctl( int fd, unsigned long int request, ... );



==========
mini_addons.h
==========

_itobin        (src/itobin.c: 4)
               int _itobin(int i, char*buf, int prec, int groups );

_mprints       (src/prints.c: 67)
               #define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)

basename       (src/basename.c: 30)
               char *basename(char *path);

def            (include/globaldefs.h: 54)
               typedef int FILE;

dprintf        (src/sprintf.c: 203)
               int dprintf( int fd, const char *fmt, ... );

dtodec         (src/dtodec.c: 11)
               int dtodec(double d, char* buf, int precision);

fprintfs       (src/fprintfs.c: 11)
               int fprintfs( FILE* F, char *fmt, ...);
               prints formatted to the stream F.only %s is recognized.no mini_buf needed, so using fprintfs instead of fprintf can save some sections / bytes.

fwrites        (include/prints.h: 26)
               #define fwrites(fd,str) write(fd,str,sizeof(str))

itodec         (src/itodec.c: 122)
               int itodec(int i, char *buf, int prec, char limiter );

memfrob        (src/memfrob.c: 4)
               void* memfrob(void* s, unsigned int len);

print          (include/prints.h: 19)
               #define print(str) write(STDOUT_FILENO,str,strlen(str))
               write str to stdout. Needs strlen

printl         (include/prints.h: 32)
               #define printl() write(STDOUT_FILENO,"\n",1)
               write a newline to stdout

prints         (include/prints.h: 11)
               #define prints(...) _mprints(__VA_ARGS__,0)
               print the string(s) supplied as arg(s) to stdout

snprintf       (src/sprintf.c: 220)
               int snprintf( char *buf, size_t size, const char *fmt, ... );

uitodec        (src/itodec.c: 9)
               int uitodec(unsigned int i, char *buf, int prec, char limiter );

vsnprintf      (src/sprintf.c: 37)
               int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );

writes         (include/prints.h: 23)
               #define writes(str) write(STDOUT_FILENO,str,sizeof(str))



==========
stdio.h
==========

_itohex        (src/itohex.c: 6)
               int _itohex(int i,char* buf,int padding, int capitals);

clearerror     (include/mini_fstream.h: 196)
               static inline void clearerror(FILE *f);

fclose         (include/mini_fstream.h: 67)
               static inline int __attribute__((always_inline)) fclose( FILE* f );

feof           (include/mini_fstream.h: 182)
               static inline int feof(FILE *f);

ferror         (include/mini_fstream.h: 189)
               static inline int ferror(FILE *f);

fflush         (include/mini_fstream.h: 29)
               static inline int __attribute__((always_inline)) fflush( FILE *F );
               This does nothing, since minilib doesn't provide buffered streams yet.in order to sync the stream, please use fsync

fgetc          (include/fgetc.h: 11)
               static inline int fgetc(FILE *F);

fgetpos        (include/mini_fstream.h: 125)
               static inline void fgetpos(FILE *f, long *pos );

fileno         (include/mini_fstream.h: 57)
               static inline int __attribute__((always_inline)) fileno( FILE *f );

fopen          (src/fopen.c: 12)
               FILE *fopen(const char* filename, const char* mode);

fprintf        (src/sprintf.c: 245)
               #define fprintf(stream,...)	write(fileno(stream),ml.mbuf,sprintf(ml.mbuf,__VA_ARGS__))

fputc          (include/fputc.h: 11)
               static inline int volatile fputc(int c, FILE* F);

fputs          (include/fputs.h: 15)
               static inline int volatile fputs(const char *c, FILE *F);

fread          (include/mini_fstream.h: 160)
               static inline size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f);

fseek          (include/mini_fstream.h: 144)
               static inline int fseek(FILE *f, long offset, int whence );

fsetpos        (include/mini_fstream.h: 131)
               static inline int fsetpos(FILE *f, int pos );

ftell          (include/mini_fstream.h: 119)
               static inline long ftell(FILE *f);

fwrite         (include/mini_fstream.h: 104)
               static inline size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f);

getc           (include/fgetc.h: 19)
               #define getc(F) fgetc(F)

itoHEX         (src/itohex.c: 56)
               int itoHEX(int i,char* buf,int padding);

itohex         (src/itohex.c: 49)
               int itohex(int i,char* buf,int padding);

perror         (src/strerror.c: 23)
               static inline void perror(char *msg);

printf         (include/mini_fstream.h: 93)
               #define printf(...) fprintf(stdout,__VA_ARGS__)

putc           (include/fputc.h: 20)
               #define putc(c,stream) fputc(c,stream)

putchar        (include/fputc.h: 17)
               #define putchar(c) fputc(c,stdout)

puts           (include/prints.h: 37)
               #define puts(msg) ( print(msg) + printl() )
               write msg to stdout, append a newline

rewind         (include/mini_fstream.h: 154)
               static inline void rewind( FILE *f );

setbuf         (include/mini_fstream.h: 204)
               void setbuf(FILE *stream, char *buf);

setvbuf        (include/mini_fstream.h: 208)
               int setvbuf(FILE *stream, char *buf, int mode, size_t size);
               dummy

sprintf        (src/sprintf.c: 27)
               #define sprintf(str,...) snprintf( str, 4096,  __VA_ARGS__)

vfprintf       (include/mini_fstream.h: 98)
               #define vfprintf(...) fprintf(__VA_ARGS__)



==========
stdlib.h
==========

atoi           (src/atoi.c: 7)
               int atoi(char *c);

free           (src/malloc.c: 208)
               void volatile free(void* p);

getenv         (src/getenv.c: 12)
               char *getenv(const char* name);

malloc         (src/malloc.c: 158)
               void* volatile malloc(int size);

rand           (src/rand.c: 16)
               unsigned int rand();

srand          (src/rand.c: 8)
               void srand( unsigned int i );



==========
string.h
==========

memcmp         (src/mstrcmp.c: 37)
               int memcmp(const void* c1,const void* c2,int len);

memcpy         (src/memcpy.c: 7)
               void *memcpy( void *d, const void *s, int n );

memset         (src/memset.c: 4)
               void *memset( void *s, int c, int n);

strcat         (src/strcat.c: 7)
               char *strcat(char *dest, const char *src );

strcmp         (src/mstrcmp.c: 25)
               int strcmp(const char*c1,const char*c2);

strcpy         (src/memcpy.c: 18)
               char *strcpy(char *dest, const char *src);

strerror       (src/strerror.c: 10)
               char* strerror( int errnum );

strlen         (src/strlen.c: 8)
               int strlen(const char*str);

strncmp        (src/mstrcmp.c: 30)
               int strncmp(const char*c1,const char*c2,int len);

strncpy        (src/memcpy.c: 28)
               char *strncpy(char *dest, const char *src, int n);



==========
time.h
==========

time           (include/syscall_stubs.h: 52)
               


==========
unistd.h
==========

close          (include/close.h: 7)
               static inline int volatile __attribute__((always_inline)) close( int fd );

dup            (include/syscall_stubs.h: 44)
               
dup2           (include/syscall_stubs.h: 45)
               
fsync          (include/lseek.h: 21)
               
ftruncate      (include/lseek.h: 20)
               
getpid         (include/syscall_stubs.h: 28)
               
lseek          (include/lseek.h: 18)
               
open           (src/open.c: 13)
               int volatile open( const char *s, int flags, ... );

read           (include/read.h: 13)
               static inline int volatile __attribute__((always_inline)) read( int fd, void* buf, int len );

rename         (include/syscall_stubs.h: 39)
               
select         (include/select.h: 29)
               static inline int volatile __attribute__((always_inline)) select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait);

tcgetattr      (include/tcgetattr.h: 19)
               static inline int __attribute__((always_inline)) tcgetattr(int fd, struct termios *io);

tcsetattr      (include/tcsetattr.h: 19)
               static inline int __attribute__((always_inline)) tcsetattr(int fd, int opt, const struct termios *io);

unlink         (include/syscall_stubs.h: 40)
               
write          (include/syscall_stubs.h: 36)
               
