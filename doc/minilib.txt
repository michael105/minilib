minilib doc

Implemented Functions, sorted by the standard headers




==========
ctype.h
==========

isprint        static inline int __attribute__((always_inline)) isprint(const char c);
               (include/isprint.h: 8)

isspace        int isspace(int c);
               (src/isspace.c: 6)



==========
declarations.h
==========

brk            brk( unsigned long brk)
               (include/syscall_stubs.h: 170)

chmod          chmod( const char *filename, mode_t mode)
               (include/syscall_stubs.h: 163)

dup3           dup3(int a1, int a2, int a3)		
               (include/syscall_stubs.h: 113)

execveat       execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)
               (include/syscall_stubs.h: 153)

fchmod         fchmod( unsigned int fd, mode_t mode)
               (include/syscall_stubs.h: 109)

fchown         fchown( unsigned int fd, uid_t user, gid_t group)
               (include/syscall_stubs.h: 108)

fcntl          fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)
               (include/syscall_stubs.h: 158)

fstat          fstat(int a1,struct stat* a2)		
               (include/syscall_stubs.h: 104)

getcwd         getcwd( char *buf,  unsigned long size)
               (include/syscall_stubs.h: 115)

getdents       getdents( unsigned int fd, struct dirent *direntry, unsigned int count )
               (include/syscall_stubs.h: 99)

getitimer      getitimer( int which,  struct itimerval *value)
               (include/syscall_stubs.h: 179)

getppid        DEF_syscall(getppid,0)
               (include/syscall_stubs.h: 166)

gettimeofday   gettimeofday( struct timeval *a1, struct timezone *a2)
               (include/syscall_stubs.h: 131)

kill           kill( pid_t pid,  int sig)
               (include/syscall_stubs.h: 124)

mknod          mknod( const char *filename,  umode_t mode,  unsigned dev)
               (include/syscall_stubs.h: 176)

mount          mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)
               (include/syscall_stubs.h: 172)

mprotect       mprotect( POINTER *a1, POINTER a2, int a3 )
               Returns: *a1
               (include/syscall_stubs.h: 146)

nanosleep      nanosleep( struct timespec *rqtp, struct timespec *rmtp)
               (include/syscall_stubs.h: 130)

pivot_root     pivot_root( const char *new_root,  const char *put_old)
               (include/syscall_stubs.h: 137)

readahead      readahead( int fd,  loff_t offset,  size_t count)
               (include/syscall_stubs.h: 173)

reboot         reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)
               (include/syscall_stubs.h: 174)

rt_sigaction   rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)
               (include/syscall_stubs.h: 133)

rt_sigprocmask rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)
               (include/syscall_stubs.h: 181)

rt_sigreturn   rt_sigreturn( unsigned long __unused)
               (include/syscall_stubs.h: 134)

sendfile       sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)
               (include/syscall_stubs.h: 171)

setitimer      setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)
               (include/syscall_stubs.h: 178)

stat           stat(const char* filename,struct stat* a2)		
               (include/syscall_stubs.h: 105)

symlink        symlink( const char *oldname,  const char *newname)
               (include/syscall_stubs.h: 118)

sync           DEF_syscall(sync,0)
               (include/syscall_stubs.h: 119)

umask          umask( int mask)
               (include/syscall_stubs.h: 162)

uname          uname(struct old_utsname *name )
               (include/syscall_stubs.h: 148)

utime          utime( const char *filename, struct utimbuf *times)
               (include/syscall_stubs.h: 165)

vfork          DEF_syscall(vfork,0)
               (include/syscall_stubs.h: 127)

vhangup        DEF_syscall(vhangup,0 )
               (include/syscall_stubs.h: 145)

wait4          wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)
               (include/syscall_stubs.h: 156)



==========
dirent.h
==========

closedir       int closedir(DIR *dir);
               Defines: free
               (src/dirent/closedir.c: 6)

opendir        DIR *opendir(const char *name);
               Defines: malloc open close
               (src/dirent/opendir.c: 10)

readdir        struct dirent *readdir(DIR *dir);
               (src/dirent/readdir.c: 9)



==========
fcntl.h
==========

creat          int volatile creat( const char *s, int mode );
               Defines: open
               (src/open.c: 30)

mkfifo         static int mkfifo( const char* path, mode_t mode );
               (include/mkfifo.h: 4)



==========
ioctl.h
==========

ioctl          int ioctl( int fd, unsigned long int request, ... );
               (src/ioctl.c: 11)



==========
mini_addons.h
==========

_itobin        int _itobin(int i, char*buf, int prec, int groups );
               (src/itobin.c: 8)

_mprints       #define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)
               Defines: dprints
               (src/prints.c: 69)

basename       char *basename(char *path);
               Defines: strlen
               (src/basename.c: 29)

def            #define SETOPT_short( opts, option ) (;
               (macros/getoptm.h: 52)
               Set a option flag(s) (bit(s))  manually.
             		param options: e.g. just a, or ( a+h+l) to check for several flags at once

dirname        char *dirname(char *s);
               Defines: strlen
               (src/dirname.c: 8)

djb2_hash      unsigned long djb2_hash(const unsigned char *str);
               (src/hashes.c: 10)
               hashes, from d.j.Bernstein
              (http://www.cse.yorku.ca/~oz/hash.html)
              I've tested djb2_hash, and it gives quite good results.
              But I'm sure, Bernstein did think and test his algorithm sincerely.
              When combining djb2_hash and sdbm_hash, the probability of collisions
              might tend to zero.
              Me I'm going this way. I guess. I might check djb2_hash for collisions within a space of around 8 digits.

dprintf        int dprintf( int fd, const char *fmt, ... );
               Defines: write
               (src/sprintf.c: 206)

dtodec         int dtodec(double d, char* buf, int precision);
               Defines: uitodec
               (src/dtodec.c: 10)

fprintfs       int fprintfs( FILE* F, char *fmt, ...);
               Defines: strlen write fileno
               (src/fprintfs.c: 10)
               prints formatted to the stream F.only %s is recognized.no mini_buf needed, so using fprintfs instead of fprintf can save some sections / bytes.

fprints        #define fprints(F,str) write(fileno(F),str,strlen(str))
               Defines: write fileno strlen
               (include/prints.h: 17)
               print the string(s) supplied as arg(s) to stream

fwrites        #define fwrites(fd,str) write(fd,str,sizeof(str))
               Defines: write
               (include/prints.h: 39)
               write the constant str to stdout. Computes length with sizeof(str) at compile time.

grantpt        int grantpt(int fd);
               (src/pty.c: 13)

itobin         #define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )
               Defines: 
               (src/itobin.c: 41)

itodec         int itodec(int i, char *buf, int prec, char limiter );
               Defines: uitodec
               (src/itodec.c: 121)

ltodec         int ltodec(long i, char *buf, int prec, char limiter );
               (src/ltodec.c: 14)

memfrob        void* memfrob(void* s, unsigned int len);
               (src/memfrob.c: 3)

posix_openpt   int posix_openpt(int flags);
               Defines: open
               (src/pty.c: 8)

print          #define print(str) write(STDOUT_FILENO,str,strlen(str))
               Defines: strlen write
               (include/prints.h: 29)
               write str to stdout. Needs strlen

printfs        #define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)
               Defines: strlen write fileno
               (include/prints.h: 55)
               write str to stdout. 
              only format %s is recognized

printl         #define printl() write(STDOUT_FILENO,"\n",1)
               Defines: write
               (include/prints.h: 44)
               write a newline to stdout

prints         #define prints(...) _mprints(__VA_ARGS__,0)
               Defines: 
               (include/prints.h: 11)
               print the string(s) supplied as arg(s) to stdout

printsl        #define printsl(...) _mprints(__VA_ARGS__,"\n",0)
               Defines: 
               (include/prints.h: 25)
               print the string(s) supplied as arg(s) and newline to stdout

ptsname        char *ptsname(int fd);
               Defines: uitodec write
               (src/pty.c: 40)

ptsname_r      int ptsname_r(int fd, char *buf, size_t len);
               Defines: uitodec write
               (src/pty.c: 27)

sdbm_hash      unsigned long sdbm_hash(const unsigned char *str);
               (src/hashes.c: 21)

snprintf       int snprintf( char *buf, size_t size, const char *fmt, ... );
               Defines: write
               (src/sprintf.c: 223)

uitodec        int uitodec(unsigned int i, char *buf, int prec, char limiter );
               (src/itodec.c: 8)

ultodec        int ultodec(unsigned long i, char *buf, int prec, char limiter );
               (src/ltodec.c: 3)

unlockpt       int unlockpt(int fd);
               Defines: ioctl
               (src/pty.c: 20)

verbose_errstr const char* verbose_errstr(int num);
               (include/errstr.h: 8)
               verbose error (errno) string. 
              this adds about 3.5kB to the compiled binary(!)

vsnprintf      int vsnprintf(char *buf, size_t size, const char* fmt, va_list args );
               Defines: write
               (src/sprintf.c: 40)
               the function, translating the fmt of printf.
              warning - most possibly you'd like to define besides fprintf, or family,
              mini_itodec as well. (%d conversion)

writes         #define writes(str) write(STDOUT_FILENO,str,sizeof(str))
               Defines: write
               (include/prints.h: 34)
               write the constant str to stdout. Computes length with sizeof(str) at compile time.



==========
mini_ksyscalls
==========

ksys__sysctl                      (include/syscalls_x64.h: 315)

ksys_accept                       (include/syscalls_x64.h: 91)

ksys_accept4                      (include/syscalls_x64.h: 551)

ksys_access                       (include/syscalls_x64.h: 47)

ksys_acct                         (include/syscalls_x64.h: 329)

ksys_add_key                      (include/syscalls_x64.h: 471)

ksys_adjtimex                     (include/syscalls_x64.h: 321)

ksys_alarm                        (include/syscalls_x64.h: 79)

ksys_arch_prctl                   (include/syscalls_x64.h: 319)

ksys_bind                         (include/syscalls_x64.h: 103)

ksys_brk                          (include/syscalls_x64.h: 29)

ksys_capget                       (include/syscalls_x64.h: 255)

ksys_capset                       (include/syscalls_x64.h: 257)

ksys_chdir                        (include/syscalls_x64.h: 165)

ksys_chmod                        (include/syscalls_x64.h: 185)

ksys_chown                        (include/syscalls_x64.h: 189)

ksys_chroot                       (include/syscalls_x64.h: 325)

ksys_clock_adjtime                (include/syscalls_x64.h: 585)

ksys_clock_getres                 (include/syscalls_x64.h: 435)

ksys_clock_gettime                (include/syscalls_x64.h: 433)

ksys_clock_nanosleep               (include/syscalls_x64.h: 437)

ksys_clock_settime                (include/syscalls_x64.h: 431)

ksys_clone                        (include/syscalls_x64.h: 117)

ksys_close                        (include/syscalls_x64.h: 11)

ksys_connect                      (include/syscalls_x64.h: 89)

ksys_creat                        (include/syscalls_x64.h: 175)

ksys_delete_module                (include/syscalls_x64.h: 353)

ksys_dup                          (include/syscalls_x64.h: 69)

ksys_dup2                         (include/syscalls_x64.h: 71)

ksys_dup3                         (include/syscalls_x64.h: 559)

ksys_epoll_create                 (include/syscalls_x64.h: 407)

ksys_epoll_create1                (include/syscalls_x64.h: 557)

ksys_epoll_ctl                    (include/syscalls_x64.h: 443)

ksys_epoll_pwait                  (include/syscalls_x64.h: 537)

ksys_epoll_wait                   (include/syscalls_x64.h: 441)

ksys_eventfd                      (include/syscalls_x64.h: 543)

ksys_eventfd2                     (include/syscalls_x64.h: 555)

ksys_execve                       (include/syscalls_x64.h: 123)

ksys_exit                         (include/syscalls_x64.h: 125)

ksys_exit_group                   (include/syscalls_x64.h: 439)

ksys_faccessat                    (include/syscalls_x64.h: 513)

ksys_fadvise64                    (include/syscalls_x64.h: 419)

ksys_fallocate                    (include/syscalls_x64.h: 545)

ksys_fanotify_init                (include/syscalls_x64.h: 575)

ksys_fanotify_mark                (include/syscalls_x64.h: 577)

ksys_fchdir                       (include/syscalls_x64.h: 167)

ksys_fchmod                       (include/syscalls_x64.h: 187)

ksys_fchmodat                     (include/syscalls_x64.h: 511)

ksys_fchown                       (include/syscalls_x64.h: 191)

ksys_fchownat                     (include/syscalls_x64.h: 495)

ksys_fcntl                        (include/syscalls_x64.h: 149)

ksys_fdatasync                    (include/syscalls_x64.h: 155)

ksys_fgetxattr                    (include/syscalls_x64.h: 371)

ksys_finit_module                 (include/syscalls_x64.h: 601)

ksys_flistxattr                   (include/syscalls_x64.h: 377)

ksys_flock                        (include/syscalls_x64.h: 151)

ksys_fork                         (include/syscalls_x64.h: 119)

ksys_fremovexattr                 (include/syscalls_x64.h: 383)

ksys_fsetxattr                    (include/syscalls_x64.h: 365)

ksys_fstat                        (include/syscalls_x64.h: 15)

ksys_fstatfs                      (include/syscalls_x64.h: 279)

ksys_fsync                        (include/syscalls_x64.h: 153)

ksys_ftruncate                    (include/syscalls_x64.h: 159)

ksys_futex                        (include/syscalls_x64.h: 389)

ksys_futimesat                    (include/syscalls_x64.h: 497)

ksys_get_mempolicy                (include/syscalls_x64.h: 453)

ksys_get_robust_list               (include/syscalls_x64.h: 523)

ksys_getcpu                       (include/syscalls_x64.h: 593)

ksys_getcwd                       (include/syscalls_x64.h: 163)

ksys_getdents                     (include/syscalls_x64.h: 161)

ksys_getdents64                   (include/syscalls_x64.h: 411)

ksys_getegid                      (include/syscalls_x64.h: 221)

ksys_geteuid                      (include/syscalls_x64.h: 219)

ksys_getgid                       (include/syscalls_x64.h: 213)

ksys_getgroups                    (include/syscalls_x64.h: 235)

ksys_getitimer                    (include/syscalls_x64.h: 77)

ksys_getpeername                  (include/syscalls_x64.h: 109)

ksys_getpgid                      (include/syscalls_x64.h: 247)

ksys_getpgrp                      (include/syscalls_x64.h: 227)

ksys_getpid                       (include/syscalls_x64.h: 83)

ksys_getppid                      (include/syscalls_x64.h: 225)

ksys_getpriority                  (include/syscalls_x64.h: 283)

ksys_getrandom                    (include/syscalls_x64.h: 611)

ksys_getresgid                    (include/syscalls_x64.h: 245)

ksys_getresuid                    (include/syscalls_x64.h: 241)

ksys_getrlimit                    (include/syscalls_x64.h: 199)

ksys_getrusage                    (include/syscalls_x64.h: 201)

ksys_getsid                       (include/syscalls_x64.h: 253)

ksys_getsockname                  (include/syscalls_x64.h: 107)

ksys_getsockopt                   (include/syscalls_x64.h: 115)

ksys_gettid                       (include/syscalls_x64.h: 357)

ksys_gettimeofday                 (include/syscalls_x64.h: 197)

ksys_getuid                       (include/syscalls_x64.h: 209)

ksys_getxattr                     (include/syscalls_x64.h: 367)

ksys_init_module                  (include/syscalls_x64.h: 351)

ksys_inotify_add_watch               (include/syscalls_x64.h: 483)

ksys_inotify_init                 (include/syscalls_x64.h: 481)

ksys_inotify_init1                (include/syscalls_x64.h: 563)

ksys_inotify_rm_watch               (include/syscalls_x64.h: 485)

ksys_io_cancel                    (include/syscalls_x64.h: 403)

ksys_io_destroy                   (include/syscalls_x64.h: 397)

ksys_io_getevents                 (include/syscalls_x64.h: 399)

ksys_io_setup                     (include/syscalls_x64.h: 395)

ksys_io_submit                    (include/syscalls_x64.h: 401)

ksys_ioctl                        (include/syscalls_x64.h: 37)

ksys_ioperm                       (include/syscalls_x64.h: 349)

ksys_iopl                         (include/syscalls_x64.h: 347)

ksys_ioprio_get                   (include/syscalls_x64.h: 479)

ksys_ioprio_set                   (include/syscalls_x64.h: 477)

ksys_kcmp                         (include/syscalls_x64.h: 599)

ksys_kexec_file_load               (include/syscalls_x64.h: 615)

ksys_kexec_load                   (include/syscalls_x64.h: 467)

ksys_keyctl                       (include/syscalls_x64.h: 475)

ksys_kill                         (include/syscalls_x64.h: 129)

ksys_lchown                       (include/syscalls_x64.h: 193)

ksys_lgetxattr                    (include/syscalls_x64.h: 369)

ksys_link                         (include/syscalls_x64.h: 177)

ksys_linkat                       (include/syscalls_x64.h: 505)

ksys_listen                       (include/syscalls_x64.h: 105)

ksys_listxattr                    (include/syscalls_x64.h: 373)

ksys_llistxattr                   (include/syscalls_x64.h: 375)

ksys_lookup_dcookie               (include/syscalls_x64.h: 405)

ksys_lremovexattr                 (include/syscalls_x64.h: 381)

ksys_lseek                        (include/syscalls_x64.h: 21)

ksys_lsetxattr                    (include/syscalls_x64.h: 363)

ksys_lstat                        (include/syscalls_x64.h: 17)

ksys_madvise                      (include/syscalls_x64.h: 61)

ksys_mbind                        (include/syscalls_x64.h: 449)

ksys_memfd_create                 (include/syscalls_x64.h: 613)

ksys_migrate_pages                (include/syscalls_x64.h: 487)

ksys_mincore                      (include/syscalls_x64.h: 59)

ksys_mkdir                        (include/syscalls_x64.h: 171)

ksys_mkdirat                      (include/syscalls_x64.h: 491)

ksys_mknod                        (include/syscalls_x64.h: 271)

ksys_mknodat                      (include/syscalls_x64.h: 493)

ksys_mlock                        (include/syscalls_x64.h: 301)

ksys_mlockall                     (include/syscalls_x64.h: 305)

ksys_mmap                         (include/syscalls_x64.h: 23)

ksys_modify_ldt                   (include/syscalls_x64.h: 311)

ksys_mount                        (include/syscalls_x64.h: 333)

ksys_move_pages                   (include/syscalls_x64.h: 533)

ksys_mprotect                     (include/syscalls_x64.h: 25)

ksys_mq_getsetattr                (include/syscalls_x64.h: 465)

ksys_mq_notify                    (include/syscalls_x64.h: 463)

ksys_mq_open                      (include/syscalls_x64.h: 455)

ksys_mq_timedreceive               (include/syscalls_x64.h: 461)

ksys_mq_timedsend                 (include/syscalls_x64.h: 459)

ksys_mq_unlink                    (include/syscalls_x64.h: 457)

ksys_mremap                       (include/syscalls_x64.h: 55)

ksys_msgctl                       (include/syscalls_x64.h: 147)

ksys_msgget                       (include/syscalls_x64.h: 141)

ksys_msgrcv                       (include/syscalls_x64.h: 145)

ksys_msgsnd                       (include/syscalls_x64.h: 143)

ksys_msync                        (include/syscalls_x64.h: 57)

ksys_munlock                      (include/syscalls_x64.h: 303)

ksys_munlockall                   (include/syscalls_x64.h: 307)

ksys_munmap                       (include/syscalls_x64.h: 27)

ksys_name_to_handle_at               (include/syscalls_x64.h: 581)

ksys_nanosleep                    (include/syscalls_x64.h: 75)

ksys_newfstatat                   (include/syscalls_x64.h: 499)

ksys_open                         (include/syscalls_x64.h: 9)

ksys_open_by_handle_at               (include/syscalls_x64.h: 583)

ksys_openat                       (include/syscalls_x64.h: 489)

ksys_pause                        (include/syscalls_x64.h: 73)

ksys_perf_event_open               (include/syscalls_x64.h: 571)

ksys_personality                  (include/syscalls_x64.h: 273)

ksys_pipe                         (include/syscalls_x64.h: 49)

ksys_pipe2                        (include/syscalls_x64.h: 561)

ksys_pivot_root                   (include/syscalls_x64.h: 313)

ksys_poll                         (include/syscalls_x64.h: 19)

ksys_ppoll                        (include/syscalls_x64.h: 517)

ksys_prctl                        (include/syscalls_x64.h: 317)

ksys_pread64                      (include/syscalls_x64.h: 39)

ksys_preadv                       (include/syscalls_x64.h: 565)

ksys_prlimit64                    (include/syscalls_x64.h: 579)

ksys_process_vm_readv               (include/syscalls_x64.h: 595)

ksys_process_vm_writev               (include/syscalls_x64.h: 597)

ksys_pselect6                     (include/syscalls_x64.h: 515)

ksys_ptrace                       (include/syscalls_x64.h: 207)

ksys_pwrite64                     (include/syscalls_x64.h: 41)

ksys_pwritev                      (include/syscalls_x64.h: 567)

ksys_quotactl                     (include/syscalls_x64.h: 355)

ksys_read                         (include/syscalls_x64.h: 5)

ksys_readahead                    (include/syscalls_x64.h: 359)

ksys_readlink                     (include/syscalls_x64.h: 183)

ksys_readlinkat                   (include/syscalls_x64.h: 509)

ksys_readv                        (include/syscalls_x64.h: 43)

ksys_reboot                       (include/syscalls_x64.h: 341)

ksys_recvfrom                     (include/syscalls_x64.h: 95)

ksys_recvmmsg                     (include/syscalls_x64.h: 573)

ksys_recvmsg                      (include/syscalls_x64.h: 99)

ksys_remap_file_pages               (include/syscalls_x64.h: 409)

ksys_removexattr                  (include/syscalls_x64.h: 379)

ksys_rename                       (include/syscalls_x64.h: 169)

ksys_renameat                     (include/syscalls_x64.h: 503)

ksys_renameat2                    (include/syscalls_x64.h: 607)

ksys_request_key                  (include/syscalls_x64.h: 473)

ksys_restart_syscall               (include/syscalls_x64.h: 415)

ksys_rmdir                        (include/syscalls_x64.h: 173)

ksys_rt_sigaction                 (include/syscalls_x64.h: 31)

ksys_rt_sigpending                (include/syscalls_x64.h: 259)

ksys_rt_sigprocmask               (include/syscalls_x64.h: 33)

ksys_rt_sigqueueinfo               (include/syscalls_x64.h: 263)

ksys_rt_sigreturn                 (include/syscalls_x64.h: 35)

ksys_rt_sigsuspend                (include/syscalls_x64.h: 265)

ksys_rt_sigtimedwait               (include/syscalls_x64.h: 261)

ksys_rt_tgsigqueueinfo               (include/syscalls_x64.h: 569)

ksys_sched_get_priority_max               (include/syscalls_x64.h: 295)

ksys_sched_get_priority_min               (include/syscalls_x64.h: 297)

ksys_sched_getaffinity               (include/syscalls_x64.h: 393)

ksys_sched_getattr                (include/syscalls_x64.h: 605)

ksys_sched_getparam               (include/syscalls_x64.h: 289)

ksys_sched_getscheduler               (include/syscalls_x64.h: 293)

ksys_sched_rr_get_interval               (include/syscalls_x64.h: 299)

ksys_sched_setaffinity               (include/syscalls_x64.h: 391)

ksys_sched_setattr                (include/syscalls_x64.h: 603)

ksys_sched_setparam               (include/syscalls_x64.h: 287)

ksys_sched_setscheduler               (include/syscalls_x64.h: 291)

ksys_sched_yield                  (include/syscalls_x64.h: 53)

ksys_seccomp                      (include/syscalls_x64.h: 609)

ksys_select                       (include/syscalls_x64.h: 51)

ksys_semctl                       (include/syscalls_x64.h: 137)

ksys_semget                       (include/syscalls_x64.h: 133)

ksys_semop                        (include/syscalls_x64.h: 135)

ksys_semtimedop                   (include/syscalls_x64.h: 417)

ksys_sendfile                     (include/syscalls_x64.h: 85)

ksys_sendmmsg                     (include/syscalls_x64.h: 589)

ksys_sendmsg                      (include/syscalls_x64.h: 97)

ksys_sendto                       (include/syscalls_x64.h: 93)

ksys_set_mempolicy                (include/syscalls_x64.h: 451)

ksys_set_robust_list               (include/syscalls_x64.h: 521)

ksys_set_tid_address               (include/syscalls_x64.h: 413)

ksys_setdomainname                (include/syscalls_x64.h: 345)

ksys_setfsgid                     (include/syscalls_x64.h: 251)

ksys_setfsuid                     (include/syscalls_x64.h: 249)

ksys_setgid                       (include/syscalls_x64.h: 217)

ksys_setgroups                    (include/syscalls_x64.h: 237)

ksys_sethostname                  (include/syscalls_x64.h: 343)

ksys_setitimer                    (include/syscalls_x64.h: 81)

ksys_setns                        (include/syscalls_x64.h: 591)

ksys_setpgid                      (include/syscalls_x64.h: 223)

ksys_setpriority                  (include/syscalls_x64.h: 285)

ksys_setregid                     (include/syscalls_x64.h: 233)

ksys_setresgid                    (include/syscalls_x64.h: 243)

ksys_setresuid                    (include/syscalls_x64.h: 239)

ksys_setreuid                     (include/syscalls_x64.h: 231)

ksys_setrlimit                    (include/syscalls_x64.h: 323)

ksys_setsid                       (include/syscalls_x64.h: 229)

ksys_setsockopt                   (include/syscalls_x64.h: 113)

ksys_settimeofday                 (include/syscalls_x64.h: 331)

ksys_setuid                       (include/syscalls_x64.h: 215)

ksys_setxattr                     (include/syscalls_x64.h: 361)

ksys_shmat                        (include/syscalls_x64.h: 65)

ksys_shmctl                       (include/syscalls_x64.h: 67)

ksys_shmdt                        (include/syscalls_x64.h: 139)

ksys_shmget                       (include/syscalls_x64.h: 63)

ksys_shutdown                     (include/syscalls_x64.h: 101)

ksys_sigaltstack                  (include/syscalls_x64.h: 267)

ksys_signalfd                     (include/syscalls_x64.h: 539)

ksys_signalfd4                    (include/syscalls_x64.h: 553)

ksys_socket                       (include/syscalls_x64.h: 87)

ksys_socketpair                   (include/syscalls_x64.h: 111)

ksys_splice                       (include/syscalls_x64.h: 525)

ksys_stat                         (include/syscalls_x64.h: 13)

ksys_statfs                       (include/syscalls_x64.h: 277)

ksys_swapoff                      (include/syscalls_x64.h: 339)

ksys_swapon                       (include/syscalls_x64.h: 337)

ksys_symlink                      (include/syscalls_x64.h: 181)

ksys_symlinkat                    (include/syscalls_x64.h: 507)

ksys_sync                         (include/syscalls_x64.h: 327)

ksys_sync_file_range               (include/syscalls_x64.h: 529)

ksys_syncfs                       (include/syscalls_x64.h: 587)

ksys_sysfs                        (include/syscalls_x64.h: 281)

ksys_sysinfo                      (include/syscalls_x64.h: 203)

ksys_syslog                       (include/syscalls_x64.h: 211)

ksys_tee                          (include/syscalls_x64.h: 527)

ksys_tgkill                       (include/syscalls_x64.h: 445)

ksys_time                         (include/syscalls_x64.h: 387)

ksys_timer_create                 (include/syscalls_x64.h: 421)

ksys_timer_delete                 (include/syscalls_x64.h: 429)

ksys_timer_getoverrun               (include/syscalls_x64.h: 427)

ksys_timer_gettime                (include/syscalls_x64.h: 425)

ksys_timer_settime                (include/syscalls_x64.h: 423)

ksys_timerfd_create               (include/syscalls_x64.h: 541)

ksys_timerfd_gettime               (include/syscalls_x64.h: 549)

ksys_timerfd_settime               (include/syscalls_x64.h: 547)

ksys_times                        (include/syscalls_x64.h: 205)

ksys_tkill                        (include/syscalls_x64.h: 385)

ksys_truncate                     (include/syscalls_x64.h: 157)

ksys_umask                        (include/syscalls_x64.h: 195)

ksys_umount2                      (include/syscalls_x64.h: 335)

ksys_uname                        (include/syscalls_x64.h: 131)

ksys_unlink                       (include/syscalls_x64.h: 179)

ksys_unlinkat                     (include/syscalls_x64.h: 501)

ksys_unshare                      (include/syscalls_x64.h: 519)

ksys_ustat                        (include/syscalls_x64.h: 275)

ksys_utime                        (include/syscalls_x64.h: 269)

ksys_utimensat                    (include/syscalls_x64.h: 535)

ksys_utimes                       (include/syscalls_x64.h: 447)

ksys_vfork                        (include/syscalls_x64.h: 121)

ksys_vhangup                      (include/syscalls_x64.h: 309)

ksys_vmsplice                     (include/syscalls_x64.h: 531)

ksys_wait4                        (include/syscalls_x64.h: 127)

ksys_waitid                       (include/syscalls_x64.h: 469)

ksys_write                        (include/syscalls_x64.h: 7)

ksys_writev                       (include/syscalls_x64.h: 45)



==========
signal.h
==========

sigaction      static int volatile sigaction(int sig, const struct sigaction *act, struct sigaction *oact);
               Defines: memcpy
               (src/sigaction.c: 106)

sigaddset      int sigaddset(sigset_t *set, int sig);
               (src/sigaction.c: 34)

sigdelset      int sigdelset(sigset_t *set, int sig);
               (src/sigaction.c: 58)

sigemptyset    static int sigemptyset(sigset_t *set);
               (src/sigaction.c: 7)

sigfillset     static int sigfillset(sigset_t *set);
               (src/sigaction.c: 20)

sigismember    int sigismember(sigset_t *set, int sig);
               (src/sigaction.c: 75)

signal         sighandler_t signal(int sig, sighandler_t func );
               Defines: memcpy
               (src/signal.c: 8)

sigprocmask    int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
               (src/sigaction.c: 52)



==========
stdio.h
==========

_fopen         FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f);
               Defines: open close fileno
               (src/fopen.c: 12)
               modes implemented: r, r+, w, w+, a, a+

_itohex        int _itohex(int i,char* buf,int padding, int capitals);
               (src/itohex.c: 6)

clearerr       static inline void clearerr(FILE *f);
               (include/mini_fstream.h: 198)

clearerror     static inline void clearerror(FILE *f);
               (include/mini_fstream.h: 203)

fclose         static inline int __attribute__((always_inline)) fclose( FILE* f );
               Defines: close
               (include/mini_fstream.h: 65)

fdopen         FILE *fdopen(int fd, const char* mode);
               Defines: open
               (src/fopen.c: 90)
               modes implemented: r, r+, w, w+, a, a+

feof           static inline int feof(FILE *f);
               (include/mini_fstream.h: 184)

ferror         static inline int ferror(FILE *f);
               (include/mini_fstream.h: 191)

fflush         static inline int __attribute__((always_inline)) fflush( FILE *F );
               (include/mini_fstream.h: 28)
               This does nothing, since minilib doesn't provide buffered streams yet.In order to sync data to disc, please use fsync

fgetc          static inline int fgetc(FILE *F);
               Defines: read fileno
               (include/fgetc.h: 11)

fgetpos        static inline void fgetpos(FILE *f, long *pos );
               Defines: lseek
               (include/mini_fstream.h: 127)

fgets          char* fgets(char *buf, int size, FILE* F);
               Defines: read fileno
               (src/fgets.c: 6)

fileno         static inline int __attribute__((always_inline)) fileno( FILE *f );
               (include/mini_fstream.h: 56)
               Return the fd nummber of stdin,-out,-err. 

fopen          FILE *fopen(const char* filename, const char* mode);
               Defines: open
               (src/fopen.c: 80)
               modes implemented: r, r+, w, w+, a, a+

fprint         #define fprint(...) fprintf(__VA_ARGS__)
               Defines: fileno write
               (include/mini_fstream.h: 95)

fprintf        #define fprintf(stream,...)	write(fileno(stream),ml.mbuf,sprintf(ml.mbuf,__VA_ARGS__))
               Defines: fileno write
               (src/sprintf.c: 248)

fputc          static inline int volatile fputc(int c, FILE* F);
               Defines: write fileno
               (include/fputc.h: 10)

fputs          static inline int volatile fputs(const char *c, FILE *F);
               Defines: strlen write fileno
               (include/fputs.h: 20)

fread          static inline size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f);
               Defines: read
               (include/mini_fstream.h: 162)

freopen        FILE *freopen(const char* filename, const char* mode, FILE *F);
               Defines: open
               (src/fopen.c: 100)
               modes implemented: r, r+, w, w+, a, a+

fseek          static inline int fseek(FILE *f, long offset, int whence );
               Defines: lseek
               (include/mini_fstream.h: 146)

fsetpos        static inline int fsetpos(FILE *f, int pos );
               Defines: lseek
               (include/mini_fstream.h: 133)

ftell          static inline long ftell(FILE *f);
               Defines: lseek
               (include/mini_fstream.h: 121)

fwrite         static inline size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f);
               Defines: write
               (include/mini_fstream.h: 106)

getc           #define getc(F) fgetc(F)
               Defines: fileno read
               (include/fgetc.h: 26)

getchar        #define getchar() fgetc(0)
               Defines: fileno read
               (include/fgetc.h: 29)

gets           #define gets(F) fgets(F,0xfffffff,stdin)
               Defines: fileno read
               (src/fgets.c: 29)

itoHEX         int itoHEX(int i,char* buf,int padding);
               Defines: 
               (src/itohex.c: 56)

itohex         int itohex(int i,char* buf,int padding);
               Defines: 
               (src/itohex.c: 49)

perror         void perror(const char *msg);
               Defines: write fileno strlen strerror
               (src/strerror.c: 26)

printf         #define printf(...) fprintf(stdout,__VA_ARGS__)
               Defines: fileno write
               (include/mini_fstream.h: 91)

putc           #define putc(c,stream) fputc(c,stream)
               Defines: fileno write
               (include/fputc.h: 19)

putchar        #define putchar(c) fputc(c,stdout)
               Defines: write fileno
               (include/fputc.h: 16)

puts           #define puts(msg) ( print(msg) + printl() )
               Defines: strlen write
               (include/prints.h: 49)
               write msg to stdout, append a newline. Needs strlen.

rewind         static inline void rewind( FILE *f );
               Defines: lseek
               (include/mini_fstream.h: 156)

setbuf         static void setbuf(FILE *stream, char *buf);
               (include/mini_fstream.h: 211)
               dummy function.
              There is no buffering implemented for the streams yet.

setvbuf        static int setvbuf(FILE *stream, char *buf, int mode, size_t size);
               (include/mini_fstream.h: 216)
               dummy function

sprintf        #define sprintf(str,...) snprintf( str, 4096,  __VA_ARGS__)
               Defines: write
               (src/sprintf.c: 26)

ungetc         static int ungetc(int c, FILE *F);
               (include/fgetc.h: 35)
               pushes one char back to the stream.
              Overwrites a previously pushed char
              (conforming to the posix spec) 

vfprintf       #define vfprintf(...) fprintf(__VA_ARGS__)
               Defines: fileno write
               (include/mini_fstream.h: 100)



==========
stdlib.h
==========

atoi           int atoi(const char *c);
               (src/atoi.c: 6)

free           void volatile free(void* p);
               (src/malloc.c: 295)

getenv         char* getenv(const char* name);
               Defines: environ
               (src/getenv.c: 8)

malloc         void* volatile malloc(int size);
               (src/malloc.c: 245)

rand           unsigned int rand();
               (src/rand.c: 15)

realloc        void* realloc(void *p, int size);
               Defines: malloc free
               (src/malloc.c: 176)

srand          void srand( unsigned int i );
               (src/rand.c: 7)

system         int system( const char* command );
               Defines: write vfork execve environ wait4
               (src/system.c: 4)

todo_putenv    int todo_putenv( char *s );
               Defines: environ
               (src/getenv.c: 22)



==========
string.h
==========

_strcasecmp    int _strcasecmp(const char*c1,const char*c2,int len);
               (src/strcmp.c: 30)

_strcmp        int _strcmp(const char*c1,const char*c2,int len);
               (src/strcmp.c: 13)

memcmp         int memcmp(const void* c1,const void* c2,int len);
               Defines: 0
               (src/strcmp.c: 85)

memcpy         void *memcpy( void *d, const void *s, int n );
               (src/memcpy.c: 6)

memmove        void* memmove(void *dest, const void *src, int n);
               (src/memmove.c: 3)

memset         void *memset( void *s, int c, int n);
               (src/memset.c: 3)

strcasecmp     int strcasecmp(const char*c1,const char*c2);
               Defines: 
               (src/strcmp.c: 49)

strcat         char *strcat(char *dest, const char *src );
               Defines: strlen
               (src/strcat.c: 7)

strchr         char *strchr(const char *s, int c);
               Defines: strchrnul
               (src/strchr.c: 20)

strchrnul      char *strchrnul(const char *s, int c);
               (src/strchr.c: 7)

strcmp         int strcmp(const char*c1,const char*c2);
               Defines: 
               (src/strcmp.c: 68)

strcpy         char *strcpy(char *dest, const char *src);
               (src/memcpy.c: 17)

strdup         char *strdup(const char *source);
               Defines: strlen strcpy malloc
               (src/strdup.c: 7)

strerror       char* strerror( int errnum );
               (src/strerror.c: 9)

strlen         int strlen(const char*str);
               (src/strlen.c: 7)

strncasecmp    int strncasecmp(const char*c1,const char*c2,int len);
               Defines: 
               (src/strcmp.c: 57)

strncmp        int strncmp(const char*c1,const char*c2,int len);
               Defines: 
               (src/strcmp.c: 76)

strncpy        char *strncpy(char *dest, const char *src, int n);
               Defines: memcpy
               (src/memcpy.c: 27)

strrchr        char *strrchr(const char *s, int c);
               Defines: strchrnul
               (src/strchr.c: 36)

strstr         char* strstr(const char *big, const char *little);
               (src/strstr.c: 3)



==========
sys/wait.h
==========

wait           pid_t wait(int *wstatus);
               Defines: wait4
               (src/wait.c: 8)

waitpid        pid_t waitpid(pid_t pid, int *wstatus, int options);
               Defines: wait4
               (src/wait.c: 16)



==========
time.h
==========

time           time(unsigned int *a1 )
               (include/syscall_stubs.h: 184)



==========
unistd.h
==========

access         access( const char *filename, int mode)
               (include/syscall_stubs.h: 157)

chdir          chdir(const char* path)		
               (include/syscall_stubs.h: 106)

chown          chown( const char *filename, uid_t user, gid_t group)
               (include/syscall_stubs.h: 164)

chroot         chroot( const char *filename)
               (include/syscall_stubs.h: 136)

close          close( int fd )
               (include/syscall_stubs.h: 95)

dup            dup(int a1)		
               (include/syscall_stubs.h: 111)

dup2           dup2(int a1, int a2)		
               (include/syscall_stubs.h: 112)

execv          static inline int execv(const char *pathname, char *const argv[]);
               Defines: environ execve
               (src/execvp.c: 7)

execve         execve( const char *filename,  char* const* argv, char* const* envp)
               (include/syscall_stubs.h: 122)

execvp         static inline int execvp(const char *file, char *const argv[]);
               Defines: environ execve
               (src/execvp.c: 61)

execvpe        static int execvpe(const char *file, char *const argv[], char *const envp[]);
               Defines: execve access environ
               (src/execvp.c: 21)
               When invoked with a filename, starting with "." or "/",
              interprets this as absolute path. (calls execve with the pathname)
              Looks for file in the PATH environment, othwerise.

fexecveat      static inline int fexecveat(int fd, char *const argv[], char *const envp[]);
               (src/execvp.c: 12)

fork           DEF_syscall(fork,0)
               (include/syscall_stubs.h: 126)

fsync          fsync(int a1 )
               (include/lseek.h: 20)

ftruncate      ftruncate(unsigned int a1, unsigned int a2 )
               (include/lseek.h: 19)

getgid         DEF_syscall(getgid,0)
               (include/syscall_stubs.h: 168)

getpgrp        DEF_syscall(getpgrp,0)
               (include/syscall_stubs.h: 169)

getpid         DEF_syscall(getpid,0 )
               (include/syscall_stubs.h: 140)

getuid         DEF_syscall(getuid,0)
               (include/syscall_stubs.h: 175)

isatty         int isatty(int fd);
               Defines: ioctl
               (src/isatty.c: 7)

link           link( const char *oldname, const char *newname)
               (include/syscall_stubs.h: 117)

lseek          lseek(unsigned int a1, int a2, int a3 )
               (include/lseek.h: 17)

mkdir          mkdir( const char *pathname, int mode)
               (include/syscall_stubs.h: 154)

open           int volatile open( const char *s, int flags, ... );
               (src/open.c: 13)

pipe           pipe( int *filedes)
               (include/syscall_stubs.h: 161)

read           read( int fd, void *buf, int len )
               (include/syscall_stubs.h: 96)

rename         rename( const char* oldpath, const char* newpath )		
               (include/syscall_stubs.h: 101)

rmdir          rmdir( const char *pathname)
               (include/syscall_stubs.h: 155)

select         static inline int volatile __attribute__((always_inline)) select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait);
               (include/select.h: 10)

setgid         setgid( gid_t gid)
               (include/syscall_stubs.h: 142)

setpgid        setpgid( pid_t pid, pid_t pgid)
               (include/syscall_stubs.h: 167)

setsid         DEF_syscall(setsid,0 )
               (include/syscall_stubs.h: 141)

setuid         setuid( uid_t uid)
               (include/syscall_stubs.h: 143)

sleep          unsigned int sleep(unsigned int seconds);
               (src/sleep.c: 10)
               nonconformant sleep
              TODO: ignore blocked signals, sigchld

tcgetattr      static inline int __attribute__((always_inline)) tcgetattr(int fd, struct termios *io);
               Defines: ioctl
               (include/tcgetattr.h: 21)

tcsetattr      static inline int __attribute__((always_inline)) tcsetattr(int fd, int opt, const struct termios *io);
               Defines: ioctl
               (include/tcsetattr.h: 20)

unlink         unlink( const char* a1)		
               (include/syscall_stubs.h: 102)

usleep         unsigned int usleep(unsigned int useconds);
               (src/sleep.c: 31)
               nonconformant usleep. 
              Sleep useconds, one usecond equals 1.024 microseconds.
              I just hope, noone relies on an exact sleep time.
              which isn't possible without a real time os, anyways.
              When for whatever reason you'd need nanoseconds exact times,
              best shot might be a spinloop, and looking for cpu ticks.
             
              TODO: ignore blocked signals, sigchld

write          write(int fd,const void *buf, int len )
               (include/syscall_stubs.h: 97)

