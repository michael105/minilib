 minilib api
=============



Only functions defined are going to be built.

The given sizes are estimations, each function added as single function within
a binary that much bytes to the overall size.

It is however not possible to give exact numbers, these depend on how much the compiler
can optimize for each call. What is different each time, depending on the circumstances.

To complicate things more, some functions will be inlined, others will be reused.

And, the choosen linker script will have it's (sometimes surprising) influence.


 Config
--------


In addition to the switches, which are built of the function's name and the prefix 'mini_'; +
e.g. 'mini_fputs', these switches are defined for the configuration of minilib:


mini_start:: 
	Built the start routine, which is needed for startup of the binary.


mini_buf 512::
	the buf size in Bytes, which is used by minilib for input/output functions,
	the globals and malloc/free. 
	Uncomment this, if you do not need globals or functions,
	depending on the buffer.


globals_on_stack::
  put the minibuf and all globals onto the stack
	(this enables to omit all sections besides text and stack of the binary,
	for aggressive size optimization)
	The address of the globals is going to be stored within a fixed cpu register. (r15 at amd64)
	

OPTFLAG -Os::
  optimization Flag. Os,O1,O2 might be save. O3 is known to cause sometimes trouble


   e.g. OPTFLAG '-g -O0'
   (compile with debug info)


STRIPFLAG::
  stripflag ( defaults to -s)
	Leaving 'STRIPFLAG' alone removes the flag parameter from gcc's commandline.


INCLUDESRC::
  Build minilib with source. 
	Without this switch, only defines and declarations are built
	When building with several object files, most probably you should 
	enable this flag only for one object file.
	It's also possible to pass the switch via a define flag to gcc.
	('-DINCLUDESRC')


LDSCRIPT default::
  
	The ldscript to use +
  Can be one of: default, onlytext, textandbss +
  Defines, which executable sections are going to be built. +
  *default*: .text .data .rodata .bss (.stack) +
  *onlytext*: .text (.stack) +
  *textandbss*: .text .bss (.stack)


SHRINKELF::
  Shrink the compiled binary with shrinkelf. +
	Aggressively strip the elf headers.


DEBUG::
  generate debug info (-O0 -g). Overwrites OPTFLAG, STRIPFLAG and SHRINKELF




:toc:





 conversions
-------------


_itobin::

  _int _itobin(int i, char*buf, int prec, int groups )_
 +
  Size: ~188B  link:../src/itobin.c[../src/itobin.c] l.8 

_itohex::

  _int _itohex(int i,char* buf,int padding, int capitals)_
 +
  Size: ~250B  link:../src/itohex.c[../src/itohex.c] l.6 

atoi::

  _int atoi(const char *c)_
 +
  convert a string to an integer +
 Size: ~32B  link:../src/atoi.c[../src/atoi.c] l.6  manpage: link:manpages/stdlib/atoi.3.rst[atoi] +


atol::

  _long atol(const char *c)_
 +
  convert a string to a long integer +
 Size: ~108B  link:../src/atoi.c[../src/atoi.c] l.43  manpage: link:manpages/stdlib/atol.3.rst[atol] +


dtodec::

  _int dtodec(double d, char* buf, int precision)_
 +
  Defines: uitodec +
 Size: ~760B  link:../src/dtodec.c[../src/dtodec.c] l.10 

itoHEX::

  _int itoHEX(int i,char* buf,int padding)_
 +
  Size: ~250B  link:../src/itohex.c[../src/itohex.c] l.56 

itobin::

  _#define itobin(A,B,...) _itobin(A,B,VARARG(SHIFT(__VA_ARGS__),0), VARARG(SHIFT(ARG( __VA_ARGS__ )),32) )_
 +
  link:../src/itobin.c[../src/itobin.c] l.41 

itodec::

  _int itodec(int i, char *buf, int prec, char limiter )_
 +
  Defines: uitodec +
 Size: ~555B  link:../src/itodec.c[../src/itodec.c] l.116 

itohex::

  _int itohex(int i,char* buf,int padding)_
 +
  Size: ~247B  link:../src/itohex.c[../src/itohex.c] l.49 

ltodec::

  _int ltodec(long i, char *buf, int prec, char limiter )_
 +
  Size: ~323B  link:../src/ltodec.c[../src/ltodec.c] l.75 

strtol::

  _long int strtol(const char *c, const char **endp, int base)_
 +
  convert a string to a long integer +
 conversion +
  doesn't check for overflow(!) +
  Size: ~252B  link:../src/strtol.c[../src/strtol.c] l.5  manpage: link:manpages/stdlib/strtol.3.rst[strtol] +


uitodec::

  _int uitodec(unsigned int i, char *buf, int prec, char limiter )_
 +
  link:../src/itodec.c[../src/itodec.c] l.8 

ultodec::

  _int ultodec(unsigned long ui, char *buf, int prec, char limiter )_
 +
  Size: ~293B  link:../src/ltodec.c[../src/ltodec.c] l.6 

 directories
-------------


basename::

  _char *basename(char *path)_
 +
  Defines: strlen +
 return the last component of a pathname +
 Size: ~151B  link:../src/basename.c[../src/basename.c] l.29  manpage: link:manpages/gen/basename.3.rst[basename] +


chdir::

  _int chdir(const char* path)_
 +
  change working directory +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.107  manpage: link:manpages/sys/chdir.2.rst[chdir] +


dirfd::

  _int dirfd(DIR *d)_
 +
  extract the file descriptor used by a DIR stream +
 link:../src/dirent/dirfd.c[../src/dirent/dirfd.c] l.5  manpage: link:manpages/gen/directory.3.rst[dirfd] +


dirname::

  _char *dirname(char *s)_
 +
  Defines: strlen +
 report the parent directory name of a file pathname +
 Size: ~179B  link:../src/dirname.c[../src/dirname.c] l.8  manpage: link:manpages/gen/dirname.3.rst[dirname] +


fstat::

  _int fstat(int fd,struct stat* statbuf)_
 +
  get file status +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.105  manpage: link:manpages/sys/stat.2.rst[fstat] +


getcwd::

  _int getcwd( char *buf,  unsigned long size)_
 +
  get the pathname of the current working directory +
 Size: ~61B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.116  manpage: link:manpages/gen/getcwd.3.rst[getcwd] +


getdents::

  _int getdents( unsigned int fd, struct dirent *direntry, unsigned int count )_
 +
  get directory entries +
 Size: ~65B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.100  manpage: link:manpages/sys/getdirentries.2.rst[getdents] +


mkdir::

  _int mkdir( const char *pathname, int mode)_
 +
  make a directory relative to directory file descriptor +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.154  manpage: link:manpages/sys/mkdir.2.rst[mkdir] +


opendir::

  _DIR *opendir(const char *name)_
 +
  Defines: malloc open close +
 open directory associated with file descriptor +
 Size: ~281B  link:../src/dirent/opendir.c[../src/dirent/opendir.c] l.9  manpage: link:manpages/gen/directory.3.rst[opendir] +


readdir::

  _struct dirent *readdir(DIR *dir)_
 +
  read a directory +
 read a directory. +
  return the next dirent, or 0, if the end is reached. +
  return -1 on error and set errno, +
  if mini_errno is not defined, return -errno +
  Size: ~133B  link:../src/dirent/readdir.c[../src/dirent/readdir.c] l.9  manpage: link:manpages/gen/directory.3.rst[readdir] +


rewinddir::

  _void rewinddir(DIR *dir)_
 +
  reset the position of a directory stream to the beginning +
 Size: ~80B  link:../src/dirent/rewinddir.c[../src/dirent/rewinddir.c] l.2  manpage: link:manpages/gen/directory.3.rst[rewinddir] +


rmdir::

  _int rmdir( const char *pathname)_
 +
  remove a directory +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.155  manpage: link:manpages/sys/rmdir.2.rst[rmdir] +


seekdir::

  _void seekdir(DIR *dir, long off)_
 +
  set the position of a directory stream +
 Size: ~100B  link:../src/dirent/seekdir.c[../src/dirent/seekdir.c] l.2  manpage: link:manpages/gen/directory.3.rst[seekdir] +


telldir::

  _long telldir(DIR *dir)_
 +
  current location of a named directory stream +
 Size: ~32B  link:../src/dirent/telldir.c[../src/dirent/telldir.c] l.2  manpage: link:manpages/gen/directory.3.rst[telldir] +


 errno
-------


errno_str::

  _const char *errno_str(int err)_
 +
  convert errno to str, with 3 chars length +
  ending the string (located on the stack (!)  +
  with two \0\0, when errno<100 +
  Size: ~123B  link:../src/strerror.c[../src/strerror.c] l.32 

perror::

  _void perror(const char *msg)_
 +
  Defines: errno strerror strlen fileno write +
 write error messages to standard error +
 Size: ~329B  link:../src/perror.c[../src/perror.c] l.4  manpage: link:manpages/string/strerror.3.rst[perror] +


strerror::

  _char* strerror( int errnum )_
 +
  link:../src/strerror.c[../src/strerror.c] l.9  manpage: link:manpages/string/string.3.rst[strerror] +


verbose_errstr::

  _const char* verbose_errstr(int num)_
 +
  verbose error (errno) string.  +
  this adds about 3.5kB to the compiled binary(!) +
  link:../include/errstr.h[../include/errstr.h] l.8 

 files
-------


_fopen::

  _FILE *_fopen(int fd, const char* filename, const char* mode, FILE *f)_
 +
  Defines: close open fileno +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~316B  link:../src/fopen.c[../src/fopen.c] l.12 

access::

  _int access( const char *filename, int mode)_
 +
  determine accessibility of a file relative to directory file +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.157  manpage: link:manpages/sys/access.2.rst[access] +


chmod::

  _int chmod( const char *filename, mode_t mode)_
 +
  change mode of a file relative to directory file descriptor +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.184  manpage: link:manpages/sys/chmod.2.rst[chmod] +


chown::

  _int chown( const char *filename, uid_t user, gid_t group)_
 +
  change owner and group of a file relative to directory +
 Size: ~71B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.185  manpage: link:manpages/sys/chown.2.rst[chown] +


close::

  _int close( int fd )_
 +
  close a file descriptor +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.96  manpage: link:manpages/sys/close.2.rst[close] +


closedir::

  _int closedir(DIR *dir)_
 +
  Defines: free +
 close a directory stream +
 Size: ~323B  link:../src/dirent/closedir.c[../src/dirent/closedir.c] l.6  manpage: link:manpages/gen/directory.3.rst[closedir] +


creat::

  _int volatile creat( const char *s, int mode )_
 +
  Defines: open +
 create a new file or rewrite an existing one +
 Size: ~124B  link:../src/open.c[../src/open.c] l.36  manpage: link:manpages/compat-43/creat.2.rst[creat] +


dup::

  _int dup(int fd)_
 +
  duplicate an open file descriptor +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.112  manpage: link:manpages/sys/dup.2.rst[dup] +


dup2::

  _int dup2(int oldfd, int newfd)_
 +
  duplicate a file descriptor +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.113  manpage: link:manpages/sys/dup.2.rst[dup2] +


dup3::

  _int dup3(int oldfd, int newfd, int flags)_
 +
  duplicate a file descriptor +
 Size: ~75B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.114  manpage: link:manpages/gen/dup3.3.rst[dup3] +


fchmod::

  _int fchmod( unsigned int fd, mode_t mode)_
 +
  change mode of a file +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.110  manpage: link:manpages/sys/chmod.2.rst[fchmod] +


fchown::

  _int fchown( unsigned int fd, uid_t user, gid_t group)_
 +
  change owner and group of a file +
 Size: ~75B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.109  manpage: link:manpages/sys/chown.2.rst[fchown] +


fcntl::

  _int fcntl( unsigned int fd, unsigned int cmd, unsigned long arg)_
 +
  file control +
 Size: ~77B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.158  manpage: link:manpages/sys/fcntl.2.rst[fcntl] +


fsync::

  _int fsync(int a1 )_
 +
  synchronize changes to a file +
 Size: ~51B  link:../include/lseek.h[../include/lseek.h] l.22  manpage: link:manpages/sys/fsync.2.rst[fsync] +


ftruncate::

  _int ftruncate(unsigned int a1, unsigned int a2 )_
 +
  truncate a file to a specified length +
 Size: ~63B  link:../include/lseek.h[../include/lseek.h] l.21  manpage: link:manpages/sys/truncate.2.rst[ftruncate] +


link::

  _int link( const char *oldname, const char *newname)_
 +
  link one file to another file relative to two directory +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.118  manpage: link:manpages/sys/link.2.rst[link] +


lseek::

  _int lseek(unsigned int a1, int a2, int a3 )_
 +
  move the read/write file offset +
 Size: ~75B  link:../include/lseek.h[../include/lseek.h] l.19  manpage: link:manpages/sys/lseek.2.rst[lseek] +


open::

  _int volatile open( const char *s, int flags, ... )_
 +
  open file relative to directory file descriptor +
 open or create a file. +
  warning: when using the flag O_CREAT, +
  file permission flags have to be given +
  as third argument. Otherwise file permission +
  flags will be random. (I still do not know, what  +
  the flag showing up as "-T" means..) +
  Size: ~124B  link:../src/open.c[../src/open.c] l.19  manpage: link:manpages/sys/open.2.rst[open] +


readahead::

  _int readahead( int fd,  loff_t offset,  size_t count)_
 +
  initiate file readahead into page cache +
 Size: ~79B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.191 

rename::

  _int rename( const char* oldpath, const char* newpath )_
 +
  rename file relative to directory file descriptor +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.102  manpage: link:manpages/sys/rename.2.rst[rename] +


select::

  _int volatile  select(int fd, volatile fd_set* readfd, volatile fd_set *writefd, volatile fd_set *exceptfd, volatile struct timeval *wait)_
 +
  synchronous I/O multiplexing +
 Size: ~138B  link:../include/select.h[../include/select.h] l.9  manpage: link:manpages/sys/select.2.rst[select] +


sendfile::

  _int sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_
 +
  transfer data between file descriptors +
 Size: ~142B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.161  manpage: link:manpages/sys/sendfile.2.rst[sendfile] +


stat::

  _int stat(const char* filename,struct stat* statbuf)_
 +
  get file status +
 Size: ~49B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.106  manpage: link:manpages/sys/stat.2.rst[stat] +


symlink::

  _int symlink( const char *oldname,  const char *newname)_
 +
  make a symbolic link relative to directory file descriptor +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.119  manpage: link:manpages/sys/symlink.2.rst[symlink] +


umask::

  _int umask( int mask)_
 +
  set and get the file mode creation mask +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.183  manpage: link:manpages/sys/umask.2.rst[umask] +


unlink::

  _int unlink( const char* path)_
 +
  remove a directory entry relative to directory file descriptor +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.103  manpage: link:manpages/sys/unlink.2.rst[unlink] +


 input
-------


fgetc::

  _int fgetc(FILE *F)_
 +
  Defines: read fileno +
 get a byte from a stream +
 Size: ~57B  link:../include/fgetc.h[../include/fgetc.h] l.11  manpage: link:manpages/stdio/getc.3.rst[fgetc] +


fgets::

  _char* fgets(char *buf, int size, FILE* F)_
 +
  Defines: read fileno +
 get a string from a stream +
 link:../src/fgets.c[../src/fgets.c] l.6  manpage: link:manpages/stdio/fgets.3.rst[fgets] +


getc::

  _#define getc(F) fgetc(F)_
 +
  Defines: fileno read +
 get a byte from a stream +
 link:../include/fgetc.h[../include/fgetc.h] l.26  manpage: link:manpages/stdio/getc.3.rst[getc] +


getchar::

  _#define getchar() fgetc(0)_
 +
  Defines: fileno read +
 get a byte from a +
 link:../include/fgetc.h[../include/fgetc.h] l.29  manpage: link:manpages/stdio/getc.3.rst[getchar] +


gets::

  _#define gets(F) fgets(F,0xfffffff,stdin)_
 +
  Defines: fileno read +
 get a string from a +
 link:../src/fgets.c[../src/fgets.c] l.29  manpage: link:manpages/stdio/fgets.3.rst[gets] +


read::

  _int read( int fd, void *buf, int len )_
 +
  read from a file +
 Size: ~62B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.97  manpage: link:manpages/sys/read.2.rst[read] +


ungetc::

  _int ungetc(int c, FILE *F)_
 +
  push byte back into input stream +
 pushes one char back to the stream. +
  Overwrites a previously pushed char +
  (conforming to the posix spec)  +
  Size: ~66B  link:../include/fgetc.h[../include/fgetc.h] l.35  manpage: link:manpages/stdio/ungetc.3.rst[ungetc] +


 ipc
-----


kill::

  _int kill( pid_t pid,  int sig)_
 +
  send a signal to a process or a group of processes +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.125  manpage: link:manpages/sys/kill.2.rst[kill] +


mkfifo::

  _int mkfifo( const char* path, mode_t mode )_
 +
  make a FIFO special file relative to directory file descriptor +
 Size: ~68B  link:../include/mkfifo.h[../include/mkfifo.h] l.4  manpage: link:manpages/sys/mkfifo.2.rst[mkfifo] +


pipe::

  _int pipe( int *filedes)_
 +
  create an interprocess channel +
 Size: ~41B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.182  manpage: link:manpages/sys/pipe.2.rst[pipe] +


raise::

  _int raise(int signr)_
 +
  Defines: getpid +
 send a signal to the executing process +
 Size: ~68B  link:../src/sigaction.c[../src/sigaction.c] l.135  manpage: link:manpages/gen/raise.3.rst[raise] +


rt_sigaction::

  _int rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)_
 +
  examine and change a signal action +
 Size: ~132B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.134 

rt_sigprocmask::

  _int rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)_
 +
  examine and change blocked signals +
 Size: ~132B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.166 

rt_sigreturn::

  _int rt_sigreturn( unsigned long __unused)_
 +
  return from signal handler and cleanup stack frame +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.135 

sigaction::

  _int volatile sigaction(int sig, const struct sigaction *act, struct sigaction *oact)_
 +
  Defines: memcpy +
 examine and change a signal action +
 Size: ~215B  link:../src/sigaction.c[../src/sigaction.c] l.107  manpage: link:manpages/sys/sigaction.2.rst[sigaction] +


sigaddset::

  _int sigaddset(sigset_t *set, int sig)_
 +
  add a signal to a signal set +
 Size: ~85B  link:../src/sigaction.c[../src/sigaction.c] l.34  manpage: link:manpages/gen/sigsetops.3.rst[sigaddset] +


sigdelset::

  _int sigdelset(sigset_t *set, int sig)_
 +
  delete a signal from a signal set +
 Size: ~85B  link:../src/sigaction.c[../src/sigaction.c] l.58  manpage: link:manpages/gen/sigsetops.3.rst[sigdelset] +


sigemptyset::

  _int sigemptyset(sigset_t *set)_
 +
  initialize and empty a signal set +
 Size: ~41B  link:../src/sigaction.c[../src/sigaction.c] l.7  manpage: link:manpages/gen/sigsetops.3.rst[sigemptyset] +


sigfillset::

  _int sigfillset(sigset_t *set)_
 +
  initialize and fill a signal set +
 Size: ~41B  link:../src/sigaction.c[../src/sigaction.c] l.20  manpage: link:manpages/gen/sigsetops.3.rst[sigfillset] +


sigismember::

  _int sigismember(sigset_t *set, int sig)_
 +
  test for a signal in a signal set +
 Size: ~44B  link:../src/sigaction.c[../src/sigaction.c] l.75  manpage: link:manpages/gen/sigsetops.3.rst[sigismember] +


signal::

  _sighandler_t signal(int sig, sighandler_t func )_
 +
  Defines: memcpy write +
 signal management +
 Size: ~337B  link:../src/signal.c[../src/signal.c] l.8  manpage: link:manpages/gen/signal.3.rst[signal] +


sigprocmask::

  _int sigprocmask(int how, const sigset_t *set, sigset_t *oldset)_
 +
  examine and change blocked signals +
 Size: ~130B  link:../src/sigaction.c[../src/sigaction.c] l.52  manpage: link:manpages/sys/sigprocmask.2.rst[sigprocmask] +


wait::

  _pid_t wait(int *wstatus)_
 +
  Defines: wait4 +
 wait for a child process to stop or terminate +
 Size: ~122B  link:../src/wait.c[../src/wait.c] l.8  manpage: link:manpages/sys/wait.2.rst[wait] +


wait4::

  _int wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)_
 +
  wait for process to change state, BSD style +
 Size: ~133B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.156  manpage: link:manpages/sys/wait.2.rst[wait4] +


waitpid::

  _pid_t waitpid(pid_t pid, int *wstatus, int options)_
 +
  Defines: wait4 +
 wait for a child process to stop or terminate +
 Size: ~138B  link:../src/wait.c[../src/wait.c] l.16  manpage: link:manpages/sys/wait.2.rst[waitpid] +


 math
------


abs::

  _int abs(int i)_
 +
  return an integer absolute value +
 link:../include/math.h[../include/math.h] l.25  manpage: link:manpages/stdlib/abs.3.rst[abs] +


div::

  _div_t div(int numerator, int denominator)_
 +
  compute the quotient and remainder of an integer division +
 Size: ~84B  link:../include/math.h[../include/math.h] l.8  manpage: link:manpages/stdlib/div.3.rst[div] +


djb2_hash::

  _unsigned long djb2_hash(const unsigned char *str)_
 +
  hashes, from d.j.Bernstein +
  (http://www.cse.yorku.ca/~oz/hash.html) +
  I've tested djb2_hash, and it gives quite good results. +
  But I'm sure, Bernstein did think and test his algorithm sincerely. +
  When combining djb2_hash and sdbm_hash, the probability of collisions +
  might tend to zero. +
  Me I'm going this way. I guess. I might check djb2_hash for collisions within a space of around 8 digits. +
  Size: ~86B  link:../src/hashes.c[../src/hashes.c] l.10 

labs::

  _long int labs(long int i)_
 +
  return a long integer absolute value +
 Size: ~46B  link:../include/math.h[../include/math.h] l.30  manpage: link:manpages/stdlib/labs.3.rst[labs] +


ldiv::

  _ldiv_t ldiv(long int numerator, long int denominator)_
 +
  compute quotient and remainder of a long division +
 Size: ~82B  link:../include/math.h[../include/math.h] l.16  manpage: link:manpages/stdlib/ldiv.3.rst[ldiv] +


rand::

  _unsigned int rand()_
 +
  Size: ~118B  link:../src/rand.c[../src/rand.c] l.15  manpage: link:manpages/stdlib/rand.3.rst[rand] +


sdbm_hash::

  _unsigned long sdbm_hash(const unsigned char *str)_
 +
  Size: ~80B  link:../src/hashes.c[../src/hashes.c] l.21 

srand::

  _void srand( unsigned int i )_
 +
  pseudo-random number generator +
 Size: ~48B  link:../src/rand.c[../src/rand.c] l.7  manpage: link:manpages/stdlib/rand.3.rst[srand] +


 memory
--------


brk::

  _int brk( const void* addr )_
 +
  change data segment size +
 conformant brk, when mini_errno is defined +
  if no errno is available, +
  returns the negative errno value on error, +
  0 on success +
  Size: ~66B  link:../src/brk.c[../src/brk.c] l.14  manpage: link:manpages/sys/brk.2.rst[brk] +


free::

  _void volatile free(void* p)_
 +
  free allocated memory +
 Size: ~32B  link:../src/malloc.c[../src/malloc.c] l.278  manpage: link:manpages/stdlib/memory.3.rst[free] +


malloc::

  _void* volatile malloc(int size)_
 +
  a memory allocator +
 Size: ~173B  link:../src/malloc.c[../src/malloc.c] l.228  manpage: link:manpages/stdlib/memory.3.rst[malloc] +


memcmp::

  _int memcmp(const void* c1,const void* c2,int len)_
 +
  compare bytes in memory +
 Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.85  manpage: link:manpages/string/memcmp.3.rst[memcmp] +


memcpy::

  _void *memcpy( void *d, const void *s, int n )_
 +
  copy bytes in memory +
 Size: ~84B  link:../src/memcpy.c[../src/memcpy.c] l.6  manpage: link:manpages/string/memcpy.3.rst[memcpy] +


memfd_create::

  _int memfd_create( const char  *uname_ptr,  unsigned int flags)_
 +
  create an anonymous file +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.170 

memfrob::

  _void* memfrob(void* s, unsigned int len)_
 +
  frobnicate (encrypt) a memory area +
 Size: ~78B  link:../src/memfrob.c[../src/memfrob.c] l.3 

memmove::

  _void* memmove(void *dest, const void *src, int n)_
 +
  copy bytes in memory with overlapping areas +
 Size: ~88B  link:../src/memmove.c[../src/memmove.c] l.3  manpage: link:manpages/string/memmove.3.rst[memmove] +


memset::

  _void *memset( void *s, int c, int n)_
 +
  set bytes in memory +
 Size: ~90B  link:../src/memset.c[../src/memset.c] l.3  manpage: link:manpages/string/memset.3.rst[memset] +


mmap::

  _void*  mmap(void* addr,  size_t len,  int prot,  int flags,  int fd,  off_t off)_
 +
  map pages of memory +
 mmap wrapper +
  address length is rounded up to a multiple of pagesize (4096 Bytes here) +
  for the description, please look up the according manpage +
  errno is only set, when mini_errno is defined +
  if not, on error the negative errno value is returned. +
  (e.g. -22 for "invalid argument") +
  Size: ~197B  link:../src/mmap.c[../src/mmap.c] l.8  manpage: link:manpages/sys/mmap.2.rst[mmap] +


mprotect::

  _int mprotect( POINTER *a1, POINTER a2, int a3 )_
 +
  set protection of memory mapping +
 Size: ~146B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.180  manpage: link:manpages/sys/mprotect.2.rst[mprotect] +


mremap::

  _void* volatile  mremap(void* addr, size_t old_len, size_t new_len, int flags, void* new_addr)_
 +
  remap a virtual memory address +
 Size: ~162B  link:../include/mremap.h[../include/mremap.h] l.4 

munmap::

  _int munmap( unsigned long addr,  size_t len)_
 +
  unmap pages of memory +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.195  manpage: link:manpages/sys/munmap.2.rst[munmap] +


realloc::

  _void* realloc(void *p, int size)_
 +
  Defines: malloc free +
 memory reallocator +
 Size: ~636B  link:../src/malloc.c[../src/malloc.c] l.159  manpage: link:manpages/stdlib/memory.3.rst[realloc] +


sbrk::

  _void* sbrk(int incr)_
 +
  change data segment size +
 conformant sbrk, when mini_errno is defined +
  if no errno is available, +
  returns the negative errno value on error, +
  or the new break on success.  +
  Size: ~108B  link:../src/brk.c[../src/brk.c] l.35  manpage: link:manpages/sys/brk.2.rst[sbrk] +


splice::

  _int splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)_
 +
  splice data to/from a pipe +
 Size: ~178B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.175 

sys_brk::

  _long sys_brk(unsigned long addr)_
 +
  the kernel syscall brk. +
  link:../src/brk.c[../src/brk.c] l.3 

 output
--------


_mprints::

  _#define _mprints(...) dprints(STDOUT_FILENO, __VA_ARGS__)_
 +
  Defines: dprints +
 link:../src/prints.c[../src/prints.c] l.69 

dprintf::

  _int dprintf( int fd, const char *fmt, ... )_
 +
  Defines: write +
 print formatted output +
 Size: ~818B  link:../src/sprintf.c[../src/sprintf.c] l.203  manpage: link:manpages/stdio/printf.3.rst[dprintf] +


eprint::

  _#define eprint(str) write(STDERR_FILENO,str,strlen(str))_
 +
  Defines: write strlen +
 write str to stderr. Needs strlen +
  link:../include/prints.h[../include/prints.h] l.35 

eprintfs::

  _#define eprintfs(fmt,...) fprintfs(stderr, fmt, __VA_ARGS__)_
 +
  Defines: fileno strlen write +
 write str to stderr.  +
  only format %s is recognized +
  link:../include/prints.h[../include/prints.h] l.83 

eprintl::

  _#define eprintl() write(STDERR_FILENO,"\n",1)_
 +
  Defines: write +
 write a newline to stderr +
  link:../include/prints.h[../include/prints.h] l.60 

eputs::

  _#define eputs(msg) ( eprint(msg) + eprintl() )_
 +
  Defines: write strlen +
 write msg to stderr, append a newline. Needs strlen. +
  link:../include/prints.h[../include/prints.h] l.70 

ewrites::

  _#define ewrites(str) write(STDERR_FILENO,str,sizeof(str))_
 +
  Defines: write +
 write the constant str to stderr. Computes length with sizeof(str) at compile time. +
  link:../include/prints.h[../include/prints.h] l.45 

fprint::

  _#define fprint(...) fprintf(__VA_ARGS__)_
 +
  Defines: fileno write +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.95 

fprintf::

  _#define fprintf(stream,...)	write(fileno(stream),mlgl->mbuf,sprintf(mlgl->mbuf,__VA_ARGS__))_
 +
  Defines: fileno write +
 link:../src/sprintf.c[../src/sprintf.c] l.245  manpage: link:manpages/stdio/printf.3.rst[fprintf] +


fprintfs::

  _int fprintfs( FILE* F, char *fmt, ...)_
 +
  Defines: fileno strlen write +
 prints formatted to the stream F.only %s is recognized.no mini_buf needed, so using fprintfs instead of fprintf can save some sections / bytes. +
  Size: ~427B  link:../src/fprintfs.c[../src/fprintfs.c] l.10 

fprints::

  _#define fprints(F,str) write(fileno(F),str,strlen(str))_
 +
  Defines: fileno strlen write +
 print the string(s) supplied as arg(s) to stream +
  link:../include/prints.h[../include/prints.h] l.17 

fputc::

  _int volatile fputc(int c, FILE* F)_
 +
  Defines: fileno write +
 put a byte on a stream +
 Size: ~64B  link:../include/fputc.h[../include/fputc.h] l.10  manpage: link:manpages/stdio/putc.3.rst[fputc] +


fwrite::

  _size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *f)_
 +
  Defines: write +
 binary output +
 Size: ~117B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.106  manpage: link:manpages/stdio/fread.3.rst[fwrite] +


fwrites::

  _#define fwrites(fd,str) write(fd,str,sizeof(str))_
 +
  Defines: write +
 write the constant str to fd. Computes length with sizeof(str) at compile time. +
  link:../include/prints.h[../include/prints.h] l.51 

print::

  _#define print(str) write(STDOUT_FILENO,str,strlen(str))_
 +
  Defines: strlen write +
 write str to stdout. Needs strlen +
  link:../include/prints.h[../include/prints.h] l.31 

printf::

  _#define printf(...) fprintf(stdout,__VA_ARGS__)_
 +
  Defines: write fileno +
 print formatted output +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.91  manpage: link:manpages/stdio/printf.3.rst[printf] +


printfs::

  _#define printfs(fmt,...) fprintfs(stdout, fmt, __VA_ARGS__)_
 +
  Defines: write fileno strlen +
 write str to stdout.  +
  only format %s is recognized +
  link:../include/prints.h[../include/prints.h] l.77 

printl::

  _#define printl() write(STDOUT_FILENO,"\n",1)_
 +
  Defines: write +
 write a newline to stdout +
  link:../include/prints.h[../include/prints.h] l.56 

prints::

  _#define prints(...) _mprints(__VA_ARGS__,0)_
 +
  print the string(s) supplied as arg(s) to stdout +
  link:../include/prints.h[../include/prints.h] l.11 

printsl::

  _#define printsl(...) _mprints(__VA_ARGS__,"\n",0)_
 +
  print the string(s) supplied as arg(s) and newline to stdout +
  link:../include/prints.h[../include/prints.h] l.25 

putc::

  _#define putc(c,stream) fputc(c,stream)_
 +
  Defines: fileno write +
 put a byte on a stream +
 link:../include/fputc.h[../include/fputc.h] l.19  manpage: link:manpages/stdio/putc.3.rst[putc] +


putchar::

  _#define putchar(c) fputc(c,stdout)_
 +
  Defines: fileno write +
 put a byte on a stdout stream +
 link:../include/fputc.h[../include/fputc.h] l.16  manpage: link:manpages/stdio/putc.3.rst[putchar] +


puts::

  _#define puts(msg) ( print(msg) + printl() )_
 +
  Defines: write strlen +
 put a string on standard output +
 write msg to stdout, append a newline. Needs strlen. +
  link:../include/prints.h[../include/prints.h] l.66  manpage: link:manpages/stdio/fputs.3.rst[puts] +


snprintf::

  _int snprintf( char *buf, size_t size, const char *fmt, ... )_
 +
  Defines: write +
 print formatted output +
 Size: ~738B  link:../src/sprintf.c[../src/sprintf.c] l.220  manpage: link:manpages/stdio/printf.3.rst[snprintf] +


vfprintf::

  _#define vfprintf(...) fprintf(__VA_ARGS__)_
 +
  Defines: write fileno +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.100  manpage: link:manpages/stdio/printf.3.rst[vfprintf] +


vsnprintf::

  _int vsnprintf(char *buf, size_t size, const char* fmt, va_list args )_
 +
  Defines: write +
 format output of a stdarg argument list +
 the function, translating the fmt of printf. +
  warning - most possibly you'd like to define besides fprintf, or family, +
  mini_itodec (%d conversion)  +
  mini_atoi is needed for grouping numbers +
  Size: ~590B  link:../src/sprintf.c[../src/sprintf.c] l.41  manpage: link:manpages/stdio/printf.3.rst[vsnprintf] +


write::

  _int write(int fd,const void *buf, int len )_
 +
  write on a file +
 Size: ~65B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.98  manpage: link:manpages/sys/write.2.rst[write] +


writes::

  _#define writes(str) write(STDOUT_FILENO,str,sizeof(str))_
 +
  Defines: write +
 write the constant str to stdout. Computes length with sizeof(str) at compile time. +
  link:../include/prints.h[../include/prints.h] l.41 

 process
---------


execv::

  _int execv(const char *pathname, char *const argv[])_
 +
  Defines: execve environ +
 execute a file +
 Size: ~300B  link:../src/execvp.c[../src/execvp.c] l.9  manpage: link:manpages/gen/exec.3.rst[execv] +


execve::

  _int execve( const char *filename,  char* const* argv, char* const* envp)_
 +
  execute program +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.123  manpage: link:manpages/sys/execve.2.rst[execve] +


execveat::

  _int execveat( int dirfd, const char *filename,  char* const* argv, char* const* envp, int flags)_
 +
  execute program relative to a directory file descriptor +
 Size: ~158B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.153 

execvp::

  _int execvp(const char *file, char *const argv[])_
 +
  Defines: access environ execve +
 execute a file +
 Size: ~556B  link:../src/execvp.c[../src/execvp.c] l.58  manpage: link:manpages/gen/exec.3.rst[execvp] +


execvpe::

  _int execvpe(const char *file, char *const argv[], char *const envp[])_
 +
  Defines: execve environ access +
 execute a file +
 When invoked with a filename, starting with "." or "/", +
  interprets this as absolute path. (calls execve with the pathname) +
  Looks for file in the PATH environment, othwerise. +
  Size: ~556B  link:../src/execvp.c[../src/execvp.c] l.18 

fexecve::

  _int fexecve(int fd, char *const argv[], char *const envp[])_
 +
  execute a file +
 Size: ~151B  link:../include/fexecve.h[../include/fexecve.h] l.3  manpage: link:manpages/sys/execve.2.rst[fexecve] +


fexecveat::

  _int fexecveat(int fd, char *const argv[], char *const envp[])_
 +
  Size: ~151B  link:../include/fexecveat.h[../include/fexecveat.h] l.3 

fork::

  _int DEF_syscall(fork,0)_
 +
  create a new process +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.127  manpage: link:manpages/sys/fork.2.rst[fork] +


getenv::

  _char* getenv(const char* name)_
 +
  Defines: environ +
 get value of an environment variable +
 Size: ~106B  link:../src/getenv.c[../src/getenv.c] l.8  manpage: link:manpages/stdlib/getenv.3.rst[getenv] +


getpgrp::

  _int DEF_syscall(getpgrp,0)_
 +
  get the process group ID of the calling process +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.190  manpage: link:manpages/sys/getpgrp.2.rst[getpgrp] +


getpid::

  _int DEF_syscall(getpid,0 )_
 +
  get the process ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.141  manpage: link:manpages/sys/getpid.2.rst[getpid] +


getppid::

  _int DEF_syscall(getppid,0)_
 +
  get the parent process ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.187  manpage: link:manpages/sys/getpid.2.rst[getppid] +


setpgid::

  _int setpgid( pid_t pid, pid_t pgid)_
 +
  set process group ID for job control +
 Size: ~63B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.188  manpage: link:manpages/sys/setpgid.2.rst[setpgid] +


setsid::

  _int DEF_syscall(setsid,0 )_
 +
  create session and set process group ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.142  manpage: link:manpages/sys/setsid.2.rst[setsid] +


system::

  _int system( const char* command )_
 +
  Defines: execve write vfork wait4 environ +
 issue a command +
 Size: ~326B  link:../src/system.c[../src/system.c] l.4  manpage: link:manpages/stdlib/system.3.rst[system] +


vfork::

  _int DEF_syscall(vfork,0)_
 +
  create a child process and block parent +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.128  manpage: link:manpages/sys/vfork.2.rst[vfork] +


 streams
---------


clearerr::

  _void clearerr(FILE *f)_
 +
  clear indicators on a stream +
 Size: ~36B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.198  manpage: link:manpages/stdio/ferror.3.rst[clearerr] +


clearerror::

  _void clearerror(FILE *f)_
 +
  Size: ~36B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.203 

fclose::

  _int  fclose( FILE* f )_
 +
  Defines: close +
 close a stream +
 Size: ~40B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.65  manpage: link:manpages/stdio/fclose.3.rst[fclose] +


fdopen::

  _FILE *fdopen(int fd, const char* mode)_
 +
  Defines: fileno close open +
 associate a stream with a file descriptor +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~323B  link:../src/fopen.c[../src/fopen.c] l.90  manpage: link:manpages/stdio/fopen.3.rst[fdopen] +


feof::

  _int feof(FILE *f)_
 +
  test end-of-file indicator on a stream +
 link:../include/mini_fstream.h[../include/mini_fstream.h] l.184  manpage: link:manpages/stdio/ferror.3.rst[feof] +


ferror::

  _int ferror(FILE *f)_
 +
  test error indicator on a stream +
 Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.191  manpage: link:manpages/stdio/ferror.3.rst[ferror] +


fflush::

  _int  fflush( FILE *F )_
 +
  flush a stream +
 This does nothing, since minilib doesn't provide buffered streams yet.In order to sync data to disc, please use fsync +
  Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.28  manpage: link:manpages/stdio/fflush.3.rst[fflush] +


fgetpos::

  _void fgetpos(FILE *f, long *pos )_
 +
  Defines: lseek +
 get current file position information +
 Size: ~62B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.127  manpage: link:manpages/stdio/fseek.3.rst[fgetpos] +


fileno::

  _int fileno( FILE *f )_
 +
  map a stream pointer to a file descriptor +
 Return the fd nummber of stdin,-out,-err.  +
  Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.56  manpage: link:manpages/stdio/ferror.3.rst[fileno] +


fopen::

  _FILE *fopen(const char* filename, const char* mode)_
 +
  Defines: fileno open close +
 open a stream +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~324B  link:../src/fopen.c[../src/fopen.c] l.80  manpage: link:manpages/stdio/fopen.3.rst[fopen] +


fputs::

  _int volatile fputs(const char *c, FILE *F)_
 +
  Defines: write fileno strlen +
 put a string on a stream +
 Size: ~90B  link:../include/fputs.h[../include/fputs.h] l.20  manpage: link:manpages/stdio/fputs.3.rst[fputs] +


fread::

  _size_t fread(void *ptr, size_t size, size_t nmemb, FILE *f)_
 +
  Defines: read +
 binary input +
 Size: ~110B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.162  manpage: link:manpages/stdio/fread.3.rst[fread] +


freopen::

  _FILE *freopen(const char* filename, const char* mode, FILE *F)_
 +
  Defines: fileno open close +
 open a stream +
 modes implemented: r, r+, w, w+, a, a+ +
  Size: ~320B  link:../src/fopen.c[../src/fopen.c] l.100  manpage: link:manpages/stdio/fopen.3.rst[freopen] +


fseek::

  _int fseek(FILE *f, long offset, int whence )_
 +
  Defines: lseek +
 reposition a file-position indicator in a stream +
 Size: ~80B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.146  manpage: link:manpages/stdio/fseek.3.rst[fseek] +


fsetpos::

  _int fsetpos(FILE *f, int pos )_
 +
  Defines: lseek +
 set current file position +
 Size: ~78B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.133  manpage: link:manpages/stdio/fseek.3.rst[fsetpos] +


ftell::

  _long ftell(FILE *f)_
 +
  Defines: lseek +
 return a file offset in a stream +
 Size: ~53B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.121  manpage: link:manpages/stdio/fseek.3.rst[ftell] +


rewind::

  _void rewind( FILE *f )_
 +
  Defines: lseek +
 reset the file position indicator in a stream +
 Size: ~58B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.156  manpage: link:manpages/stdio/fseek.3.rst[rewind] +


setbuf::

  _void setbuf(FILE *stream, char *buf)_
 +
  assign buffering to a stream +
 dummy function. +
  There is no buffering implemented for the streams yet. +
  Size: ~32B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.211  manpage: link:manpages/stdio/setbuf.3.rst[setbuf] +


setvbuf::

  _int setvbuf(FILE *stream, char *buf, int mode, size_t size)_
 +
  assign buffering to a stream +
 dummy function +
  Size: ~58B  link:../include/mini_fstream.h[../include/mini_fstream.h] l.216  manpage: link:manpages/stdio/setbuf.3.rst[setvbuf] +


 strings
---------


_strcasecmp::

  _int _strcasecmp(const char*c1,const char*c2,int len)_
 +
  Defines: tolower +
 Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.30 

_strcmp::

  _int _strcmp(const char*c1,const char*c2,int len)_
 +
  Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.13 

sprintf::

  _#define sprintf(str,...) snprintf( str, 4096,  __VA_ARGS__)_
 +
  Defines: write +
 print formatted output +
 link:../src/sprintf.c[../src/sprintf.c] l.26  manpage: link:manpages/stdio/printf.3.rst[sprintf] +


strcasecmp::

  _int strcasecmp(const char*c1,const char*c2)_
 +
  link:../src/strcmp.c[../src/strcmp.c] l.49  manpage: link:manpages/string/string.3.rst[strcasecmp] +


strcat::

  _char *strcat(char *dest, const char *src )_
 +
  Defines: strlen +
 concatenate two strings +
 Size: ~126B  link:../src/strcat.c[../src/strcat.c] l.7  manpage: link:manpages/string/string.3.rst[strcat] +


strchr::

  _char *strchr(const char *s, int c)_
 +
  Defines: strchrnul +
 string scanning operation +
 Size: ~104B  link:../src/strchr.c[../src/strchr.c] l.20  manpage: link:manpages/string/string.3.rst[strchr] +


strchrnul::

  _char *strchrnul(const char *s, int c)_
 +
  locate character in string +
 Size: ~87B  link:../src/strchr.c[../src/strchr.c] l.7  manpage: link:manpages/string/strchr.3.rst[strchrnul] +


strcmp::

  _int strcmp(const char*c1,const char*c2)_
 +
  compare two strings +
 Size: ~32B  link:../src/strcmp.c[../src/strcmp.c] l.68  manpage: link:manpages/string/string.3.rst[strcmp] +


strcpy::

  _char *strcpy(char *dest, const char *src)_
 +
  copy a string and return a pointer to the end of the result +
 Size: ~84B  link:../src/memcpy.c[../src/memcpy.c] l.17  manpage: link:manpages/string/string.3.rst[strcpy] +


strdup::

  _char *strdup(const char *source)_
 +
  Defines: strcpy strlen malloc +
 duplicate a specific number of bytes from a string +
 Size: ~258B  link:../src/strdup.c[../src/strdup.c] l.7  manpage: link:manpages/string/strdup.3.rst[strdup] +


strlen::

  _int strlen(const char*str)_
 +
  get length of fixed size string +
 Size: ~32B  link:../src/strlen.c[../src/strlen.c] l.7  manpage: link:manpages/string/strlen.3.rst[strlen] +


strncasecmp::

  _int strncasecmp(const char*c1,const char*c2,int len)_
 +
  case-insensitive string comparisons +
 link:../src/strcmp.c[../src/strcmp.c] l.57  manpage: link:manpages/string/string.3.rst[strncasecmp] +


strncmp::

  _int strncmp(const char*c1,const char*c2,int len)_
 +
  compare part of two strings +
 Size: ~44B  link:../src/strcmp.c[../src/strcmp.c] l.76  manpage: link:manpages/string/string.3.rst[strncmp] +


strncpy::

  _char *strncpy(char *dest, const char *src, int n)_
 +
  Defines: memcpy +
 copy fixed length string, returning a pointer to the array end +
 Size: ~96B  link:../src/memcpy.c[../src/memcpy.c] l.27  manpage: link:manpages/string/string.3.rst[strncpy] +


strrchr::

  _char *strrchr(const char *s, int c)_
 +
  Defines: strchrnul +
 string scanning operation +
 Size: ~122B  link:../src/strchr.c[../src/strchr.c] l.36  manpage: link:manpages/string/string.3.rst[strrchr] +


strstr::

  _char* strstr(const char *big, const char *little)_
 +
  find a substring +
 Size: ~104B  link:../src/strstr.c[../src/strstr.c] l.3  manpage: link:manpages/string/strstr.3.rst[strstr] +


 system
--------


chroot::

  _int chroot( const char *filename)_
 +
  change root directory +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.137  manpage: link:manpages/sys/chroot.2.rst[chroot] +


getgid::

  _int DEF_syscall(getgid,0)_
 +
  get the real group ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.189  manpage: link:manpages/sys/getgid.2.rst[getgid] +


getuid::

  _int DEF_syscall(getuid,0)_
 +
  get a real user ID +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.192  manpage: link:manpages/sys/getuid.2.rst[getuid] +


ioctl::

  _int volatile   ioctl( int fd, unsigned long int request, ... )_
 +
  control a STREAMS device (\fBSTREAMS\fP) +
 Size: ~319B  link:../src/ioctl.c[../src/ioctl.c] l.11  manpage: link:manpages/sys/ioctl.2.rst[ioctl] +


mknod::

  _int mknod( const char *filename,  umode_t mode,  unsigned dev)_
 +
  make directory, special file, or regular file +
 Size: ~73B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.193  manpage: link:manpages/sys/mknod.2.rst[mknod] +


mount::

  _int mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_
 +
  mount filesystem +
 Size: ~151B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.164  manpage: link:manpages/sys/mount.2.rst[mount] +


pivot_root::

  _int pivot_root( const char *new_root,  const char *put_old)_
 +
  change the root mount +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.138 

reboot::

  _int reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_
 +
  reboot or enable/disable Ctrl-Alt-Del +
 Size: ~139B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.162  manpage: link:manpages/sys/reboot.2.rst[reboot] +


setgid::

  _int setgid( gid_t gid)_
 +
  set-group-ID +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.143  manpage: link:manpages/sys/setuid.2.rst[setgid] +


setuid::

  _int setuid( uid_t uid)_
 +
  set user ID +
 Size: ~51B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.144  manpage: link:manpages/sys/setuid.2.rst[setuid] +


sync::

  _int DEF_syscall(sync,0)_
 +
  schedule file system updates +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.120  manpage: link:manpages/sys/sync.2.rst[sync] +


umount2::

  _int umount2( const char *mountpoint, int flags)_
 +
  unmount filesystem +
 Size: ~59B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.160 

uname::

  _int uname(struct old_utsname *name )_
 +
  get the name of the current system +
 Size: ~41B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.148  manpage: link:manpages/gen/uname.3.rst[uname] +


 terminal
----------


grantpt::

  _int grantpt(int fd)_
 +
  grant access to the slave pseudo-terminal device +
 Size: ~44B  link:../src/pty.c[../src/pty.c] l.13  manpage: link:manpages/stdlib/ptsname.3.rst[grantpt] +


isatty::

  _int isatty(int fd)_
 +
  Defines: ioctl +
 test for a terminal device +
 Size: ~325B  link:../src/isatty.c[../src/isatty.c] l.7  manpage: link:manpages/gen/ttyname.3.rst[isatty] +


nanosleep::

  _int nanosleep( struct timespec *rqtp, struct timespec *rmtp)_
 +
  high resolution sleep +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.131  manpage: link:manpages/sys/nanosleep.2.rst[nanosleep] +


posix_openpt::

  _int posix_openpt(int flags)_
 +
  Defines: open +
 open a pseudo-terminal device +
 Size: ~140B  link:../src/pty.c[../src/pty.c] l.8  manpage: link:manpages/sys/posix_openpt.2.rst[posix_openpt] +


ptsname::

  _char *ptsname(int fd)_
 +
  Defines: open uitodec write ioctl +
 get name of the slave pseudo-terminal device +
 Size: ~1767B  link:../src/pty.c[../src/pty.c] l.40  manpage: link:manpages/stdlib/ptsname.3.rst[ptsname] +


ptsname_r::

  _int ptsname_r(int fd, char *buf, size_t len)_
 +
  Defines: ioctl write open uitodec +
 get the name of the slave pseudoterminal +
 Size: ~1748B  link:../src/pty.c[../src/pty.c] l.27 

tcgetattr::

  _int  tcgetattr(int fd, struct termios *io)_
 +
  Defines: ioctl +
 get the parameters associated with the terminal +
 Size: ~300B  link:../include/tcgetattr.h[../include/tcgetattr.h] l.21  manpage: link:manpages/gen/tcsetattr.3.rst[tcgetattr] +


tcsetattr::

  _int  tcsetattr(int fd, int opt, const struct termios *io)_
 +
  Defines: ioctl +
 set the parameters associated with the terminal +
 Size: ~316B  link:../include/tcsetattr.h[../include/tcsetattr.h] l.20  manpage: link:manpages/gen/tcsetattr.3.rst[tcsetattr] +


unlockpt::

  _int unlockpt(int fd)_
 +
  Defines: ioctl +
 unlock a pseudo-terminal master/slave pair +
 Size: ~325B  link:../src/pty.c[../src/pty.c] l.20  manpage: link:manpages/stdlib/ptsname.3.rst[unlockpt] +


vhangup::

  _int DEF_syscall(vhangup,0 )_
 +
  virtually hangup the current terminal +
 link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.146 

 time
------


getitimer::

  _int getitimer( int which,  struct itimerval *value)_
 +
  get and set value of interval timer +
 Size: ~53B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.198  manpage: link:manpages/sys/getitimer.2.rst[getitimer] +


gettimeofday::

  _int gettimeofday( struct timeval *a1, struct timezone *a2)_
 +
  get the date and time +
 Size: ~47B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.132  manpage: link:manpages/sys/gettimeofday.2.rst[gettimeofday] +


setitimer::

  _int setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_
 +
  set the value of an interval timer +
 Size: ~56B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.197  manpage: link:manpages/sys/getitimer.2.rst[setitimer] +


sleep::

  _unsigned int volatile sleep(unsigned int seconds)_
 +
  suspend execution for an interval of time +
 nonconformant sleep +
  TODO: ignore blocked signals, sigchld +
  Size: ~123B  link:../src/sleep.c[../src/sleep.c] l.10  manpage: link:manpages/gen/sleep.3.rst[sleep] +


time::

  _int time(unsigned int *a1 )_
 +
  get time +
 Size: ~41B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.203  manpage: link:manpages/gen/time.3.rst[time] +


usleep::

  _unsigned int volatile usleep(unsigned int useconds)_
 +
  suspend execution for microsecond intervals +
 nonconformant usleep.  +
  Sleep useconds. +
  I just hope, noone relies on an exact sleep time. +
  which isn't possible without a real time os, anyways. +
  When for whatever reason you'd need nanoseconds exact times, +
  best shot might be a spinloop, and looking for cpu ticks. +
  +
  TODO: ignore blocked signals, sigchld +
  Size: ~147B  link:../src/sleep.c[../src/sleep.c] l.31  manpage: link:manpages/gen/usleep.3.rst[usleep] +


utime::

  _int utime( const char *filename, struct utimbuf *times)_
 +
  set file access and modification times +
 Size: ~49B  link:../include/syscall_stubs.h[../include/syscall_stubs.h] l.186  manpage: link:manpages/gen/utime.3.rst[utime] +


 u
---


def::

  _#define SETOPT_short( opts, option ) (_
 +
  Set a option flag(s) (bit(s))  manually. +
 		param options: e.g. just a, or ( a+h+l) to check for several flags at once +
  link:../macros/getoptm.h[../macros/getoptm.h] l.52 

ksys__sysctl::

  _ksys__sysctl( struct __sysctl_args *args)_
 +
  read/write system parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.315 

ksys_accept::

  _ksys_accept( int fd,  struct sockaddr *upeersockaddr,  int *upeeraddrlen)_
 +
  accept a new connection on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.91 

ksys_accept4::

  _ksys_accept4( int fd,  struct sockaddr *upeer_sockaddr,  int *upeer_addrlen,  int flags)_
 +
  accept a connection on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.551 

ksys_access::

  _ksys_access( const char *filename,  int mode)_
 +
  determine accessibility of a file relative to directory file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.47 

ksys_acct::

  _ksys_acct( const char *name)_
 +
  switch process accounting on or off +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.329 

ksys_add_key::

  _ksys_add_key( const char *_type,  const char *_description,  const void *_payload,  size_t plen)_
 +
  add a key to the kernel's key management facility +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.471 

ksys_adjtimex::

  _ksys_adjtimex( struct timex *txc_p)_
 +
  tune kernel clock +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.321 

ksys_alarm::

  _ksys_alarm( unsigned int seconds)_
 +
  schedule an alarm signal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.79 

ksys_arch_prctl::

  _ksys_arch_prctl( struct task_struct *task,  int code,  unsigned long *addr)_
 +
  set architecture-specific thread state +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.319 

ksys_bind::

  _ksys_bind( int fd,  struct sockaddr *umyaddr,  int addrlen)_
 +
  bind a name to a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.103 

ksys_brk::

  _ksys_brk( unsigned long brk)_
 +
  change data segment size +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.29 

ksys_capget::

  _ksys_capget( cap_user_header_t header,  cap_user_data_t dataptr)_
 +
  set/get capabilities of thread(s) +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.255 

ksys_capset::

  _ksys_capset( cap_user_header_t header,  const cap_user_data_t data)_
 +
  set/get capabilities of thread(s) +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.257 

ksys_chdir::

  _ksys_chdir( const char *filename)_
 +
  change working directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.165 

ksys_chmod::

  _ksys_chmod( const char *filename,  mode_t mode)_
 +
  change mode of a file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.185 

ksys_chown::

  _ksys_chown( const char *filename,  uid_t user,  gid_t group)_
 +
  change owner and group of a file relative to directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.189 

ksys_chroot::

  _ksys_chroot( const char *filename)_
 +
  change root directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.325 

ksys_clock_adjtime::

  _ksys_clock_adjtime( clockid_t which_clock,  struct timex *tx)_
 +
  link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.585 

ksys_clock_getres::

  _ksys_clock_getres( const clockid_t which_clock,  struct timespec *tp)_
 +
  link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.435 

ksys_clock_gettime::

  _ksys_clock_gettime( const clockid_t which_clock,  struct timespec *tp)_
 +
  clock and time functions +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.433 

ksys_clock_nanosleep::

  _ksys_clock_nanosleep( const clockid_t which_clock,  int flags,  const struct timespec *rqtp,  struct timespec *rmtp)_
 +
  high resolution sleep with specifiable clock +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.437 

ksys_clock_settime::

  _ksys_clock_settime( const clockid_t which_clock,  const struct timespec *tp)_
 +
  clock and timer functions +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.431 

ksys_clone::

  _ksys_clone( unsigned long clone_flags,  unsigned long newsp,  void *parent_tid,  void *child_tid)_
 +
  create a child process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.117 

ksys_close::

  _ksys_close( unsigned int fd)_
 +
  close a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.11 

ksys_connect::

  _ksys_connect( int fd,  struct sockaddr *uservaddr,  int addrlen)_
 +
  connect a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.89 

ksys_creat::

  _ksys_creat( const char *pathname,  int mode)_
 +
  create a new file or rewrite an existing one +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.175 

ksys_delete_module::

  _ksys_delete_module( const char *name_user,  unsigned int flags)_
 +
  unload a kernel module +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.353 

ksys_dup::

  _ksys_dup( unsigned int fildes)_
 +
  duplicate an open file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.69 

ksys_dup2::

  _ksys_dup2( unsigned int oldfd,  unsigned int newfd)_
 +
  duplicate a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.71 

ksys_dup3::

  _ksys_dup3( unsigned int oldfd,  unsigned int newfd,  int flags)_
 +
  duplicate a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.559 

ksys_epoll_create::

  _ksys_epoll_create( int size)_
 +
  open an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.407 

ksys_epoll_create1::

  _ksys_epoll_create1( int flags)_
 +
  open an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.557 

ksys_epoll_ctl::

  _ksys_epoll_ctl( int epfd,  int op,  int fd,  struct epoll_event *event)_
 +
  control interface for an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.443 

ksys_epoll_pwait::

  _ksys_epoll_pwait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout,  const sigset_t *sigmask,  size_t sigsetsize)_
 +
  wait for an I/O event on an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.537 

ksys_epoll_wait::

  _ksys_epoll_wait( int epfd,  struct epoll_event *events,  int maxevents,  int timeout)_
 +
  wait for an I/O event on an epoll file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.441 

ksys_eventfd::

  _ksys_eventfd( unsigned int count)_
 +
  create a file descriptor for event notification +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.543 

ksys_eventfd2::

  _ksys_eventfd2( unsigned int count,  int flags)_
 +
  create a file descriptor for event notification +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.555 

ksys_execve::

  _ksys_execve( const char *filename,  const char *const argv[],  const char *const envp[])_
 +
  execute program +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.123 

ksys_exit::

  _ksys_exit( int error_code)_
 +
  terminate a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.125  manpage: link:manpages/sys/_exit.2.rst[_exit] +


ksys_exit_group::

  _ksys_exit_group( int error_code)_
 +
  exit all threads in a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.439 

ksys_faccessat::

  _ksys_faccessat( int dfd,  const char *filename,  int mode)_
 +
  determine accessibility of a file relative to directory file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.513 

ksys_fadvise64::

  _ksys_fadvise64( int fd,  loff_t offset,  size_t len,  int advice)_
 +
  predeclare an access pattern for file data +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.419 

ksys_fallocate::

  _ksys_fallocate( long fd,  long mode,  loff_t offset,  loff_t len)_
 +
  manipulate file space +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.545 

ksys_fanotify_init::

  _ksys_fanotify_init( unsigned int flags,  unsigned int event_f_flags)_
 +
  create and initialize fanotify group +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.575 

ksys_fanotify_mark::

  _ksys_fanotify_mark( long fanotify_fd,  long flags,  __u64 mask,  long dfd, long pathname)_
 +
  add, remove, or modify an fanotify mark on a filesystem +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.577 

ksys_fchdir::

  _ksys_fchdir( unsigned int fd)_
 +
  change working directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.167 

ksys_fchmod::

  _ksys_fchmod( unsigned int fd,  mode_t mode)_
 +
  change mode of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.187 

ksys_fchmodat::

  _ksys_fchmodat( int dfd,  const char *filename,  mode_t mode)_
 +
  change mode of a file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.511 

ksys_fchown::

  _ksys_fchown( unsigned int fd,  uid_t user,  gid_t group)_
 +
  change owner and group of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.191 

ksys_fchownat::

  _ksys_fchownat( int dfd,  const char *filename,  uid_t user,  gid_t group,  int flag)_
 +
  change owner and group of a file relative to directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.495 

ksys_fcntl::

  _ksys_fcntl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_
 +
  file control +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.149 

ksys_fdatasync::

  _ksys_fdatasync( unsigned int fd)_
 +
  synchronize the data of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.155 

ksys_fgetxattr::

  _ksys_fgetxattr( int fd,  const char *name,  void *value,  size_t size)_
 +
  retrieve an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.371 

ksys_finit_module::

  _ksys_finit_module( int fd,  const char  *uargs,  int flags)_
 +
  load a kernel module +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.601 

ksys_flistxattr::

  _ksys_flistxattr( int fd,  char *list,  size_t size)_
 +
  list extended attribute names +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.377 

ksys_flock::

  _ksys_flock( unsigned int fd,  unsigned int cmd)_
 +
  apply or remove an advisory lock on an open file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.151 

ksys_fork::

  _ksysSYSDEF_syscall(_fork,0)_
 +
  create a new process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.119 

ksys_fremovexattr::

  _ksys_fremovexattr( int fd,  const char *name)_
 +
  remove an extended attribute +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.383 

ksys_fsetxattr::

  _ksys_fsetxattr( int fd,  const char *name,  const void *value,  size_t size, int flags)_
 +
  set an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.365 

ksys_fstat::

  _ksys_fstat( unsigned int fd,  struct stat *statbuf)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.15 

ksys_fstatfs::

  _ksys_fstatfs( unsigned int fd,  struct statfs *buf)_
 +
  get filesystem statistics +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.279 

ksys_fsync::

  _ksys_fsync( unsigned int fd)_
 +
  synchronize changes to a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.153 

ksys_ftruncate::

  _ksys_ftruncate( unsigned int fd,  unsigned long length)_
 +
  truncate a file to a specified length +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.159 

ksys_futex::

  _ksys_futex( u32 *uaddr,  int op,  u32 val,  struct timespec *utime,  u32 *uaddr2,  u32 val3)_
 +
  fast user-space locking +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.389 

ksys_futimesat::

  _ksys_futimesat( int dfd,  const char *filename,  struct timeval *utimes)_
 +
  change timestamps of a file relative to a directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.497 

ksys_get_mempolicy::

  _ksys_get_mempolicy( int *policy,  unsigned long *nmask,  unsigned long maxnode,  unsigned long addr,  unsigned long flags)_
 +
  retrieve NUMA memory policy for a thread +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.453 

ksys_get_robust_list::

  _ksys_get_robust_list( int pid,  struct robust_list_head **head_ptr,  size_t *len_ptr)_
 +
  get/set list of robust futexes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.523 

ksys_getcpu::

  _ksys_getcpu( unsigned *cpup,  unsigned *nodep,  struct getcpu_cache *unused)_
 +
  determine CPU and NUMA node on which the calling thread is running +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.593 

ksys_getcwd::

  _ksys_getcwd( char *buf,  unsigned long size)_
 +
  get the pathname of the current working directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.163 

ksys_getdents::

  _ksys_getdents( unsigned int fd,  struct linux_dirent *dirent,  unsigned int count)_
 +
  get directory entries +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.161 

ksys_getdents64::

  _ksys_getdents64( unsigned int fd,  struct linux_dirent64 *dirent,  unsigned int count)_
 +
  get directory entries +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.411 

ksys_getegid::

  _ksysSYSDEF_syscall(_getegid,0)_
 +
  get the effective group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.221 

ksys_geteuid::

  _ksysSYSDEF_syscall(_geteuid,0)_
 +
  get the effective user ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.219 

ksys_getgid::

  _ksysSYSDEF_syscall(_getgid,0)_
 +
  get the real group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.213 

ksys_getgroups::

  _ksys_getgroups( int gidsetsize,  gid_t *grouplist)_
 +
  get supplementary group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.235 

ksys_getitimer::

  _ksys_getitimer( int which,  struct itimerval *value)_
 +
  get and set value of interval timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.77 

ksys_getpeername::

  _ksys_getpeername( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_
 +
  get the name of the peer socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.109 

ksys_getpgid::

  _ksys_getpgid( pid_t pid)_
 +
  get the process group ID for a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.247 

ksys_getpgrp::

  _ksysSYSDEF_syscall(_getpgrp,0)_
 +
  get the process group ID of the calling process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.227 

ksys_getpid::

  _ksysSYSDEF_syscall(_getpid,0)_
 +
  get the process ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.83 

ksys_getppid::

  _ksysSYSDEF_syscall(_getppid,0)_
 +
  get the parent process ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.225 

ksys_getpriority::

  _ksys_getpriority( int which,  int who)_
 +
  get and set the nice value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.283 

ksys_getrandom::

  _ksys_getrandom( char  *buf,  size_t count,  unsigned int flags)_
 +
  obtain a series of random bytes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.611 

ksys_getresgid::

  _ksys_getresgid( gid_t *rgid,  gid_t *egid,  gid_t *sgid)_
 +
  get real, effective and saved user/group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.245 

ksys_getresuid::

  _ksys_getresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_
 +
  get real, effective and saved user/group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.241 

ksys_getrlimit::

  _ksys_getrlimit( unsigned int resource,  struct rlimit *rlim)_
 +
  control maximum resource consumption +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.199 

ksys_getrusage::

  _ksys_getrusage( int who,  struct rusage *ru)_
 +
  get information about resource utilization +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.201 

ksys_getsid::

  _ksys_getsid( pid_t pid)_
 +
  get the process group ID of a session leader +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.253 

ksys_getsockname::

  _ksys_getsockname( int fd,  struct sockaddr *usockaddr,  int *usockaddr_len)_
 +
  get the socket name +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.107 

ksys_getsockopt::

  _ksys_getsockopt( int fd,  int level,  int optname,  char *optval,  int *optlen)_
 +
  get the socket options +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.115 

ksys_gettid::

  _ksysSYSDEF_syscall(_gettid,0)_
 +
  get thread identification +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.357 

ksys_gettimeofday::

  _ksys_gettimeofday( struct timeval *tv,  struct timezone *tz)_
 +
  get the date and time +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.197 

ksys_getuid::

  _ksysSYSDEF_syscall(_getuid,0)_
 +
  get a real user ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.209 

ksys_getxattr::

  _ksys_getxattr( const char *pathname,  const char *name,  void *value,  size_t size)_
 +
  retrieve an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.367 

ksys_init_module::

  _ksys_init_module( void *umod,  unsigned long len,  const char *uargs)_
 +
  load a kernel module +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.351 

ksys_inotify_add_watch::

  _ksys_inotify_add_watch( int fd,  const char *pathname,  u32 mask)_
 +
  add a watch to an initialized inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.483 

ksys_inotify_init::

  _ksysSYSDEF_syscall(_inotify_init,0)_
 +
  initialize an inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.481 

ksys_inotify_init1::

  _ksys_inotify_init1( int flags)_
 +
  initialize an inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.563 

ksys_inotify_rm_watch::

  _ksys_inotify_rm_watch( int fd,  __s32 wd)_
 +
  remove an existing watch from an inotify instance +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.485 

ksys_io_cancel::

  _ksys_io_cancel( aio_context_t ctx_id,  struct iocb *iocb,  struct io_event *result)_
 +
  cancel an outstanding asynchronous I/O operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.403 

ksys_io_destroy::

  _ksys_io_destroy( aio_context_t ctx)_
 +
  destroy an asynchronous I/O context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.397 

ksys_io_getevents::

  _ksys_io_getevents( aio_context_t ctx_id,  long min_nr,  long nr,  struct io_event *events)_
 +
  read asynchronous I/O events from the completion queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.399 

ksys_io_setup::

  _ksys_io_setup( unsigned nr_events,  aio_context_t *ctxp)_
 +
  create an asynchronous I/O context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.395 

ksys_io_submit::

  _ksys_io_submit( aio_context_t ctx_id,  long nr,  struct iocb **iocbpp)_
 +
  submit asynchronous I/O blocks for processing +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.401 

ksys_ioctl::

  _ksys_ioctl( unsigned int fd,  unsigned int cmd,  unsigned long arg)_
 +
  control a STREAMS device (\fBSTREAMS\fP) +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.37 

ksys_ioperm::

  _ksys_ioperm( unsigned long from,  unsigned long num,  int turn_on)_
 +
  set port input/output permissions +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.349 

ksys_iopl::

  _ksys_iopl( unsigned int level,  struct pt_regs *regs)_
 +
  change I/O privilege level +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.347 

ksys_ioprio_get::

  _ksys_ioprio_get( int which,  int who)_
 +
  get/set I/O scheduling class and priority +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.479 

ksys_ioprio_set::

  _ksys_ioprio_set( int which,  int who,  int ioprio)_
 +
  get/set I/O scheduling class and priority +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.477 

ksys_kcmp::

  _ksys_kcmp( pid_t pid1,  pid_t pid2,  int type,  unsigned long idx1,  unsigned long idx2)_
 +
  compare two processes to determine if they share a kernel resource +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.599 

ksys_kexec_file_load::

  _ksys_kexec_file_load( int kernel_fd,  int initrd_fd,  unsigned long cmdline_len,  const char  *cmdline_ptr,  unsigned long flags)_
 +
  load a new kernel for later execution +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.615 

ksys_kexec_load::

  _ksys_kexec_load( unsigned long entry,  unsigned long nr_segments,  struct kexec_segment *segments,  unsigned long flags)_
 +
  load a new kernel for later execution +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.467 

ksys_keyctl::

  _ksys_keyctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_
 +
  key management function wrappers +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.475 

ksys_kill::

  _ksys_kill( pid_t pid,  int sig)_
 +
  send a signal to a process or a group of processes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.129 

ksys_lchown::

  _ksys_lchown( const char *filename,  uid_t user,  gid_t group)_
 +
  change the owner and group of a symbolic link +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.193 

ksys_lgetxattr::

  _ksys_lgetxattr( const char *pathname,  const char *name,  void *value,  size_t size)_
 +
  retrieve an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.369 

ksys_link::

  _ksys_link( const char *oldname,  const char *newname)_
 +
  link one file to another file relative to two directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.177 

ksys_linkat::

  _ksys_linkat( int oldfd,  const char *oldname,  int newfd,  const char *newname,  int flags)_
 +
  make a new name for a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.505 

ksys_listen::

  _ksys_listen( int fd,  int backlog)_
 +
  listen for socket connections and limit the queue of incoming +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.105 

ksys_listxattr::

  _ksys_listxattr( const char *pathname,  char *list,  size_t size)_
 +
  list extended attribute names +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.373 

ksys_llistxattr::

  _ksys_llistxattr( const char *pathname,  char *list,  size_t size)_
 +
  list extended attribute names +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.375 

ksys_lookup_dcookie::

  _ksys_lookup_dcookie( u64 cookie64,  long buf,  long len)_
 +
  return a directory entry's path +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.405 

ksys_lremovexattr::

  _ksys_lremovexattr( const char *pathname,  const char *name)_
 +
  remove an extended attribute +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.381 

ksys_lseek::

  _ksys_lseek( unsigned int fd,  off_t offset,  unsigned int origin)_
 +
  move the read/write file offset +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.21 

ksys_lsetxattr::

  _ksys_lsetxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_
 +
  set an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.363 

ksys_lstat::

  _ksys_lstat( const char *filename,  struct stat *statbuf)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.17 

ksys_madvise::

  _ksys_madvise( unsigned long start,  size_t len_in,  int behavior)_
 +
  give advice about use of memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.61 

ksys_mbind::

  _ksys_mbind( unsigned long start,  unsigned long len,  unsigned long mode,  unsigned long *nmask,  unsigned long maxnode,  unsigned flags)_
 +
  set memory policy for a memory range +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.449 

ksys_memfd_create::

  _ksys_memfd_create( const char  *uname_ptr,  unsigned int flags)_
 +
  create an anonymous file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.613 

ksys_migrate_pages::

  _ksys_migrate_pages( pid_t pid,  unsigned long maxnode,  const unsigned long *old_nodes,  const unsigned long *new_nodes)_
 +
  move all pages in a process to another set of nodes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.487 

ksys_mincore::

  _ksys_mincore( unsigned long start,  size_t len,  unsigned char *vec)_
 +
  determine whether pages are resident in memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.59 

ksys_mkdir::

  _ksys_mkdir( const char *pathname,  int mode)_
 +
  make a directory relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.171 

ksys_mkdirat::

  _ksys_mkdirat( int dfd,  const char *pathname,  int mode)_
 +
  create a directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.491 

ksys_mknod::

  _ksys_mknod( const char *filename,  umode_t mode,  unsigned dev)_
 +
  make directory, special file, or regular file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.271 

ksys_mknodat::

  _ksys_mknodat( int dfd,  const char *filename,  int mode,  unsigned dev)_
 +
  create a special or ordinary file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.493 

ksys_mlock::

  _ksys_mlock( unsigned long start,  size_t len)_
 +
  lock or unlock a range of process address space +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.301 

ksys_mlockall::

  _ksys_mlockall( int flags)_
 +
  lock/unlock the address space of a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.305 

ksys_mmap::

  _ksys_mmap( unsigned long addr,  unsigned long len,  unsigned long prot,  unsigned long flags,  unsigned long fd,  unsigned long off)_
 +
  map pages of memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.23 

ksys_modify_ldt::

  _ksys_modify_ldt( int func,  void *ptr,  unsigned long bytecount)_
 +
  get or set a per-process LDT entry +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.311 

ksys_mount::

  _ksys_mount( char *dev_name,  char *dir_name,  char *type,  unsigned long flags,  void *data)_
 +
  mount filesystem +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.333 

ksys_move_pages::

  _ksys_move_pages( pid_t pid,  unsigned long nr_pages,  const void *pages[], const int *nodes,  int *status,  int flags)_
 +
  move individual pages of a process to another node +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.533 

ksys_mprotect::

  _ksys_mprotect( unsigned long start,  size_t len,  unsigned long prot)_
 +
  set protection of memory mapping +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.25 

ksys_mq_getsetattr::

  _ksys_mq_getsetattr( mqd_t mqdes,  const struct mq_attr *u_mqstat,  struct mq_attr *u_omqstat)_
 +
  get/set message queue attributes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.465 

ksys_mq_notify::

  _ksys_mq_notify( mqd_t mqdes,  const struct sigevent *u_notification)_
 +
  notify process that a message is available +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.463 

ksys_mq_open::

  _ksys_mq_open( const char *u_name,  int oflag,  mode_t mode,  struct mq_attr *u_attr)_
 +
  open a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.455 

ksys_mq_timedreceive::

  _ksys_mq_timedreceive( mqd_t mqdes,  char *u_msg_ptr,  size_t msg_len,  unsigned int *u_msg_prio,  const struct timespec *u_abs_timeout)_
 +
  receive a message from a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.461 

ksys_mq_timedsend::

  _ksys_mq_timedsend( mqd_t mqdes,  const char *u_msg_ptr,  size_t msg_len,  unsigned int msg_prio,  const struct timespec *u_abs_timeout)_
 +
  send a message to a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.459 

ksys_mq_unlink::

  _ksys_mq_unlink( const char *u_name)_
 +
  remove a message queue +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.457 

ksys_mremap::

  _ksys_mremap( unsigned long addr,  unsigned long old_len,  unsigned long new_len,  unsigned long flags,  unsigned long new_addr)_
 +
  remap a virtual memory address +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.55 

ksys_msgctl::

  _ksys_msgctl( int msqid,  int cmd,  struct msqid_ds *buf)_
 +
  XSI message control operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.147 

ksys_msgget::

  _ksys_msgget( key_t key,  int msgflg)_
 +
  get the XSI message queue identifier +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.141 

ksys_msgrcv::

  _ksys_msgrcv( int msqid,  struct msgbuf *msgp,  size_t msgsz,  long msgtyp,  int msgflg)_
 +
  XSI message receive operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.145 

ksys_msgsnd::

  _ksys_msgsnd( int msqid,  struct msgbuf *msgp,  size_t msgsz,  int msgflg)_
 +
  XSI message send operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.143 

ksys_msync::

  _ksys_msync( unsigned long start,  size_t len,  int flags)_
 +
  synchronize memory with physical storage +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.57 

ksys_munlock::

  _ksys_munlock( unsigned long start,  size_t len)_
 +
  unlock a range of process address space +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.303 

ksys_munlockall::

  _ksysSYSDEF_syscall(_munlockall,0)_
 +
  unlock the address space of a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.307 

ksys_munmap::

  _ksys_munmap( unsigned long addr,  size_t len)_
 +
  unmap pages of memory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.27 

ksys_name_to_handle_at::

  _ksys_name_to_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flag)_
 +
  obtain handle +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.581 

ksys_nanosleep::

  _ksys_nanosleep( struct timespec *rqtp,  struct timespec *rmtp)_
 +
  high resolution sleep +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.75 

ksys_newfstatat::

  _ksys_newfstatat( int dfd,  const char *filename,  struct stat *statbuf,  int flag)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.499 

ksys_open::

  _ksys_open( const char *filename,  int flags,  int mode)_
 +
  open file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.9 

ksys_open_by_handle_at::

  _ksys_open_by_handle_at( int dfd,  const char *name,  struct file_handle *handle,  int *mnt_id,  int flags)_
 +
  obtain handle +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.583 

ksys_openat::

  _ksys_openat( int dfd,  const char *filename,  int flags,  int mode)_
 +
  open file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.489 

ksys_pause::

  _ksysSYSDEF_syscall(_pause,0)_
 +
  suspend the thread until a signal is received +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.73 

ksys_perf_event_open::

  _ksys_perf_event_open( struct perf_event_attr *attr_uptr,  pid_t pid,  int cpu,  int group_fd,  unsigned long flags)_
 +
  set up performance monitoring +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.571 

ksys_personality::

  _ksys_personality( unsigned int personality)_
 +
  set the process execution domain +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.273 

ksys_pipe::

  _ksys_pipe( int *filedes)_
 +
  create an interprocess channel +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.49 

ksys_pipe2::

  _ksys_pipe2( int *filedes,  int flags)_
 +
  create pipe +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.561 

ksys_pivot_root::

  _ksys_pivot_root( const char *new_root,  const char *put_old)_
 +
  change the root mount +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.313 

ksys_poll::

  _ksys_poll( struct poll_fd *ufds,  unsigned int nfds,  long timeout_msecs)_
 +
  input/output multiplexing +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.19 

ksys_ppoll::

  _ksys_ppoll( struct pollfd *ufds,  unsigned int nfds,  struct timespec *tsp,  const sigset_t *sigmask,  size_t sigsetsize)_
 +
  wait for some event on a file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.517 

ksys_prctl::

  _ksys_prctl( int option,  unsigned long arg2,  unsigned long arg3,  unsigned long arg4,  unsigned long arg5)_
 +
  operations on a process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.317 

ksys_pread64::

  _ksys_pread64( unsigned long fd,  char *buf,  size_t count,  loff_t pos)_
 +
  read from or write to a file descriptor at a given offset +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.39 

ksys_preadv::

  _ksys_preadv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_
 +
  read or write data into multiple buffers +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.565 

ksys_prlimit64::

  _ksys_prlimit64( pid_t pid,  unsigned int resource,  const struct rlimit64 *new_rlim,  struct rlimit64 *old_rlim)_
 +
  get/set resource limits +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.579 

ksys_process_vm_readv::

  _ksys_process_vm_readv( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovec *rvec,  unsigned long riovcnt,  unsigned long flags)_
 +
  transfer data between process address spaces +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.595 

ksys_process_vm_writev::

  _ksys_process_vm_writev( pid_t pid,  const struct iovec *lvec,  unsigned long liovcnt,  const struct iovcc *rvec,  unsigned long riovcnt,  unsigned long flags)_
 +
  transfer data between process address spaces +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.597 

ksys_pselect6::

  _ksys_pselect6( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timespec *tsp,  void *sig)_
 +
  select, pselect, FD_CLR, FD_ISSET, FD_SET, FD_ZERO \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.515 

ksys_ptrace::

  _ksys_ptrace( long request,  long pid,  unsigned long addr,  unsigned long data)_
 +
  process trace +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.207 

ksys_pwrite64::

  _ksys_pwrite64( unsigned int fd,  const char *buf,  size_t count,  loff_t pos)_
 +
  read from or write to a file descriptor at a given offset +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.41 

ksys_pwritev::

  _ksys_pwritev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen,  unsigned long pos_l,  unsigned long pos_h)_
 +
  read or write data into multiple buffers +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.567 

ksys_quotactl::

  _ksys_quotactl( unsigned int cmd,  const char *special,  qid_t id,  void *addr)_
 +
  manipulate disk quotas +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.355 

ksys_read::

  _ksys_read( unsigned int fd,  char *buf,  size_t count)_
 +
  read from a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.5 

ksys_readahead::

  _ksys_readahead( int fd,  loff_t offset,  size_t count)_
 +
  initiate file readahead into page cache +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.359 

ksys_readlink::

  _ksys_readlink( const char *path,  char *buf,  int bufsiz)_
 +
  read the contents of a symbolic link +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.183 

ksys_readlinkat::

  _ksys_readlinkat( int dfd,  const char *pathname,  char *buf,  int bufsiz)_
 +
  read value of a symbolic link +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.509 

ksys_readv::

  _ksys_readv( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_
 +
  read a vector +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.43 

ksys_reboot::

  _ksys_reboot( int magic1,  int magic2,  unsigned int cmd,  void *arg)_
 +
  reboot or enable/disable Ctrl-Alt-Del +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.341 

ksys_recvfrom::

  _ksys_recvfrom( int fd,  void *ubuf,  size_t size,  unsigned flags,  struct sockaddr *addr,  int *addr_len)_
 +
  receive a message from a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.95 

ksys_recvmmsg::

  _ksys_recvmmsg( int fd,  struct msghdr *mmsg,  unsigned int vlen,  unsigned int flags,  struct timespec *timeout)_
 +
  receive multiple messages on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.573 

ksys_recvmsg::

  _ksys_recvmsg( int fd,  struct msghdr *msg,  unsigned int flags)_
 +
  receive a message from a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.99 

ksys_remap_file_pages::

  _ksys_remap_file_pages( unsigned long start,  unsigned long size,  unsigned long prot,  unsigned long pgoff,  unsigned long flags)_
 +
  create a nonlinear file mapping +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.409 

ksys_removexattr::

  _ksys_removexattr( const char *pathname,  const char *name)_
 +
  remove an extended attribute +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.379 

ksys_rename::

  _ksys_rename( const char *oldname,  const char *newname)_
 +
  rename file relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.169 

ksys_renameat::

  _ksys_renameat( int oldfd,  const char *oldname,  int newfd,  const char *newname)_
 +
  change the name or location of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.503 

ksys_renameat2::

  _ksys_renameat2( int olddfd,  const char  *oldname,  int newdfd,  const char  *newname,  unsigned int flags)_
 +
  change the name or location of a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.607 

ksys_request_key::

  _ksys_request_key( const char *_type,  const char *_description,  const char *_callout_info,  key_serial_t destringid)_
 +
  request a key from the kernel's key management facility +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.473 

ksys_restart_syscall::

  _ksysSYSDEF_syscall(_restart_syscall,0)_
 +
  restart a system call after interruption by a stop signal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.415 

ksys_rmdir::

  _ksys_rmdir( const char *pathname)_
 +
  remove a directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.173 

ksys_rt_sigaction::

  _ksys_rt_sigaction( int sig,  const struct sigaction *act,  struct sigaction *oact,  size_t sigsetsize)_
 +
  examine and change a signal action +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.31 

ksys_rt_sigpending::

  _ksys_rt_sigpending( sigset_t *set,  size_t sigsetsize)_
 +
  examine pending signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.259 

ksys_rt_sigprocmask::

  _ksys_rt_sigprocmask( int how,  sigset_t *nset,  sigset_t *oset,  size_t sigsetsize)_
 +
  examine and change blocked signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.33 

ksys_rt_sigqueueinfo::

  _ksys_rt_sigqueueinfo( pid_t pid,  int sig,  siginfo_t *uinfo)_
 +
  queue a signal and data +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.263 

ksys_rt_sigreturn::

  _ksys_rt_sigreturn( unsigned long __unused)_
 +
  return from signal handler and cleanup stack frame +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.35 

ksys_rt_sigsuspend::

  _ksys_rt_sigsuspend( sigset_t *unewset,  size_t sigsetsize)_
 +
  wait for a signal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.265 

ksys_rt_sigtimedwait::

  _ksys_rt_sigtimedwait( const sigset_t *uthese,  siginfo_t *uinfo,  const struct timespec *uts,  size_t sigsetsize)_
 +
  synchronously wait +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.261 

ksys_rt_tgsigqueueinfo::

  _ksys_rt_tgsigqueueinfo( pid_t tgid,  pid_t pid,  int sig,  siginfo_t *uinfo)_
 +
  queue a signal and data +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.569 

ksys_sched_get_priority_max::

  _ksys_sched_get_priority_max( int policy)_
 +
  get priority limits +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.295 

ksys_sched_get_priority_min::

  _ksys_sched_get_priority_min( int policy)_
 +
  get static priority range +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.297 

ksys_sched_getaffinity::

  _ksys_sched_getaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_
 +
  set and get a thread's CPU affinity mask +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.393 

ksys_sched_getattr::

  _ksys_sched_getattr( pid_t pid,  struct sched_attr  *attr,  unsigned int size,  unsigned int flags)_
 +
  sched_setattr, sched_getattr \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.605 

ksys_sched_getparam::

  _ksys_sched_getparam( pid_t pid,  struct sched_param *param)_
 +
  get scheduling parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.289 

ksys_sched_getscheduler::

  _ksys_sched_getscheduler( pid_t pid)_
 +
  get scheduling policy +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.293 

ksys_sched_rr_get_interval::

  _ksys_sched_rr_get_interval( pid_t pid,  struct timespec *interval)_
 +
  get execution time limits +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.299 

ksys_sched_setaffinity::

  _ksys_sched_setaffinity( pid_t pid,  unsigned int len,  unsigned long *user_mask_ptr)_
 +
  set and get a thread's CPU affinity mask +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.391 

ksys_sched_setattr::

  _ksys_sched_setattr( pid_t pid,  struct sched_attr  *attr,  unsigned int flags)_
 +
  sched_setattr, sched_getattr \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.603 

ksys_sched_setparam::

  _ksys_sched_setparam( pid_t pid,  struct sched_param *param)_
 +
  set scheduling parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.287 

ksys_sched_setscheduler::

  _ksys_sched_setscheduler( pid_t pid,  int policy,  struct sched_param *param)_
 +
  set scheduling policy and parameters +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.291 

ksys_sched_yield::

  _ksysSYSDEF_syscall(_sched_yield,0)_
 +
  yield the processor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.53 

ksys_seccomp::

  _ksys_seccomp( unsigned int op,  unsigned int flags,  const char  *uargs)_
 +
  operate on Secure Computing state of the process +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.609 

ksys_select::

  _ksys_select( int n,  fd_set *inp,  fd_set *outp,  fd_set *exp,  struct timeval *tvp)_
 +
  synchronous I/O multiplexing +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.51 

ksys_semctl::

  _ksys_semctl( int semid,  int semnum,  int cmd,  semun_u arg)_
 +
  XSI semaphore control operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.137 

ksys_semget::

  _ksys_semget( key_t key,  int nsems,  int semflg)_
 +
  get set of XSI semaphores +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.133 

ksys_semop::

  _ksys_semop( int semid,  struct sembuf *tsops,  unsigned nsops)_
 +
  XSI semaphore operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.135 

ksys_semtimedop::

  _ksys_semtimedop( int semid,  struct sembuf *tsops,  unsigned nsops,  const struct timespec *timeout)_
 +
  System V semaphore operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.417 

ksys_sendfile::

  _ksys_sendfile( int out_fd,  int in_fd,  off_t *offset,  size_t count)_
 +
  transfer data between file descriptors +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.85 

ksys_sendmmsg::

  _ksys_sendmmsg( int fd,  struct mmsghdr *mmsg,  unsigned int vlen,  unsigned int flags)_
 +
  send multiple messages on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.589 

ksys_sendmsg::

  _ksys_sendmsg( int fd,  struct msghdr *msg,  unsigned flags)_
 +
  send a message on a socket using a message structure +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.97 

ksys_sendto::

  _ksys_sendto( int fd,  void *buff,  size_t len,  unsigned flags,  struct sockaddr *addr,  int addr_len)_
 +
  send a message on a socket +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.93 

ksys_set_mempolicy::

  _ksys_set_mempolicy( int mode,  unsigned long *nmask,  unsigned long maxnode)_
 +
  set default NUMA memory policy for a thread and its children +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.451 

ksys_set_robust_list::

  _ksys_set_robust_list( struct robust_list_head *head,  size_t len)_
 +
  get/set list of robust futexes +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.521 

ksys_set_tid_address::

  _ksys_set_tid_address( int *tidptr)_
 +
  set pointer to thread ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.413 

ksys_setdomainname::

  _ksys_setdomainname( char *name,  int len)_
 +
  get/set NIS domain name +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.345 

ksys_setfsgid::

  _ksys_setfsgid( gid_t gid)_
 +
  set group identity used for filesystem checks +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.251 

ksys_setfsuid::

  _ksys_setfsuid( uid_t uid)_
 +
  set user identity used for filesystem checks +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.249 

ksys_setgid::

  _ksys_setgid( gid_t gid)_
 +
  set-group-ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.217 

ksys_setgroups::

  _ksys_setgroups( int gidsetsize,  gid_t *grouplist)_
 +
  get/set list of supplementary group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.237 

ksys_sethostname::

  _ksys_sethostname( char *name,  int len)_
 +
  get/set hostname +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.343 

ksys_setitimer::

  _ksys_setitimer( int which,  struct itimerval *value,  struct itimerval *ovalue)_
 +
  set the value of an interval timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.81 

ksys_setns::

  _ksys_setns( int fd,  int nstype)_
 +
  reassociate thread with a namespace +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.591 

ksys_setpgid::

  _ksys_setpgid( pid_t pid,  pid_t pgid)_
 +
  set process group ID for job control +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.223 

ksys_setpriority::

  _ksys_setpriority( int which,  int who,  int niceval)_
 +
  set the nice value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.285 

ksys_setregid::

  _ksys_setregid( gid_t rgid,  gid_t egid)_
 +
  set real and effective group IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.233 

ksys_setresgid::

  _ksys_setresgid( gid_t rgid,  gid_t egid,  gid_t sgid)_
 +
  set real, effective and saved user or group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.243 

ksys_setresuid::

  _ksys_setresuid( uid_t *ruid,  uid_t *euid,  uid_t *suid)_
 +
  set real, effective and saved user or group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.239 

ksys_setreuid::

  _ksys_setreuid( uid_t ruid,  uid_t euid)_
 +
  set real and effective user IDs +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.231 

ksys_setrlimit::

  _ksys_setrlimit( unsigned int resource,  struct rlimit *rlim)_
 +
  control maximum resource consumption +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.323 

ksys_setsid::

  _ksysSYSDEF_syscall(_setsid,0)_
 +
  create session and set process group ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.229 

ksys_setsockopt::

  _ksys_setsockopt( int fd,  int level,  int optname,  char *optval,  int optlen)_
 +
  set the socket options +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.113 

ksys_settimeofday::

  _ksys_settimeofday( struct timeval *tv,  struct timezone *tz)_
 +
  get / set time +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.331 

ksys_setuid::

  _ksys_setuid( uid_t uid)_
 +
  set user ID +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.215 

ksys_setxattr::

  _ksys_setxattr( const char *pathname,  const char *name,  const void *value, size_t size,  int flags)_
 +
  set an extended attribute value +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.361 

ksys_shmat::

  _ksys_shmat( int shmid,  char *shmaddr,  int shmflg)_
 +
  XSI shared memory attach operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.65 

ksys_shmctl::

  _ksys_shmctl( int shmid,  int cmd,  struct shmid_ds *buf)_
 +
  XSI shared memory control operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.67 

ksys_shmdt::

  _ksys_shmdt( char *shmaddr)_
 +
  XSI shared memory detach operation +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.139 

ksys_shmget::

  _ksys_shmget( key_t key,  size_t size,  int shmflg)_
 +
  get an XSI shared memory segment +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.63 

ksys_shutdown::

  _ksys_shutdown( int fd,  int how)_
 +
  shut down socket send and receive operations +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.101 

ksys_sigaltstack::

  _ksys_sigaltstack( const stack_t *uss,  stack_t *uoss)_
 +
  set and get signal alternate stack context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.267 

ksys_signalfd::

  _ksys_signalfd( int ufd,  sigset_t *user_mask,  size_t sizemask)_
 +
  create a file descriptor for accepting signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.539 

ksys_signalfd4::

  _ksys_signalfd4( int ufd,  sigset_t *user_mask,  size_t sizemask,  int flags)_
 +
  create a file descriptor for accepting signals +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.553 

ksys_socket::

  _ksys_socket( int family,  int type,  int protocol)_
 +
  create an endpoint for communication +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.87 

ksys_socketpair::

  _ksys_socketpair( int family,  int type,  int protocol,  int *usockvec)_
 +
  create a pair of connected sockets +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.111 

ksys_splice::

  _ksys_splice( int fd_in,  loff_t *off_in,  int fd_out,  loff_t *off_out, size_t len,  unsigned int flags)_
 +
  splice data to/from a pipe +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.525 

ksys_stat::

  _ksys_stat( const char *filename,  struct stat *statbuf)_
 +
  get file status +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.13 

ksys_statfs::

  _ksys_statfs( const char *pathname,  struct statfs *buf)_
 +
  get filesystem statistics +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.277 

ksys_swapoff::

  _ksys_swapoff( const char *specialfile)_
 +
  start/stop swapping to file/device +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.339 

ksys_swapon::

  _ksys_swapon( const char *specialfile,  int swap_flags)_
 +
  start/stop swapping to file/device +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.337 

ksys_symlink::

  _ksys_symlink( const char *oldname,  const char *newname)_
 +
  make a symbolic link relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.181 

ksys_symlinkat::

  _ksys_symlinkat( const char *oldname,  int newfd,  const char *newname)_
 +
  make a new name for a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.507 

ksys_sync::

  _ksysSYSDEF_syscall(_sync,0)_
 +
  schedule file system updates +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.327 

ksys_sync_file_range::

  _ksys_sync_file_range( long fd,  loff_t offset,  loff_t bytes,  long flags)_
 +
  sync a file segment with disk +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.529 

ksys_syncfs::

  _ksys_syncfs( int fd)_
 +
  commit filesystem caches to disk +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.587 

ksys_sysfs::

  _ksys_sysfs( int option,  unsigned long arg1,  unsigned long arg2)_
 +
  get filesystem type information +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.281 

ksys_sysinfo::

  _ksys_sysinfo( struct sysinfo *info)_
 +
  return system information +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.203 

ksys_syslog::

  _ksys_syslog( int type,  char *buf,  int len)_
 +
  log a message +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.211 

ksys_tee::

  _ksys_tee( int fdin,  int fdout,  size_t len,  unsigned int flags)_
 +
  duplicating pipe content +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.527 

ksys_tgkill::

  _ksys_tgkill( pid_t tgid,  pid_t pid,  int sig)_
 +
  send a signal to a thread +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.445 

ksys_time::

  _ksys_time( time_t *tloc)_
 +
  get time +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.387 

ksys_timer_create::

  _ksys_timer_create( const clockid_t which_clock,  struct sigevent *timer_event_spec,  timer_t *created_timer_id)_
 +
  create a per-process timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.421 

ksys_timer_delete::

  _ksys_timer_delete( timer_t timer_id)_
 +
  delete a per-process timer +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.429 

ksys_timer_getoverrun::

  _ksys_timer_getoverrun( timer_t timer_id)_
 +
  link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.427 

ksys_timer_gettime::

  _ksys_timer_gettime( timer_t timer_id,  struct itimerspec *setting)_
 +
  arm/disarm and fetch +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.425 

ksys_timer_settime::

  _ksys_timer_settime( timer_t timer_id,  int flags,  const struct itimerspec *new_setting,  struct itimerspec *old_setting)_
 +
  arm/disarm and fetch +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.423 

ksys_timerfd_create::

  _ksys_timerfd_create( int clockid,  int flags)_
 +
  timerfd_create, timerfd_settime, timerfd_gettime \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.541 

ksys_timerfd_gettime::

  _ksys_timerfd_gettime( int ufd,  struct itimerspec *otmr)_
 +
  timerfd_create, timerfd_settime, timerfd_gettime \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.549 

ksys_timerfd_settime::

  _ksys_timerfd_settime( int ufd,  int flags,  const struct itimerspec *utmr,  struct itimerspec *otmr)_
 +
  timerfd_create, timerfd_settime, timerfd_gettime \- +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.547 

ksys_times::

  _ksys_times( struct sysinfo *info)_
 +
  get process and waited-for child process times +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.205 

ksys_tkill::

  _ksys_tkill( pid_t pid,  int sig)_
 +
  send a signal to a thread +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.385 

ksys_truncate::

  _ksys_truncate( const char *path,  long length)_
 +
  truncate a file to a specified length +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.157 

ksys_umask::

  _ksys_umask( int mask)_
 +
  set and get the file mode creation mask +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.195 

ksys_umount2::

  _ksys_umount2( const char *target,  int flags)_
 +
  unmount filesystem +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.335 

ksys_uname::

  _ksys_uname( struct old_utsname *name)_
 +
  get the name of the current system +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.131 

ksys_unlink::

  _ksys_unlink( const char *pathname)_
 +
  remove a directory entry relative to directory file descriptor +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.179 

ksys_unlinkat::

  _ksys_unlinkat( int dfd,  const char *pathname,  int flag)_
 +
  delete a name and possibly the file it refers to +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.501 

ksys_unshare::

  _ksys_unshare( unsigned long unshare_flags)_
 +
  disassociate parts of the process execution context +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.519 

ksys_ustat::

  _ksys_ustat( unsigned dev,  struct ustat *ubuf)_
 +
  get filesystem statistics +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.275 

ksys_utime::

  _ksys_utime( char *filename,  struct utimbuf *times)_
 +
  set file access and modification times +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.269 

ksys_utimensat::

  _ksys_utimensat( int dfd,  const char *filename,  struct timespec *utimes, int flags)_
 +
  set file access and modification times relative to directory +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.535 

ksys_utimes::

  _ksys_utimes( char *filename,  struct timeval *utimes)_
 +
  change file last access and modification times +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.447 

ksys_vfork::

  _ksysSYSDEF_syscall(_vfork,0)_
 +
  create a child process and block parent +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.121 

ksys_vhangup::

  _ksysSYSDEF_syscall(_vhangup,0)_
 +
  virtually hangup the current terminal +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.309 

ksys_vmsplice::

  _ksys_vmsplice( int fd,  const struct iovec *iov,  unsigned long nr_segs, unsigned int flags)_
 +
  splice user pages to/from a pipe +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.531 

ksys_wait4::

  _ksys_wait4( pid_t upid,  int *stat_addr,  int options,  struct rusage *ru)_
 +
  wait for process to change state, BSD style +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.127 

ksys_waitid::

  _ksys_waitid( int which,  pid_t upid,  struct siginfo *infop,  int options,  struct rusage *ru)_
 +
  wait for a child process to change state +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.469 

ksys_write::

  _ksys_write( unsigned int fd,  const char *buf,  size_t count)_
 +
  write on a file +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.7 

ksys_writev::

  _ksys_writev( unsigned long fd,  const struct iovec *vec,  unsigned long vlen)_
 +
  write a vector +
 link:../include/syscalls_x64.h[../include/syscalls_x64.h] l.45 

macro::

  _void  optimization_fence(void*p){}_
 +
  prevent optimizations. +
  cast a var to void*, and calling this, +
  leaves the compiler unknown on what he can strip. +
  (noipa) means the compiler doesn't know, what the function itself does. +
  (the function does nothing, but don't tell that gcc, please..) +
  therefore, everything used as parameter to this function, +
  will be calculated, defined, and so on before. +
  It's used for the globals,  +
  shich are pushed within _start onto the stack. +
  since _start itself only provides a global pointer, +
  and initialitzes some of the globals, +
  but doesn't use them again, +
  this construction is needed. +
  more funnily, the function will never be called. +
  It's past the asm inline syscall to exit. +
  But again, luckily gcc doesn't know. +
  All other options, like having the globals volatile,  +
  setting the optimization flag of _start to 0,  +
  having a volatile asm call with the globals as param, and so on, +
  have been useless. All after all, seems to me, ai has it's restrictions. +
  Size: ~32B  link:../include/minilib_global.h[../include/minilib_global.h] l.77 

todo_abort::

  _void todo_abort()_
 +
  Defines: getpid +
 Size: ~32B  link:../src/abort.c[../src/abort.c] l.3 

todo_putenv::

  _int todo_putenv( char *s )_
 +
  Defines: environ +
 Size: ~248B  link:../src/getenv.c[../src/getenv.c] l.22 